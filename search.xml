<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PMP(Project Management Professional) Learning</title>
      <link href="/2021/07/03/pmplearning/"/>
      <url>/2021/07/03/pmplearning/</url>
      
        <content type="html"><![CDATA[<h2 id="我的PMP之旅"><a href="#我的PMP之旅" class="headerlink" title="我的PMP之旅"></a>我的PMP之旅</h2><p>自己学习PMP的一些感受，体会，经验。。。</p><h2 id="PMP简介"><a href="#PMP简介" class="headerlink" title="PMP简介"></a>PMP简介</h2><p>简单介绍PMP，认证资质，PMBook</p><h2 id="知识体系与整体脉络"><a href="#知识体系与整体脉络" class="headerlink" title="知识体系与整体脉络"></a>知识体系与整体脉络</h2><p>五大过程组，十大知识领域，49个过程。。。</p><h3 id="项目整合管理"><a href="#项目整合管理" class="headerlink" title="项目整合管理"></a>项目整合管理</h3><h3 id="项目范围管理"><a href="#项目范围管理" class="headerlink" title="项目范围管理"></a>项目范围管理</h3><h3 id="项目进度管理"><a href="#项目进度管理" class="headerlink" title="项目进度管理"></a>项目进度管理</h3><h3 id="项目成本管理"><a href="#项目成本管理" class="headerlink" title="项目成本管理"></a>项目成本管理</h3><h3 id="项目质量管理"><a href="#项目质量管理" class="headerlink" title="项目质量管理"></a>项目质量管理</h3><h3 id="项目资源管理"><a href="#项目资源管理" class="headerlink" title="项目资源管理"></a>项目资源管理</h3><h3 id="项目沟通管理"><a href="#项目沟通管理" class="headerlink" title="项目沟通管理"></a>项目沟通管理</h3><h3 id="项目风险管理"><a href="#项目风险管理" class="headerlink" title="项目风险管理"></a>项目风险管理</h3><h3 id="项目采购管理"><a href="#项目采购管理" class="headerlink" title="项目采购管理"></a>项目采购管理</h3><h3 id="项目相关方管理"><a href="#项目相关方管理" class="headerlink" title="项目相关方管理"></a>项目相关方管理</h3><h2 id="自我思考与实践"><a href="#自我思考与实践" class="headerlink" title="自我思考与实践"></a>自我思考与实践</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> PMP </tag>
            
            <tag> Project Management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-Annual-Review-and-Planning</title>
      <link href="/2020/12/29/2021-annual-review-and-planning/"/>
      <url>/2020/12/29/2021-annual-review-and-planning/</url>
      
        <content type="html"><![CDATA[<h1 id="2020年回顾"><a href="#2020年回顾" class="headerlink" title="2020年回顾"></a>2020年回顾</h1><p>时光飞逝，2020年距离结束还剩下不到60个小时，此刻公司的大楼外，雪花飞舞，在这朦胧的夜色中倒显得有点活泼，想来，这也是苏州2020年的第一场雪。<br>透过14楼的落地玻璃，远眺，没有丝毫寒意，却将半个工业园区尽收眼底。此情此景，让人不得不感概一番，真是一个写总结，写计划的好意境。<br>回顾自己的2020年，除了增长了十多斤肥肉以外，还是有不少收获，不管是从生活上还是从工作上，都有不一样的成长。回望，却也不得不唏嘘感概一番。</p><h2 id="工作上的回顾"><a href="#工作上的回顾" class="headerlink" title="工作上的回顾"></a>工作上的回顾</h2><p>伴随着疫情，2020年的开始，记忆中是从在家办公开始的。新冠病毒的席卷，谁都没有想到这一波影响让诸多行业都萎靡不振，甚至轰然倒塌，不出例外，汽车，工业领域自然也受到了很大的冲击。</p><p>业务量的持续下滑，成本需要被不断优化，让客户的投资变得更加谨慎；另一方面，也对我们的解决方案提出了更大的期待，对软件产品本身提出了更高的要求。对自己而言，更快地提升开发技能和水平，掌握更全面，更系统的软件开发流程信息，扩展更多的业务领域知识，成为了2020工作的主旋律。</p><p>下面是在对工作上自我窥视时，留下的几个小总结：</p><p><strong>对技术仍旧保持初心，持续学习。</strong> 作为一个初入职场刚两年多的新人，奠定扎实的技术基础，毋庸置疑是第一步。保持持续学习的初心，永远是技术人的使命和追求。这一年，接触了Docker技术，实践了云开发，感受了微服务，也探索了敏捷流程；这一年，了解了精益的车间管理理念，也学习了很多演示技巧，沟通技巧和管理技巧。以技术为中轴，自己的各项认知都有一些提升，也在不断改善和优化自己的能力矩阵。</p><p><strong>学习构建良好的开发团队。</strong> 2020年的一个重要线索是围绕敏捷开发，组建优秀的技术团队。这一年，有幸担任团队的敏捷教练，改变了自己的很多认知。例如，让我深刻认识到，技术水平是团队的重要能力因素，但是合力破冰，走得更快更稳，是我们实践敏捷首先要去学会的。迭代的稳定，队员的士气，团队的氛围，节奏和状态，都是需要综合考虑的。当真的去实践透明化和自组织的时候，往往考验我们的不是技术水平的差异，而是这个团队在交付压力面前的凝聚力，战斗力和信任度。</p><p><strong>屁股决定脑袋，保持头脑清醒</strong>。 复杂的环境，不同角色和层级的人，各种各样的信息，往往使人迷失。越是这样的时刻，越是需要让自己保持头脑清醒，不能被别人的思路拐跑。屁股决定脑袋，坐在什么样的位置，就会考虑什么样的利益。工作就是无时无刻不在做决策，无时无刻不在定义优先级，懂得了换位思考，才能抓得住。</p><p>这篇<a href="https://www.zhengchaoqiang.com/2020/01/04/dotnet-advanced-series-introduction/">2020 我的DotNet技术路线介绍</a>是2020年年初的时候对自己今年关于Net Core的一个学习路劲规划，现在看来，完成度也令人很不满意，不出意外，今年还是会希望继续这个Net Core的技术栈之旅。加强修炼，巩固基础知识。</p><h2 id="生活上的回顾"><a href="#生活上的回顾" class="headerlink" title="生活上的回顾"></a>生活上的回顾</h2><p>2020年是压力倍增的一年，有了娃，也有了房，还有了老人的牵绊，琐碎和突发事件无时无刻不在生活中发生，一度让我觉得难以承受，好在最后也还是挺了过来。</p><p><strong>陪伴变得更加珍贵。</strong> 女儿熙熙的出现让2020年的每个周末都马不停蹄，商场，早教，洗澡游泳，各种花样，也让我体会到了初为人父的辛劳，每天晚上回家也尽可能会抽时间来陪女儿。每每疲惫不堪的时候，看到女儿的水汪汪大眼睛盯着自己，咿咿呀呀，那些不悦和烦躁也都瞬间烟消云散了。生命的神奇在于延续，女儿精力充沛，爷爷却已迟暮，2020年的下半年有超过一半的时间是在医院度过的，无尽的注射用药，受尽折磨，面对生命的脆弱，那种心酸和无奈，任谁也无法摆脱。树欲静而风不止，子欲养而亲不待，能做的唯有利用好这陪伴的宝贵时间。亲情，有时候就是一种陪伴。</p><p><strong>健康变得更加重要。</strong> 2020年的自己胖了十几斤，又瘦了八斤，这是一个艰难的过程。胖是自己找了很多接口，胡吃海塞，将压力都转化为了热量，外卖，高糖，高油的食物，毫无运动的久坐，让自己走到了脂肪肝的边缘，看着自己胖出来，然后无动于衷，那感觉就像坠入深渊，而身边无稻草可抓。让自己醒悟过来是体检时医生对我的几句忠告，年纪轻轻，为什么对自己的身体这么不负责任，不加以控制呢？于是开始每天快走，慢跑，甚至力量，四十多天的坚持换来了8斤体重的下降，也是对自律的一种奖励。</p><p><strong>自控力变得更加迫切。</strong> 2020年的一个感受是，自己的自控力远远不够。所谓律己为先，劳其筋骨，饿其体肤，而后才能成大事。管理自己，才能管理好时间，管理好时间才能管理好其他。毅力和自控力往往纠缠在一起，坚持就像是跑马拉松，学会欣赏旅途中的风景和享受这种经历，会让人跑得更远。</p><h1 id="2021年计划"><a href="#2021年计划" class="headerlink" title="2021年计划"></a>2021年计划</h1><p>对待每一年的计划，我都会想起我的职场领路人对我说的两个心态，空杯心态和海绵心态。保持持续学习，终身学习的习惯，对自己负责。<strong>潜力无限，未来可期；扬长避短，保持初心。</strong> 时刻提醒自己，初心是自己成长最好的助力器，永远不要迷失自己，放任自己，要追随自己，激励自己。</p><p>2021年，具体来说，在下面几个方面做了一些规划，希望自己对自己的未来负责，对家人朋友和领导的信任负责：</p><h2 id="技术栈规划"><a href="#技术栈规划" class="headerlink" title="技术栈规划"></a>技术栈规划</h2><ul><li><strong>初级入门ABP</strong>。能够理解DDD设计思想，理解ABP各个模块的搭建和应用。</li><li><strong>熟悉23种设计模式</strong>，并形成自己的理解和知识脉络，知道设计模式和会用设计模式是完全不同的概念。</li><li><strong>拓展Net Core技术栈</strong>，进一步深入了解Net Core技术和周边技术，例如docker, k8s, EF Core, gRPC等。</li><li><strong>Go语言入门</strong>，利用Go语言进行一些实践，用来做API或者Go Web.</li><li><strong>夯实前端基础知识</strong>，尤其是对html5+css+js这一套组合拳，需要更加深入的了解，对于经典的JS和前端框架Angular需要进一步的了解，还可以尝试一些新的前端技术，例如Blazor等。</li></ul><h2 id="IT管理规划"><a href="#IT管理规划" class="headerlink" title="IT管理规划"></a>IT管理规划</h2><p>初入职场的两年的对项目管理和软件产品的开发流程多少有了一些体会，2021年希望用更专业的理论来指导自己的实践，计划参加的考试：</p><ul><li><strong>PMP</strong>, 项目管理专业人士资格认证(Project Management Professional)</li><li><strong>NPDP</strong>, 产品经理国际资格认证(New Product Development Professional)</li><li><strong>ACP</strong>, 敏捷项目经理国际资格认证(Agile Certified Practitioner)</li><li><strong>CSM</strong>, 敏捷认证(Certified Scrum Master), 基础级认证包括ScrumMaster认证（CSM）, ProductOwner认证(CSPO)，Scrum开发者认证(CSD),下图是分类：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2018.cnblogs.com/blog/44083/201905/44083-20190515181434856-506837135.png" alt="Scrum认证分为三个等级"></li></ul><h2 id="思维视野语言习惯规划"><a href="#思维视野语言习惯规划" class="headerlink" title="思维视野语言习惯规划"></a>思维视野语言习惯规划</h2><ul><li>对工业领域的更多探索和感悟，看视频，看书，听讲座，去拓展知识面，包括人工智能，数据分析，区块链等；</li><li>德语词汇的进一步积累，练习口语，沿着某一个学习路径坚持下去，重在重复；</li><li>英语口语，多说多练，多争取presentation的机会；</li><li>把握一切机会，增加自己的visibity，让自己露脸，去展示自己，克服内心恐惧，突破自己，挑战自己；</li><li>增强时间管理的自我意识，提高自控力和毅力，减少手机的使用时间；</li></ul><h2 id="身体健康目标"><a href="#身体健康目标" class="headerlink" title="身体健康目标"></a>身体健康目标</h2><ul><li>截至到2月底，完成第一个100天计划，减重到82kg；</li><li>截至到6月底，目标体重是78kg,截至到12月底，目标体重是76kg;</li><li>每天坚持30min运动时间，固定卡路里，点亮三个圈；</li><li>戒奶茶，可乐，雪碧等碳酸和高糖饮料；</li><li>饮食保持轻食习惯，少油少盐；</li></ul><h2 id="家人陪伴时间"><a href="#家人陪伴时间" class="headerlink" title="家人陪伴时间"></a>家人陪伴时间</h2><ul><li>工作日每天留出固定至少30min时间陪伴女儿，周末安排时间陪女儿和爷爷奶奶，切莫让自己后悔；</li><li>对待爱人是用成长的眼光和发展的眼光去看，思考的是如何创造彼此的影响力，互相扶持而不是互相diss;</li><li>规划旅游时间和踏青活动等；</li></ul><h2 id="2021书单（持续更新）"><a href="#2021书单（持续更新）" class="headerlink" title="2021书单（持续更新）"></a>2021书单（持续更新）</h2><ul><li>管理类书籍</li><li>技术类书籍</li><li>领域类书籍</li><li>语言习惯书籍</li><li>其他书籍</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yearly Planning </tag>
            
            <tag> Yearly Review </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-Crash-Tutorial</title>
      <link href="/2020/06/24/docker-crash-tutorial/"/>
      <url>/2020/06/24/docker-crash-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ol><li>Docker  VS  VirtualMachine</li><li>centOS7下Docker基本操作</li><li>Asp.Net Core+Docker</li><li>Docker部署集群负载均衡</li><li>Docker-compose docker-machine docker-swarm</li></ol><h3 id="虚拟机–容器来源"><a href="#虚拟机–容器来源" class="headerlink" title="虚拟机–容器来源"></a>虚拟机–容器来源</h3><ul><li>硬件发展速度—各种翻倍—服务器内存—Asp.Net+SqlServer+Nginx—资源利用率太低—能不能分开用</li><li>环境冲突，程序之间相互影响</li><li>快速部署的需求—发布集群的时候</li></ul><p><strong>目的</strong>: 把一个大的服务器分解成多个小的个体，五脏俱全，各种应用分布在不同的个体里面，互不影响—利用率提高—镜像快速部署。<br>2011—云计算时代</p><h3 id="VM-云计算"><a href="#VM-云计算" class="headerlink" title="VM-云计算"></a>VM-云计算</h3><ul><li>Vitual Machine—独立的完整服务器—ecs—模拟了操作系统+安装完整的环境依赖+应用程序</li><li>Hypervisor1 和 Hypervisor2 都需要一波虚拟机管理系统</li><li>Hypervisor1 直接架构在硬件上实现</li><li>Hypervisor2 操作系统上利用虚拟机管理技术实现</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Docker/Hypervisor.png" alt=""></p><h3 id="番外篇-云计算"><a href="#番外篇-云计算" class="headerlink" title="番外篇-云计算"></a>番外篇-云计算</h3><p><strong>何谓云计算？</strong></p><ul><li>云计算就是大型服务器分多个虚拟机</li><li>然后能控制计算资源，对外出售服务，卖的就是计算资源</li><li>按需付费—-现在云计算是资源+服务</li><li>也可以把小型机联合管理，提供大的计算能力</li></ul><h3 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h3><p>Docker就是虚拟化的一种轻量级替代技术。Docker的容器技术不依赖任何语言、框架或系统，可以将App变成一种 标准化的、可移植的、自管理的组件，并脱离服务器硬件在任何主流系统中开发、调试和运行。</p><p>容器是隔离的小个体—轻量级—共享内核。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Docker/Container.png" alt=""></p><h3 id="Docker基础架构"><a href="#Docker基础架构" class="headerlink" title="Docker基础架构"></a>Docker基础架构</h3><ol><li>namespace命名空间: Linux特有的，用来隔离进程，管控资源权限;</li><li>Control group控制组: 控制进程使用资源的大小，能用多少资源</li><li>LXC(Linux containers): Namespace+cgroup 容器技术—共享内核 SDK</li><li>Docker—是在Lxc做了封装，做了开发，提供业务功能</li></ol><h2 id="Docker是啥？"><a href="#Docker是啥？" class="headerlink" title="Docker是啥？"></a>Docker是啥？</h2><p>说人话！容器到底是啥？鲸鱼是docker 引擎，守护进程；水是操作系统，深入内核；集装箱是容器，container, 每个集装箱里面是一个完整的东西。</p><ul><li>Docker是一种虚拟化的解决方案</li><li>可以让应用+依赖独立起来—高效</li><li>而且能快速复制</li><li>Docker其实是一项应用，Client/Server</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Docker/docker.jpg" alt=""></p><h3 id="对比-物理机-虚拟机-Docker"><a href="#对比-物理机-虚拟机-Docker" class="headerlink" title="对比 物理机-虚拟机-Docker"></a>对比 物理机-虚拟机-Docker</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Docker/Physicalmachine.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Docker/Suite.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Docker/DockerContainer.jpg" alt=""></p><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="基于Centos操作系统的Docker环境安装"><a href="#基于Centos操作系统的Docker环境安装" class="headerlink" title="基于Centos操作系统的Docker环境安装"></a>基于Centos操作系统的Docker环境安装</h3><p>参考docker官网安装教程：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a><br>在root用户下依次执行以下操作即可：</p><ul><li><strong>第一步</strong> 卸载旧的安装包</li></ul><pre><code>yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine</code></pre><ul><li><strong>第二步</strong> 安装需要的安装包</li></ul><pre><code>yum install -y yum-utils</code></pre><ul><li><strong>第三步</strong> 设置镜像仓库</li></ul><pre><code>yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo --默认是国外的#如果没有vpn 建议安装阿里云的   yum-config-manager \ --add-repo \ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo#更新yum 索引安装包yum makecache fast</code></pre><ul><li><strong>第四步</strong> 安装docker相关</li></ul><pre><code>yum install docker-ce docker-ce-cli containerd.io (可能会出错，多试几次)</code></pre><ul><li>*<em>第五步 *</em> 启动docker服务</li></ul><pre><code>systemctl start docker#查看docker 是否安装完成docker --version</code></pre><ul><li><strong>第六步</strong> HelloWorld</li></ul><pre><code>docker run hello-world#查看所有的docker 镜像 docker imagesdocker search aspnetdocker pull mcr.microsoft.com/dotnet/core/aspnet:latest</code></pre><h3 id="Docker-卸载"><a href="#Docker-卸载" class="headerlink" title="Docker 卸载"></a>Docker 卸载</h3><ul><li><p>卸载依赖 <code>yum remove docker-ce docker-ce-cli containerd.io</code></p></li><li><p>删除资源 <code>rm -rf /var/lib/docker</code></p></li></ul><h3 id="Docker镜像先关的基本指令"><a href="#Docker镜像先关的基本指令" class="headerlink" title="Docker镜像先关的基本指令"></a>Docker镜像先关的基本指令</h3><h4 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h4><ul><li>docker images</li></ul><p><strong>REPOSITORY</strong>：表示镜像的仓库源</p><p><strong>TAG</strong>：镜像的标签</p><p><strong>IMAGE ID</strong>：镜像ID</p><p><strong>CREATED</strong>：镜像创建时间</p><p><strong>SIZE**</strong>：镜像大小</p><h4 id="获取新的镜像："><a href="#获取新的镜像：" class="headerlink" title="获取新的镜像："></a>获取新的镜像：</h4><ul><li>docker pull 名称</li></ul><h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><ul><li>docker search httpd</li></ul><p>*<em>NAME: *</em> 镜像仓库源的名称</p><p>*<em>DESCRIPTION: *</em>镜像的描述</p><p>*<em>OFFICIAL: *</em>是否 docker 官方发布</p><p>*<em>stars: *</em>类似 Github 里面的 star，表示点赞、喜欢的意思。</p><p>*<em>AUTOMATED: *</em>自动构建。</p><h3 id="删除镜像-会提示先停止使用中的容器"><a href="#删除镜像-会提示先停止使用中的容器" class="headerlink" title="删除镜像(会提示先停止使用中的容器)"></a>删除镜像(会提示先停止使用中的容器)</h3><ul><li>docker rmi 镜像name/镜像id</li></ul><h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h4><ul><li><p>使用 Dockerfile 指令来创建一个新的镜像</p><p><strong>docker build</strong> ，从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p></li></ul><h4 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h4><ul><li><p>运行的容器</p></li><li><p>docker exec -it fd2c868cadlc /bin/bash 进入容器操作</p></li><li><p>apt-get update</p></li><li><p>exit</p></li><li><p>docker commit 来提交容器副本</p></li></ul><p>docker commit -m=”nginx has update0618” -a=”chaoqiang” 79323dxds323 nginx-8081-8082:vCustom2</p><p>· <strong>-m:</strong> 提交的描述信息</p><p>· <strong>-a:</strong> 指定镜像作者</p><p>· 79323dxds323<strong>：</strong>容器 ID</p><p>· nginx-8081-8082:vCustom2<strong>:</strong> 指定要创建的目标镜像名-tag</p><p>(要点时间)</p><h4 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h4><ul><li><p>docker tag 命令，为镜像添加一个新的标签。</p></li><li><p>docker tag 860c279d2fec runoob/centos:dev</p></li><li><p>docker tag 镜像ID，这里是 860c279d2fec ,用户名称、镜像源名(repository name)和新的标签</p></li></ul><h3 id="Docker容器基本命令"><a href="#Docker容器基本命令" class="headerlink" title="Docker容器基本命令"></a>Docker容器基本命令</h3><p>查看全部命令： docker<br>具体命令详情 docker ps –help<br>启动容器  docker run -it nginx /bin/bas</p><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li><strong>-d</strong> <strong>后台运行</strong></li><li><strong>nginx</strong>: nginx镜像。</li><li><strong>/bin/bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。(exit 退出终端)</li><li>表示载入容器后运行bash ,docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself</li></ul><h4 id="容器实例基本操作"><a href="#容器实例基本操作" class="headerlink" title="容器实例基本操作"></a>容器实例基本操作</h4><ul><li><p>查看所有容器 docker ps -a</p></li><li><p>查看容器运行日志 docker logs 容器名称/容器id</p></li><li><p>停止容器运行 docker stop 容器name/容器id</p></li><li><p>终止容器后运行 docker start 容器name/容器id</p></li><li><p>容器重启docker restart 容器name/容器id</p></li><li><p>删除容器 docker rm -f 容器name/容器id</p></li></ul><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><ul><li><p>docker rmi -f 镜像id (可以根据 docker images 查询)</p></li><li><p>docker rmi -f $(docker images) –删除所有镜像</p></li></ul><h4 id="查询docker-的详细信息"><a href="#查询docker-的详细信息" class="headerlink" title="查询docker 的详细信息"></a>查询docker 的详细信息</h4><ul><li><p>docker stats dockerid</p></li><li><p>查看 Docker 的底层信息， <strong>docker inspect</strong> 来查看 Docker 的底层信息</p></li></ul><h4 id="停止一个正在运行的容器"><a href="#停止一个正在运行的容器" class="headerlink" title="停止一个正在运行的容器"></a>停止一个正在运行的容器</h4><ul><li><p>docker stop 此方式常常被翻译为优雅的停止容器</p></li><li><p>docker stop 容器ID或容器名</p></li></ul><p>参数 -t：关闭容器的限时，如果超时未能关闭则用kill强制关闭，默认值10s，这个时间用于容器的自己保存状态</p><p>docker stop -t=60 容器ID或容器名</p><ul><li><p>docker kill</p></li><li><p>docker kill 容器ID或容器名 :直接关闭容器</p></li></ul><p>由此可见stop和kill的主要区别:stop给与一定的关闭时间交由容器自己保存状态，kill直接关闭容器</p><ul><li>停用全部运行中的容器:</li></ul><p><code>docker stop $(docker ps -q)</code></p><ul><li>删除全部容器：</li></ul><p><code>docker rm $(docker ps -aq)</code></p><ul><li>一条命令实现停用并删除容器：</li></ul><p><code>docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</code></p><h4 id="容器导入导出"><a href="#容器导入导出" class="headerlink" title="容器导入导出"></a>容器导入导出</h4><p><strong>导出容器</strong></p><p>如果要导出本地某个容器，可以使用 <strong>docker export</strong> 命令。</p><p><code>docker export 1e560fca3906 &gt; nginx.tar</code></p><p><strong>导入容器快照</strong></p><p>可以使用 docker import 从容器快照文件中再导入为镜像</p><p><code>cat docker/ubuntu.tar | docker import - test/ubuntu:v1</code></p><p>也可以通过指定 URL 或者某个目录来导入</p><p><code>docker import http://example.com/exampleimage.tgz example/imagerepo</code></p><h3 id="Docker-仓库管理"><a href="#Docker-仓库管理" class="headerlink" title="Docker 仓库管理"></a>Docker 仓库管理</h3><h4 id="注册-登录"><a href="#注册-登录" class="headerlink" title="注册-登录"></a>注册-登录</h4><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com</a></p><p><strong>SignIn **<br>Account: zhengchaoqiang<br>Password: ****</strong></p><h4 id="DockerHub基本操作"><a href="#DockerHub基本操作" class="headerlink" title="DockerHub基本操作"></a>DockerHub基本操作</h4><ul><li><p>docker login 登录</p></li><li><p>docker logout 退出</p></li><li><p>搜索镜像：docker search nginx</p></li><li><p>拉取镜像 docker pull nginx</p></li><li><p>推送镜像 docker push nginx-8081-8082:vCustom2（权限没成功）</p></li></ul><h2 id="Docker上部署-Net-Core应用程序"><a href="#Docker上部署-Net-Core应用程序" class="headerlink" title="Docker上部署.Net Core应用程序"></a>Docker上部署.Net Core应用程序</h2><p>一般使用Docker运行一个Net Core的项目有两种方式：</p><ul><li>一种是发布后的文件+官方CLR镜像；</li><li>另一种是使用dockerfile去构建镜像 –run 较为常用</li></ul><p><a href="https://www.cnblogs.com/94cool/p/9811839.html" target="_blank" rel="noopener">https://www.cnblogs.com/94cool/p/9811839.html</a><br><a href="https://www.cnblogs.com/zhizihuakai/p/11293802.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhizihuakai/p/11293802.html</a></p><h3 id="第一种方法-用官方镜像直接启动"><a href="#第一种方法-用官方镜像直接启动" class="headerlink" title="第一种方法 用官方镜像直接启动"></a>第一种方法 用官方镜像直接启动</h3><ul><li>首先获取官方镜像 docker pull mcr.microsoft.com/dotnet/core/aspnet:latest</li><li>dotnet publish 发布文件 dotnet publish -c Release </li><li>通过ssh终端上传文件到Centos服务器的 /root/website/publish 这个目录下</li><li>用官方镜像启动net core 3.1的一个demo，命令如下：</li></ul><p>docker run -d -p 8081:80 -v /root/website/publish:/app –workdir /app mcr.microsoft.com/dotnet/core/aspnet dotnet /app/Demo.dll<br>解读一下这个命令：<code>docker run [选项] &lt;镜像名称, id&gt; [命令] [参数]</code></p><ul><li><strong>-d</strong> –detach=false 指定容器运行于前台还是后台，默认为false</li><li><strong>-p</strong> –public=[] 设置容器暴露的端口 这里对外暴露8081端口，容器内部的端口是80.</li><li><strong>-v</strong> –volume=[] 设置容器挂载的存储卷，也就是挂载到容器的某个目录。</li><li><strong>-w</strong> –workdir=”” 设置容器的工作目录</li><li><strong>dotnet /app/Demo.dll</strong> 在容器的工作目录里运行dotnet 命令</li></ul><p>更加丰富的dock run命令可以参考：</p><pre class="line-numbers language-shell"><code class="language-shell"># run用于指定镜像创建容器$ docker run [选项] <镜像名称, id> [命令] [参数]# 选项-d, --detach=false 指定容器运行于前台还是后台，默认为false。-i, --interactive=false 打开标准输入用于控制台交互-t, --tty=false 分配tty设备用来支持终端登录，默认为false。-u, --user="" 指定容器的用户-a, --attach=[] 登录容器，必须是以docker run -d启动的容器。-w, --workdir="" 设置容器的工作目录-c, --cpu-shares=0 设置容器CPU权重，在CPU共享场景下使用。-e, --env=[] 设置环境变量，容器中可使用该环境变量。-m, --memory="" 设置容器的内存上限-p, --public=[] 设置容器暴露的端口-h, --hostname="" 设置容器的主机名-v, --volume=[] 设置容器挂载的存储卷，也就是挂载到容器的某个目录。--volumn-from=[] 给容器挂载其他容器上的卷，也就是挂载到容器的某个目录。--cap-add=[] 添加权限--cap-drop=[] 删除权限--cidfile="" 运行容器后在指定文件中写入容器PID值，这是典型的监控系统的用法。--cpuset="" 设置容器可以使用那些CPU，此参数用来设置容器独占CPU。--device=[] 添加主机设备给容器，相当于设备直通。--dns=[] 设置容器的DNS服务器--dns-search=[] 设置容器的DNS搜索域名，写入到容器的/etc/resolv.conf文件。--env-file=[] 设置环境变量文件，文件格式为每行一个环境变量。--expose=[] 设置容器暴露的端口，即修改镜像的暴露端口。--link=[] 设置容器之间的关联关系，使用其他容器的IP、env等信息。--lxc-conf=[] 设置容器的配置文件，只有在指定--exe-driver=lxc时使用。--name="" 设置容器的名称，可通过名字进行容器管理，links特性需要使用名字。--net="bridge" 容器网络设置--privileged=false 设置容器是否为特权容器，特权容器拥有所有的capabilities。--restart="no" 设置让其停止后的重启策略--rm=false 设置容器停止后自动删除容器，不支持以docker run -d启动的容器。--sig-proxy=true 设置由代理接收并处理信号，但SIGCHLD、SIGSTOP、SIGKILL不能被代理。# 命令-d, --detach Detach模式，默认为守护进程模式，即容器以后台方式运行。--rm=false 若容器内的进程终止则自动删除容器，禁止和-d选项一起使用。--sig-proxy=true 将所有信号传递给进程，非TTY模式也一样，但不能传递SIGCHLD、SIGKILL、SIGSTOP信号。# 运行一个在后台执行的容器，同时使用控制台管理。$ docker run -i -t -d ubuntu:latest# 运行一个带命令且在后台不断执行的容器，不直接展示容器内部信息。$ docker run -d ubuntu:latest ping www.docker.com# 运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑，可用控制台管理。$ docker run -d --restart=always ubuntu:latest ping www.docker.com# 为容器指定一个名字$ docker run -d --name=ubuntu_server ubuntu:latest# 容器暴露80端口并指定宿主机81端口与其通信（宿主机端口:容器端口）$ docker run -d --name=ubuntu -p 81:80 ubuntu:latest# 指定容器内目录与宿主机目录共享（宿主机目录:容器目录）$ docker run -d --name=ubuntu_server -v /home/www:/var/www ubuntu:latest# 设置宿主机与docker的共享目录$  docker run -d -i -t  -p 80:80 -v /share/swoft:/var/www/swoft --name swoft swoft/swoft /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种方法-Dockerfile制作镜像"><a href="#第二种方法-Dockerfile制作镜像" class="headerlink" title="第二种方法 Dockerfile制作镜像"></a>第二种方法 Dockerfile制作镜像</h3><p>在项目中添加Dockerfile用于制作镜像，默认的Dockerfile内容如下；</p><pre class="line-numbers language-shell"><code class="language-shell">FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS baseWORKDIR /appEXPOSE 80FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS buildWORKDIR /srcCOPY ["Demo/Demo.csproj", "Demo/"]RUN dotnet restore "Demo/Demo.csproj"COPY . .WORKDIR "/src/Demo"RUN dotnet build "Demo.csproj" -c Release -o /app/buildFROM build AS publishRUN dotnet publish "Demo.csproj" -c Release -o /app/publishFROM base AS finalWORKDIR /appCOPY --from=publish /app/publish .ENTRYPOINT ["dotnet", "Demo.dll"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里解读一下这个Dockerfile:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2018.cnblogs.com/blog/450977/201905/450977-20190512115951746-136143052.png" alt=""></p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>FROM：指定基础镜像（FROM是必备的指令，并且必须为第一条指令）<br>格式：</p><ul><li>FROM image</li><li>FROM image:tag</li><li>FROM image@digest  </li><li>示例：FROM mysql:5.6 \</li><li>注：tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</li></ul><h5 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h5><p>指明镜像维护着及其联系方式（一般是邮箱地址），例如：<br>``MAINTAINER Chaoqiang Zheng <a href="mailto:925610069@qq.com" target="_blank" rel="noopener">925610069@qq.com</a><code>不过，MAINTAINER并不推荐使用，更推荐使用LABEL来指定镜像作者，例如：</code>LABEL maintainer=”chaoqiang.zheng”`</p><h4 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h4><p>RUN: 用来执行命令行命令。其基本格式:</p><pre class="line-numbers language-shell"><code class="language-shell">shell 执行格式：  RUN <command>exec 执行格式：  RUN ["executable", "param1", "param2"]示例：  RUN ["executable", "param1", "param2"]  RUN apk update  RUN ["/etc/execfile", "arg1", "arg1"]注：RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子，我们在使用微软官方ASP.NET Core Runtime镜像时往往会加上以下RUN命令，弥补无法在默认镜像下使用Drawing相关接口的缺憾：</p><pre class="line-numbers language-shell"><code class="language-shell">FROM microsoft/dotnet:2.2.1-aspnetcore-runtimeRUN apt-get updateRUN apt-get install -y libgdiplusRUN apt-get install -y libc6-devRUN ln -s /usr/lib/libgdiplus.so /lib/x86_64-linux-gnu/libgdiplus.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>启动容器时执行的Shell命令，<strong>构建容器后调用，也就是在容器启动时才进行调用</strong>，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">CMD ["-C", "/start.sh"] CMD ["/usr/sbin/sshd", "-D"] CMD /usr/sbin/sshd -DCMD ["executable","param1","param2"] (执行可执行文件，优先)CMD ["param1","param2"] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)CMD command param1 param2 (执行shell内部命令)示例：CMD echo "This is a test." | wc -CMD ["/usr/bin/wc","--help"] 注：CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>声明容器运行的服务端口，指定与外界交互的端口，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">EXPOSE 80  443EXPOSE 8080EXPOSE 11211/tcp 11211/udp 注：EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>设置系统内环境变量，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">ENV MYSQL_ROOT_PASSWORD 123456ENV JAVA_HOME /usr/local/jdk1.8.0_45ENV <key> <value> #<key>之后的所有内容均会被视为其<value>的组成部分，因此，一次只能设置一个变量ENV <key>=<value> ... 可以设置多个变量，每个变量为一个"<key>=<value>"的键值对，如果<key>中包含空格，可以使用\来进行转义，也可以通过""来进行标示；另外，反斜线也可以用于续行示例：ENV myName John DoeENV myDog Rex The DogENV myCat=fluffy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>拷贝文件或目录到镜像中，如果是URL或压缩包，会自动下载或自动解压。<br><strong>将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</strong></p><pre class="line-numbers language-shell"><code class="language-shell">格式：ADD <src>... <dest>ADD ["<src>",... "<dest>"] 用于支持包含空格的路径示例：ADD hom* /mydir/ # 添加所有以"hom"开头的文件ADD hom?.txt /mydir/ # ? 替代一个单字符,例如："home.txt"ADD test relativeDir/ # 添加  "test"  到 `WORKDIR`/relativeDir/ADD test /absoluteDir/ # 添加  "test"  到 /absoluteDir/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>拷贝文件或目录到镜像中，用法同ADD，只是不支持自动下载和解压:<br><code>COPY ./start.sh /start.sh</code></p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>启动容器时执行的Shell命令，同CMD类似，只是由ENTRYPOINT启动的程序<strong>不会被docker run命令行指定的参数所覆盖</strong>，而且，<strong>这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序</strong>，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">ENTRYPOINT ["/bin/bash", "-C", "/start.sh"]ENTRYPOINT /bin/bash -C '/start.sh'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>指定容器挂载点到宿主机自动生成的目录或其他容器，一般不会在Dockerfile中用到，更常见的还是在docker run的时候指定-v数据卷。<br><code>VOLUME ["/var/lib/mysql"]</code></p><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>指定运行容器时的用户名或UID，后续的RUN也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。</p><pre class="line-numbers language-shell"><code class="language-shell">格式:  　　USER user  　　USER user:group  　　USER uid  　　USER uid:gid  　　USER user:gid  　　USER uid:group示例：  　　USER www注：使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>为RUN、CMD、ENTRYPOINT以及COPY和AND设置工作目录，例如：<code>WORKDIR /data</code></p><pre class="line-numbers language-shell"><code class="language-shell">示例：WORKDIR /a (这时工作目录为/a)WORKDIR b (这时工作目录为/a/b)WORKDIR c (这时工作目录为/a/b/c)  注：通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><p>在构建镜像时，指定一些参数，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">FROM centos:6 ARG user # ARG user=rootUSER $user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时，我们在docker build时可以带上自定义参数user了，如下所示：<br><code>docker build --build-arg user=chaoqiang Dockerfile .</code></p><h4 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h4><p>告诉Docker如何测试容器以检查它是否仍在工作，即健康检查，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">HEALTHCHECK --interval=5m --timeout=3s --retries=3 \    CMD curl -f http:/localhost/ || exit 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，一些选项的说明：</p><ul><li>–interval=DURATION (default: 30s)：每隔多长时间探测一次，默认30秒</li><li>– timeout= DURATION (default: 30s)：服务响应超时时长，默认30秒</li><li>–start-period= DURATION (default: 0s)：服务启动多久后开始探测，默认0秒</li><li>–retries=N (default: 3)：认为检测失败几次为宕机，默认3次</li></ul><p>一些返回值的说明：</p><ul><li>0：容器成功是健康的，随时可以使用</li><li>1：不健康的容器无法正常工作</li><li>2：保留不使用此退出代码</li></ul><h3 id="精简制作"><a href="#精简制作" class="headerlink" title="精简制作"></a>精简制作</h3><p>目的是将发布好的net core发布包直接制作镜像，不希望在linux上去执行restore build命令，因为有时候一些Nuget包是私有仓库的，无法获取，再一个是因为项目工程直接拷贝到服务器上也比较麻烦，因为我们最终开发调试还是在VS和windows环境下，所以这里精简的要求就是：Dockerfile中只执行拷贝和启动命令，不需要restore和build和publish这些命令；</p><p>初步的Dockerfile如下：</p><pre class="line-numbers language-shell"><code class="language-shell">FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS baseWORKDIR /appEXPOSE 8082COPY . /appENTRYPOINT ["dotnet", "Demo.dll"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在这个目录下执行制作镜像的命令：<br><code>docker build -t chaoqiang.docker.demo .</code><br>注意结尾这个点千万不能丢。</p><p>接下来就是通过制作好的镜像来运行容器<br><code>docker run -d -p 8010:8082 --name dockerdemo chaoqiang.docker.demo</code></p><p>通过验证发现一个问题，容器运行时没有将8082端口成功映射出来，我们进入终端看一下启动的详细日志：<br>docker run -it -p 8106:8082 –name dockerdemo chaoqiang.docker.demo<br>发现net core启动使用了默认端口80端口，没有按照我们想要的使用8082端口，这是为什么？</p><p>ASP.NET Core项目使用Kestrel作为默认的web服务器。<br>而集成Kestrel的ASP.NET Core有<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?tabs=aspnetcore2x&amp;view=aspnetcore-3.1#endpoint-configuration" target="_blank" rel="noopener">4中方式</a>指定终结点URL：</p><ul><li><code>ASPNETCORE_URLS</code> 环境变量</li><li><code>--urls</code>命令行参数</li><li><code>urls</code> 主机配置键</li><li><code>UseUrls</code>扩展方法</li></ul><p>这是因为基础镜像<code>.NET Core Runtime Dependencies</code>构建镜像的Dockerfile中指定了应用终结点URL</p><pre class="line-numbers language-shell"><code class="language-shell">ENV ASPNETCORE_URLS=http://+:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以你想修改默认端口,在你的Dockerfile添加如下，修改默认值即可：</p><pre class="line-numbers language-shell"><code class="language-shell">ENV ASPNETCORE_URLS=http://+:8082<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我们通过指定–Urls来实现也是可以的，传入参数即可，最终Dockerfile如下：</p><pre class="line-numbers language-shell"><code class="language-shell">FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS baseWORKDIR /appEXPOSE 8082COPY . /appENTRYPOINT ["dotnet", "Demo.dll","--urls=http://*:8082"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker Crash Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netcore认证授权与IdentityServer4（3）IdentityServer4详解</title>
      <link href="/2020/06/06/netcore-authentication-authorization3/"/>
      <url>/2020/06/06/netcore-authentication-authorization3/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ol><li>OAuth2.0&amp;Token</li><li>IdentityServer4-四模式实现</li><li>授权策略和扩展</li><li>OIDC-Hybrid</li></ol><h2 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h2><p><strong>什么是OAuth 2.0?</strong></p><ul><li>授权机制，是一种规范/委托协议，制定了授权流程；它可以让那些控制资源的人允许某个应用以代表他们来访问他们控制的资源，值得注意的是，代表这些人，而不是假冒或模仿这些人。这个应用从资源的所有者那里获得到授权（Authorization）和Access Token，随后就可以使用这个access token来进行访问资源。</li><li>解决授权问题，大家都遵守，才好沟通。</li><li>OAuth 2.0 授权Authorization,你能干什么；OIDC 身份认证，Authentication 你是谁；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/Token.png" alt="Token"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Relationship.png" alt=""></p><p><strong>为什么需要授权？</strong><br>送外卖的故事：<br>美团-饿了么-蜂鸟-跑腿小递<br>很多快递要进小区(假设能进来)<br>小区有密码锁—能给密码吗–不行</p><p>假设每次进来都打电话—确认了—放行—每次都要找我<br>假设弄个临时密码(有效期短点)—假如不再点饿了么—取消密码—大家都失效<br>一人一个临时密码—临时密码找我拿的—声明自己的身份—我确认了—给你个东西(临时密码/Token)—然后你就能进来—下次你还能进来</p><p>授权服务器做中介流程图：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/OAuth.png" alt=""></p><p><strong>这里的token(带点信息)使用过程 就是授权机制</strong></p><ul><li>数据所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。</li><li>系统从而产生一个短期的进入令牌（token），用来代替密码，</li><li>供第三方应用使用。</li><li>规范了下授权的流程</li></ul><h3 id="Token-VS-密码"><a href="#Token-VS-密码" class="headerlink" title="Token  VS 密码"></a>Token  VS 密码</h3><ul><li>都能进入系统，丢失后都是有风险的</li><li>Token短期的，密码是长期</li><li>令牌可以取消，密码只能修改(影响全部)</li><li>Token可以控制权限，scope</li><li>OAuth，就是Token比密码安全</li></ul><h3 id="OAuth2-0-四种授权"><a href="#OAuth2-0-四种授权" class="headerlink" title="OAuth2.0 四种授权"></a>OAuth2.0 四种授权</h3><ul><li>客户端凭证（client credentials）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/client%20credentials.jpg" alt=""></li><li>密码式（password）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/password.jpg" alt=""></li><li>隐藏式（implicit）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/implicit.jpg" alt=""></li><li>授权码（authorization-code）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/authorization-code.jpg" alt=""><br>以用户访问豆瓣为例，需用通过QQ授权服务来实现登录，使用code模式：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/OAuthDemo.jpg" alt=""></li></ul><h3 id="OAuth2-0-中的几个关键概念"><a href="#OAuth2-0-中的几个关键概念" class="headerlink" title="OAuth2.0 中的几个关键概念"></a>OAuth2.0 中的几个关键概念</h3><h4 id="端点-Endpoint"><a href="#端点-Endpoint" class="headerlink" title="端点 Endpoint"></a>端点 Endpoint</h4><p>Authorization ENdpoint 授权端点<br>Token Endpoint, Token端点<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/EndPoints.png" alt=""></p><h4 id="范围-Scope"><a href="#范围-Scope" class="headerlink" title="范围 Scope"></a>范围 Scope</h4><p>代表资源所有者在被保护资源那里的一些权限。</p><h4 id="Access-Token"><a href="#Access-Token" class="headerlink" title="Access Token"></a>Access Token</h4><ul><li>有时候就叫Token</li><li>用来访问被保护资源的凭据</li><li>代表了给客户端颁发的授权，也就是委托给客户端的权限</li><li>描述出Scope，有效期</li></ul><h4 id="Refresh-Token"><a href="#Refresh-Token" class="headerlink" title="Refresh Token"></a>Refresh Token</h4><ul><li>用来获取Access Token的凭据</li><li>由Authorization Server 颁发给客户端应用的</li><li>可选</li><li>具备让客户端应用逐渐降低党文权限的能力</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/RefreshToken1.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/RefreshToken2.png" alt=""></p><h4 id="OAuth2-0-发生错误"><a href="#OAuth2-0-发生错误" class="headerlink" title="OAuth2.0 发生错误"></a>OAuth2.0 发生错误</h4><ul><li>error</li><li>error_description</li><li>error_uri</li><li>state</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/OAuthError.png" alt=""></p><p>下面是几种错误类型：</p><ul><li>invalid_request</li><li>invalid_client(401)</li><li>invalid_grant</li><li>unauthorized_client</li><li>unsupported_grant_type</li><li>invalid_scope</li></ul><h2 id="OpenID-Connect"><a href="#OpenID-Connect" class="headerlink" title="OpenID Connect"></a>OpenID Connect</h2><p>OAuth 2.0不是身份认证协议<br>什么是身份认证协议？<br>它可以告诉应用程序当前的用户是谁，还有这些用户是否正在使用你的应用程序，它是一种安全架构，它可以告诉你用户使他们所声明的身份；通常，是通过提供一套安全凭据（例如用户名和密码）给应用程序来证明这一点。</p><h3 id="身份认证-VS-授权"><a href="#身份认证-VS-授权" class="headerlink" title="身份认证 VS 授权"></a>身份认证 VS 授权</h3><ul><li>身份认证 Authentication </li><li>授权 Authorization</li></ul><p>引用《OAuth 2.0 in Action》里面的一个比喻，把身份认证看作是软糖，而授权是巧克力。这两种东西感觉略有相似，但是本质上确实截然不同的：巧克力是一种原料，而软糖是一种糖果。可以使用巧克力作为主要预料做出巧克力口味的糖果，但是巧克力和软糖不是等价的。</p><p>尽管巧克力可以单独作为一种最终产品，但是在这个比喻里面巧克力是一种非常有用的原料，它极具多样性，可以用来做蛋糕，冰淇淋，雪糕等。</p><p>要制作巧克力软糖，也就是需要一个基于OAuth 2.0的身份认证协议。而OpenId Connect就是这样一个开放标准，它可以工作于不同的身份和供应商之间。OpenId Connect基于OAuth 2.0，在此之上，它添加了一些组件来提供身份认证能力。</p><p>OpenID Connect 的官方定义是： OpenID Connect 是建立在OAuth2.0 协议上的一个简单的身份标识层，OpenID Connect兼容OAuth 2.0.</p><p>OAuth 2.0与身份认证协议的角色映射如下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/OAuthRole.png" alt=""></p><p><strong>为什么不使用OAuth 2.0里面的Access Token来解决这个问题呢？</strong></p><ul><li>Access Token不含有身份认证的信息</li><li>生命周期可能很长，用户离开了，它仍有效</li><li>Access Token可能被其他客户端借用</li><li>Access Token不是为客户端准备的，它对客户端不透明，但是客户端可以从Access Token里得到一些用户信息。Access Token的真正目的是保护资源。</li></ul><h3 id="OIDC的具体内容"><a href="#OIDC的具体内容" class="headerlink" title="OIDC的具体内容"></a>OIDC的具体内容</h3><ul><li>ID Token</li><li>UserInfo端点</li><li>提供一组表示身份的scopes和claims: profile email address phone</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/OIDC.png" alt=""></p><h3 id="OIDC的三个流程"><a href="#OIDC的三个流程" class="headerlink" title="OIDC的三个流程"></a>OIDC的三个流程</h3><ul><li>Authorization Code Flow</li><li>Implicit Flow</li><li>Hybrid Flow</li></ul><h2 id="IdentityServer4"><a href="#IdentityServer4" class="headerlink" title="IdentityServer4"></a>IdentityServer4</h2><p><strong>IdentityServer4</strong>: ASP.NET CORE量身定制，实现了OpenID Connect和OAuth2.0协议，是认证授权中间件。<br>IdentityServer4有两种token，一种就是JWT Token，另一种是Reference Token，中心化的Token，需要每次校验都是访问鉴权授权中心的，一般不怎么使用。</p><h3 id="创建鉴权授权中心"><a href="#创建鉴权授权中心" class="headerlink" title="创建鉴权授权中心"></a>创建鉴权授权中心</h3><h4 id="Step1-下载IdentityServer4的模板"><a href="#Step1-下载IdentityServer4的模板" class="headerlink" title="Step1 下载IdentityServer4的模板"></a>Step1 下载IdentityServer4的模板</h4><p>参考Id4官方文档：<a href="https://identityserver4.readthedocs.io/en/latest/quickstarts/0_overview.html" target="_blank" rel="noopener">https://identityserver4.readthedocs.io/en/latest/quickstarts/0_overview.html</a><br>首先使用命令安装模板：<br> <code>dotnet new -i IdentityServer4.Templates</code></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/id4Template.png" alt=""></p><h4 id="Step2-创建一个带UI的Id4项目"><a href="#Step2-创建一个带UI的Id4项目" class="headerlink" title="Step2 创建一个带UI的Id4项目"></a>Step2 创建一个带UI的Id4项目</h4><p>这里我们创建一个数据存放在内存中的Id4模板，命名为Chaoqiang.Demo.Id4<br>使用命令创建项目：<br><code>dotnet new is4inmem --name Chaoqiang.Demo.Id4</code><br>使用命令创建解决方案Chaoqiang.Demo并添加项目Chaoqiang.Demo.Id4到该解决方案中：<br><code>dotnet new sln -n Chaoqiang.Demo</code><br><code>dotnet sln add .\Chaoqiang.Demo.Id4\Chaoqiang.Demo.Id4.csproj</code></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/CreateId4Project.png" alt=""></p><h4 id="Step3-启动Id4项目"><a href="#Step3-启动Id4项目" class="headerlink" title="Step3 启动Id4项目"></a>Step3 启动Id4项目</h4><p>启动该项目如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/CreateId4Project2.png" alt=""></p><h4 id="Step4-结合代码理解Id4用法"><a href="#Step4-结合代码理解Id4用法" class="headerlink" title="Step4 结合代码理解Id4用法"></a>Step4 结合代码理解Id4用法</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Id4items.png" alt=""><br>这里只以startup为例描述id4这个中间件是如何被使用的，这其中还有很多放在内存中的资源和客户端，可以自行查看。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/startup.png" alt=""></p><h3 id="OAuth-2-0-Client-Credentials"><a href="#OAuth-2-0-Client-Credentials" class="headerlink" title="OAuth 2.0 Client Credentials"></a>OAuth 2.0 Client Credentials</h3><p> 先从最简单的客户端这种模式开始，不代表用户，也就没有用户信息。</p><h4 id="Id4改造"><a href="#Id4改造" class="headerlink" title="Id4改造"></a>Id4改造</h4><p> 首先我们对Id4项目进行一些改造，添加我们自己创建的Client到内存中；<br> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Client_Credentials_Startup.png" alt=""><br> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Client_Credentials_Config.png" alt=""></p><h4 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h4><p>首先，我们创建一个<code>01ConsoleClient</code>的控制台客户端应用，在控制台中使用客户端模式（client_credentials）这种方式来访问Id4。<br>在这个控制台中，我们会去做这几件事，第一，查看Id4的document信息；第二，根据对应信息，获取access token；第三，访问带验证的API资源（需要先创建API）；</p><h4 id="解析Id4的document"><a href="#解析Id4的document" class="headerlink" title="解析Id4的document"></a>解析Id4的document</h4><p>控制台需要使用Nuget package <strong>IdentityModel</strong>，这个Model的作用就是可以方便的解析Id4的document.<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Client_Credentials_Console.png" alt=""><br>这里我们可以看一下Id4的文件解析格式，访问如下地址：<br><code>http://localhost:5000/.well-known/openid-configuration</code><br>这个openid-configuration的文件中包含了很多我们需要的信息：</p><ul><li>authorization_endpoint: “<a href="http://localhost:5000/connect/authorize" target="_blank" rel="noopener">http://localhost:5000/connect/authorize</a>“,</li><li>token_endpoint: 获取token的地址 “<a href="http://localhost:5000/connect/token" target="_blank" rel="noopener">http://localhost:5000/connect/token</a>“,</li><li>userinfo_endpoint: 获取用户信息的地址”<a href="http://localhost:5000/connect/userinfo" target="_blank" rel="noopener">http://localhost:5000/connect/userinfo</a>“,</li><li>scopes_supported : “UserApi”, “offline_access”</li><li>claims_supported</li><li>grant_types_supported：”authorization_code”, “client_credentials”, “refresh_token”, “implicit”</li><li>response_types_supported:  “code”, “token”, “id_token”, “id_token token”, “code id_token”, “code token”,  “code id_token token”</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Id4OpenIdConfiguration.png" alt=""></p><p>同步地可以快速监视一下拿到的doc这个变量：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Id4doc.png" alt=""></p><h4 id="控制台获取access-token"><a href="#控制台获取access-token" class="headerlink" title="控制台获取access_token"></a>控制台获取access_token</h4><p>在拿到id4的文档之后，要访问tokenpoint来获取access token，先关的代码片段如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> tokenResponse <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">RequestClientCredentialsTokenAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientCredentialsTokenRequest</span><span class="token punctuation">{</span>  Address <span class="token operator">=</span> disco<span class="token punctuation">.</span>TokenEndpoint<span class="token punctuation">,</span>  ClientId <span class="token operator">=</span> <span class="token string">"Chaoqiang.Demo.ClientCredential"</span><span class="token punctuation">,</span>  ClientSecret <span class="token operator">=</span> <span class="token string">"chaoqiang123456"</span><span class="token punctuation">,</span>  Scope <span class="token operator">=</span> <span class="token string">"UserApi"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tokenResponse<span class="token punctuation">.</span>IsError<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>tokenResponse<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意的是：控制台配置的ClientId和ClientSecret以及Scope都需要和Id4那边保持一致，这个tokenEndpoint的地址是：<code>http://localhost:5000/connect/token</code>;<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/ClientSecret.png" alt=""></p><p>这里还可以通过Postman来模拟一下获取token的过程，需要传递相关参数：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/client%20credentials_postman.jpg" alt=""></p><p>进一步地，假设这里我们想在控制台通过Auth的客户端模式访问用户信息，同时在Id4和控制台的scope都加上openid,如下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/client_scope_error.png" alt=""><br>这时发现 invaild scope报错， 此时这种Credentials的授权方式不代表任何用户，想一下，你拿着一个ClientId 想要访问Openid这是不合理的。</p><h4 id="访问API资源"><a href="#访问API资源" class="headerlink" title="访问API资源"></a>访问API资源</h4><p>这里我们新建一个Net Core API资源，然后还需要在APIResource的Startup中加入Authentication的部分，进行一些改造，这里可以有两种做法：</p><ol><li>第一种是安装这个Nuget package <code>Microsoft.AspNetCore.Authentication.JwtBearer</code>,  注意一下与Net Core的版本兼容。</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>  services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token string">"Bearer"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span><span class="token string">"Bearer"</span><span class="token punctuation">,</span> options <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>Authority <span class="token operator">=</span> <span class="token string">"http://localhost:5000"</span><span class="token punctuation">;</span>      options<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>      options<span class="token punctuation">.</span>Audience <span class="token operator">=</span> <span class="token string">"UserApi"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种是使用Id4的中间件验证包：<code>IdentityServer4.AccessTokenValidation</code>然后Authentication的配置就变成下面这样：</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token string">"Bearer"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddIdentityServerAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    options<span class="token punctuation">.</span>Authority <span class="token operator">=</span> <span class="token string">"http://localhost:5000"</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>ApiName <span class="token operator">=</span> <span class="token string">"UserApi"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，再增加一个Identity的controller,带上Authorize的标签，用于返回用户信息，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"identity"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ApiController<span class="token punctuation">]</span><span class="token punctuation">[</span>Authorize<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdentityController</span> <span class="token punctuation">:</span> ControllerBase<span class="token punctuation">{</span>  <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>  <span class="token keyword">public</span> IActionResult <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>      <span class="token keyword">from</span> c <span class="token keyword">in</span> User<span class="token punctuation">.</span>Claims <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>Type<span class="token punctuation">,</span>c<span class="token punctuation">.</span>Value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>万事具备，现在可以在控制台中去call这个带有认证的API资源了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/client%20credentials_API_response200.jpg" alt=""><br>当然这个过程，也可以用Postman来模拟一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/client%20credentials_postman2.jpg" alt=""></p><p>这里我们再梳理一下整个访问的流程和涉及的站点：</p><ul><li>控制台，使用客户端模式</li><li>Id4，鉴权授权中心（5000端口）</li><li>API资源（8888端口）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/client%20credentials_process.jpg" alt=""></p><p>我们可以通过Fiddler来查看一下  整个访问的过程：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/fiddler_Client_Credentials.png" alt=""><br>还可以将得到的access token去JWT官网解析一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Client_Credentials_jwt.jpgd" alt=""></p><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>进一步地，我们可以在API的上面增加一些授权策略，例如要求用户的邮箱是qq邮箱还是163邮箱；</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"eMailPolicy"</span><span class="token punctuation">,</span>  policyBuilder <span class="token operator">=</span><span class="token operator">></span> policyBuilder  <span class="token punctuation">.</span><span class="token function">RequireAssertion</span><span class="token punctuation">(</span>context <span class="token operator">=</span><span class="token operator">></span>  context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">"client_eMail"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"client_eMail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Client</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的话，与我们传入的Claim中的邮箱要求就不符合了；还要注意的是此处Type是client_eMail，要与Id4中的Claim保持一致；<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/client%20credentials_403.jpg" alt=""></p><p><strong>小结一下</strong>： Client Credentials保护无人客户端并访问被保护资源</p><ul><li>OAuth 2.0 Client Credentials</li><li>客户端应用不代表用户，客户端应用本身就相当于是资源所有者</li><li>通常用于机器对机器的通信</li><li>客户端也需要身份认证的</li></ul><h3 id="OAuth-2-0-Password-Grant"><a href="#OAuth-2-0-Password-Grant" class="headerlink" title="OAuth 2.0 Password Grant"></a>OAuth 2.0 Password Grant</h3><p>这里我们通过Postman快速看一下密码模式的特点：<br>首先，我们在Id4里的Authebntication中进行一些改造，将授权方式改为密码模式；</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddIdentityServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddDeveloperSigningCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认的开发者证书               .AddInMemoryApiResources(PasswordInitConfig.GetApiResources())//API访问授权资源</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryClients</span><span class="token punctuation">(</span>PasswordInitConfig<span class="token punctuation">.</span><span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//客户端</span>  <span class="token punctuation">.</span><span class="token function">AddTestUsers</span><span class="token punctuation">(</span>PasswordInitConfig<span class="token punctuation">.</span><span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们重点卡看一下相比于客户端模式，密码模式初始化数据上的不一样：</p><ul><li>新增了一个<code>GetUsers</code>, 增加了用户数据这部分；</li><li>在客户端的信息里面，没有cliams，因为就算有也没法传过去，用户数据统一放在user claim里面了；</li><li>在APISource中，新增了Role和email等claim，这是因为在授权策略里面会读取email来判断邮箱类型；</li><li>值得注意的是，此时在用户信息里的claim和之前client里的claim的名字已经不一样了，例如client中是client_eMail，但是User中是eMail;</li><li>另外，虽然不能在Id4的Client加入claims，但是可以在Client的scope可以加入一些Identity信息（用户信息），这样也能获取到，后看将通过实例看一下。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/passwordInitConfig.png" alt=""></li></ul><h4 id="创建WPF客户端"><a href="#创建WPF客户端" class="headerlink" title="创建WPF客户端"></a>创建WPF客户端</h4><p>这里将通过一个WPF客户端使用密码模式来访问Id4和API资源的例子详细剖析各个过程。<br>创建WPF客户端，引用Nuget package: <code>IdentityModel</code><br>大概的布局如下，分为三步，首先获取Access Token，然后根据Access Token请求API资源，最后还可以验证一下请求id4中的Identity资源。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/WPF_Layout.jpg" alt=""></p><h4 id="获取Access-Token"><a href="#获取Access-Token" class="headerlink" title="获取Access Token"></a>获取Access Token</h4><p>WPF客户端带着用户密码向Id4请求Access Token:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/WPF_AccessToken.jpg" alt=""></p><p>通过access token解析出来的内容，我们可以对比一下：</p><ul><li>Id4中的APIResource的Scope范围不一样，会导致最终获取到的token中的claim也不一样；</li><li>当WPF使用的Scope是<code>TestApi</code>的时候，发现能获取到用户的eMail和role这两个信息，因为<code>TestApi</code>的APIResource中包含了这些Claim信息；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/WPF_APIResource_Scope.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/WPF_APIResource_Scope2.jpg" alt=""></p><h4 id="访问API资源-1"><a href="#访问API资源-1" class="headerlink" title="访问API资源"></a>访问API资源</h4><p>这里我们也对比一下，访问API资源的Identity，不同的API资源Scope，最终在被访问的API中拿到的Claim也是不一样的。例如这里的eMail,role, title等信息都是需要在API资源的Scope中增加的。<br>基于此，我们也可以对API进行一些授权策略的定制化，这里就不展开了，与上述客户端模式时的授权策略类似；<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/WPF_APIResource_Claims.jpg" alt=""></p><h4 id="获取Identity资源"><a href="#获取Identity资源" class="headerlink" title="获取Identity资源"></a>获取Identity资源</h4><p>除了获取API Source中的资源，还可以获取Identity的资源，也就是用户的信息，这个同样可以通过更改客户端的scope来进行获取；</p><p>我们需要先添加Idnetity资源，然后才能扩大WPF客户端请求的scope，否则在请求access token时就会报<code>invalid_token</code>这样的错误：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/WPF_InvalidScope_Identity.jpg" alt=""></p><p>增加IdentityResource，在Id4的Startup和InitConfig中进行一些改造：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/IdnetityResourceInit.jpg" alt=""></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 密码模式</span>services<span class="token punctuation">.</span><span class="token function">AddIdentityServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddDeveloperSigningCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认的开发者证书</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryIdentityResources</span><span class="token punctuation">(</span>PasswordInitConfig<span class="token punctuation">.</span><span class="token function">GetIdentityResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//添加Identity资源</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryApiResources</span><span class="token punctuation">(</span>PasswordInitConfig<span class="token punctuation">.</span><span class="token function">GetApiResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//API访问授权资源</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryClients</span><span class="token punctuation">(</span>PasswordInitConfig<span class="token punctuation">.</span><span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//客户端</span>  <span class="token punctuation">.</span><span class="token function">AddTestUsers</span><span class="token punctuation">(</span>PasswordInitConfig<span class="token punctuation">.</span><span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加用户</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的在WPF客户端中，可以扩大scope来请求access token了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/WPF_Identity_AccessToken.jpg" alt=""></p><p>然后拿着请求到的token去访问Identity资源，即用户信息：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token keyword">void</span> <span class="token function">RequestIdentityResource_ButtonClick</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> RoutedEventArgs e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// call Identity Resource from Identity Server</span>  <span class="token keyword">var</span> apiClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  apiClient<span class="token punctuation">.</span><span class="token function">SetBearerToken</span><span class="token punctuation">(</span>_accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> apiClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>_disco<span class="token punctuation">.</span>UserInfoEndpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>IsSuccessStatusCode<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IdentityResponseTextBlock<span class="token punctuation">.</span>Text <span class="token operator">=</span> content<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证一下拿到的用户信息：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/wpf_identity_scopes.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/wpf_identity_content.jpg" alt=""></p><p><strong>小结</strong>：OAuth 2.0 Password Grant，用户需要把密码提供给第三方，资源所有者的密码凭证（例如用户名和密码）直接被用来请求Access Token，通常用于遗留的应用，资源所有者和客户端应用之间必须高度信任，其它授权方式不可用的时候才使用，尽量不用。</p><h3 id="Implicit-Flow-隐藏式"><a href="#Implicit-Flow-隐藏式" class="headerlink" title="Implicit Flow 隐藏式"></a>Implicit Flow 隐藏式</h3><ul><li>浏览器模式—允许授权给浏览器</li><li>用户访问A—没有token—A提供地址跳转B登录</li><li>–输入账号密码—授权—调回A的地址(url带token)–访问A时带上token</li><li><strong>保护了密码—暴露了token</strong></li></ul><p>下面开始配置，Id4中的Authentication进行改造：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 隐藏模式</span>services<span class="token punctuation">.</span><span class="token function">AddIdentityServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddDeveloperSigningCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认的开发者证书</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryApiResources</span><span class="token punctuation">(</span>ImplicitInitConfig<span class="token punctuation">.</span><span class="token function">GetApiResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//API访问授权资源</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryClients</span><span class="token punctuation">(</span>ImplicitInitConfig<span class="token punctuation">.</span><span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//客户端</span>  <span class="token punctuation">.</span><span class="token function">AddTestUsers</span><span class="token punctuation">(</span>ImplicitInitConfig<span class="token punctuation">.</span><span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加用户</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Id4中客户端更改客户端授权方式：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IEnumerable<span class="token operator">&lt;</span>Client<span class="token operator">></span> <span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Client</span>    <span class="token punctuation">{</span>      ClientId <span class="token operator">=</span> <span class="token string">"Chaoqiang.Demo.ImplicitGrant"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//客户端惟一标识</span>      ClientName<span class="token operator">=</span><span class="token string">"ApiClient for Implicit"</span><span class="token punctuation">,</span>      ClientSecrets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Secret</span><span class="token punctuation">(</span><span class="token string">"chaoqiang123456"</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>Implicit<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//隐藏模式</span>      RedirectUris<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"http://localhost:8888/Identity"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//可以多个，根据请求来的转发</span>      AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"UserApi"</span><span class="token punctuation">,</span><span class="token string">"TestApi"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//允许访问的资源</span>      AllowAccessTokensViaBrowser<span class="token operator">=</span><span class="token keyword">true</span><span class="token comment" spellcheck="true">//允许将token通过浏览器传递</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候请求token的地址是下面这种格式的:<br>隐藏模式：用户—应用A—腾讯授权中心<br><a href="http://localhost:5000/connect/authorize?client_id=Chaoqiang.Demo.ImplicitGrant&amp;redirect_uri=http://localhost:8888/Identity/identityToken&amp;response_type=token&amp;scope=UserApi" target="_blank" rel="noopener">http://localhost:5000/connect/authorize?client_id=Chaoqiang.Demo.ImplicitGrant&amp;redirect_uri=http://localhost:8888/Identity/identityToken&amp;response_type=token&amp;scope=UserApi</a><br>用户访问应用A—需要token—跳转到授权中心—应用A提供地址—然后用户向腾讯授权中心输入账号密码<br><a href="http://localhost:8888/Identity/identityToken#access_token=eyJhbGciOiJSUzI1NiIsImtpZCI6InQtaG5LSXRlN1ZLUktrZXZNNzhPUlEiLCJ0eXAiOiJhdCtqd3QifQ.eyJuYmYiOjE1OTIxMDY3NDUsImV4cCI6MTU5MjExMDM0NSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjoiVXNlckFwaSIsImNsaWVudF9pZCI6IkNoYW9xaWFuZy5EZW1vLkltcGxpY2l0R3JhbnQiLCJzdWIiOiIwIiwiYXV0aF90aW1lIjoxNTkyMTAzNTAwLCJpZHAiOiJsb2NhbCIsInJvbGUiOiJBZG1pbiIsImVNYWlsIjoiOTI1NjEwMDY5QHFxLmNvbSIsInNjb3BlIjpbIlVzZXJBcGkiXSwiYW1yIjpbInB3ZCJdfQ.W6zve3WoQc0Zu6Hz4Cs2FeH8I-oq0_pjSLBkifigbt5AKhUDXkGge0juqBbbRDvfeq99ZzHENEnro98lNULt1TvIPzZauzPokTv8bSnPl6GsAi9ctIy17eWTofdAsmGiUhoLxmnmA6umA5ejCxtqFSg_kAZDK6Yvf_KneAyH6mc_ZPd_97KWHTLE4u63mD2jL27xSroN7s6Gp8HPZcmkyF4GZbrcgUSCZiryIBl7oHKzpPebNDygV5m-BpJmnAQpaj8GfLJqj5eQKmtVbtrPO2bf8y-XFUSYss5vIkxYNcMDuUE1wOvjMDBahN3YzXtEcoIOjGRXH6t2JoNSUnLXsg&amp;token_type=Bearer&amp;expires_in=3600&amp;scope=UserApi" target="_blank" rel="noopener">http://localhost:8888/Identity/identityToken#access_token=eyJhbGciOiJSUzI1NiIsImtpZCI6InQtaG5LSXRlN1ZLUktrZXZNNzhPUlEiLCJ0eXAiOiJhdCtqd3QifQ.eyJuYmYiOjE1OTIxMDY3NDUsImV4cCI6MTU5MjExMDM0NSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjoiVXNlckFwaSIsImNsaWVudF9pZCI6IkNoYW9xaWFuZy5EZW1vLkltcGxpY2l0R3JhbnQiLCJzdWIiOiIwIiwiYXV0aF90aW1lIjoxNTkyMTAzNTAwLCJpZHAiOiJsb2NhbCIsInJvbGUiOiJBZG1pbiIsImVNYWlsIjoiOTI1NjEwMDY5QHFxLmNvbSIsInNjb3BlIjpbIlVzZXJBcGkiXSwiYW1yIjpbInB3ZCJdfQ.W6zve3WoQc0Zu6Hz4Cs2FeH8I-oq0_pjSLBkifigbt5AKhUDXkGge0juqBbbRDvfeq99ZzHENEnro98lNULt1TvIPzZauzPokTv8bSnPl6GsAi9ctIy17eWTofdAsmGiUhoLxmnmA6umA5ejCxtqFSg_kAZDK6Yvf_KneAyH6mc_ZPd_97KWHTLE4u63mD2jL27xSroN7s6Gp8HPZcmkyF4GZbrcgUSCZiryIBl7oHKzpPebNDygV5m-BpJmnAQpaj8GfLJqj5eQKmtVbtrPO2bf8y-XFUSYss5vIkxYNcMDuUE1wOvjMDBahN3YzXtEcoIOjGRXH6t2JoNSUnLXsg&amp;token_type=Bearer&amp;expires_in=3600&amp;scope=UserApi</a><br>到这里可以获取到token</p><p>紧接着，拿到token之后，我们就可以去访问identity这个带头认证的方法了，这里我们用Postman来模拟一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/implicit_token.jpg" alt=""></p><p>Implicit Flow的特点：</p><ul><li>用于“公共”客户端  例如angular单页应用程序</li><li>最好是客户端应用可以直接从浏览器访问资源</li><li>没有显式的客户端身份认证</li><li>token直接就暴露在浏览器地址上</li></ul><p>这里我们可以通过一个使用Implicit Flow保护Angular (SPA)客户端的实例来演示这个详细的过程，主要涉及访问被保护的资源，刷新Access Token。<br><strong>这里先挖个坑，后面结合openid再填！</strong></p><h3 id="Authorization-Code-Flow授权码模式"><a href="#Authorization-Code-Flow授权码模式" class="headerlink" title="Authorization Code Flow授权码模式"></a>Authorization Code Flow授权码模式</h3><p>先授权码，再Token，保护密码-保护token；<br>拿到授权码之后就在后端去访问token了；<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/AuthCode.png" alt=""></p><p>同样的，我们对Id4进行一些改造：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 授权码模式</span>  services<span class="token punctuation">.</span><span class="token function">AddIdentityServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddDeveloperSigningCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认的开发者证书 </span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryApiResources</span><span class="token punctuation">(</span>CodeInitConfig<span class="token punctuation">.</span><span class="token function">GetApiResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//API访问授权资源</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryClients</span><span class="token punctuation">(</span>CodeInitConfig<span class="token punctuation">.</span><span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//客户端</span>  <span class="token punctuation">.</span><span class="token function">AddTestUsers</span><span class="token punctuation">(</span>CodeInitConfig<span class="token punctuation">.</span><span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加用户</span> <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第一步，先获取授权码Code</strong><br>授权码模式：用户—应用A—腾讯授权中心<br><a href="http://localhost:5000/connect/authorize?client_id=Chaoqiang.Demo.AuthorizationCode&amp;redirect_uri=http://localhost:8888/Identity/IdentityCode&amp;response_type=code&amp;scope=UserApi" target="_blank" rel="noopener">http://localhost:5000/connect/authorize?client_id=Chaoqiang.Demo.AuthorizationCode&amp;redirect_uri=http://localhost:8888/Identity/IdentityCode&amp;response_type=code&amp;scope=UserApi</a><br>用户访问应用A—需要token—跳转到授权中心—应用A提供地址—然后用户向腾讯授权中心输入账号密码<br>–返回Code–拿着Code+clientpassword通过后端去获取token<br><a href="http://localhost:8888/Identity/IdentityCode?code=TS4O787i5FHLklTqVoINwB6FZCqXym9X4KmMLOURSM8&amp;scope=UserApi" target="_blank" rel="noopener">http://localhost:8888/Identity/IdentityCode?code=TS4O787i5FHLklTqVoINwB6FZCqXym9X4KmMLOURSM8&amp;scope=UserApi</a><br>至此，我们就拿到了Code。</p><p><strong>第二步，过后端去获取token</strong><br>这个过程我们通过Postman来模拟一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/authorization-code_token.jpg" alt=""></p><p><strong>第三步，拿着token去访问带有验证的API方法</strong><br>拿到access token之后我们就可以”为所欲为“了，这时候就可以去访问API带有验证的法法了，这里的过程就不再赘述了，与上面相似。</p><h2 id="OIDC-OpenId-Connect"><a href="#OIDC-OpenId-Connect" class="headerlink" title="OIDC OpenId Connect"></a>OIDC OpenId Connect</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/OpenIDConnectFlows.jpg" alt=""><br>OIDC（OpenID Connect）是在OAuth2上构建了一个身份层，是一个基于OAuth2协议的身份认证标准协议。OAuth2授权协议—解决了N多个快递员如何进小区的问题Access_Token—门卫不知道快递员是谁—没有用户信息(可以有，但是不关心)<br>OAuth—–&gt;Access_Token<br>OIDC—–&gt;Id_Token<br>一次请求，可以拿到2个token</p><ul><li>Access_Token &amp;&amp; Id_Token</li><li>OpenID Connect— 2个加起来(Access Token + ID Token)</li><li>Openid浏览器返回—混合式</li></ul><p>客户端-密码式不能玩，OpenID是基于浏览器的，所以oidc是适合隐藏式和授权码模式的。也就是说Id_token的获取就是多一个返回信息，因为只能通过url回调。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Client_Types.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/OAuthVSOpenId.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/OAuthVSOpenId2.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/AllEndpoints.jpg" alt=""></p><h3 id="Hybrid-混合模式"><a href="#Hybrid-混合模式" class="headerlink" title="Hybrid 混合模式"></a>Hybrid 混合模式</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/ThreeFlows.jpg" alt=""><br>先从Id4的Startup配置开始，会发现这里新增加了<code>IdentityResource</code>,这在上面也提到过了，这里再单独拿出来说一下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 混合模式</span>services<span class="token punctuation">.</span><span class="token function">AddIdentityServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddDeveloperSigningCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认的开发者证书 </span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryIdentityResources</span><span class="token punctuation">(</span>HybridInitConfig<span class="token punctuation">.</span><span class="token function">GetIdentityResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//身份信息授权资源</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryApiResources</span><span class="token punctuation">(</span>HybridInitConfig<span class="token punctuation">.</span><span class="token function">GetApiResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//API访问授权资源</span>  <span class="token punctuation">.</span><span class="token function">AddInMemoryClients</span><span class="token punctuation">(</span>HybridInitConfig<span class="token punctuation">.</span><span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//客户端</span>  <span class="token punctuation">.</span><span class="token function">AddTestUsers</span><span class="token punctuation">(</span>HybridInitConfig<span class="token punctuation">.</span><span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加用户</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们重点关注一下GetIdentityResources和GetClients这里面的变化：<br>可以放入自定义的用户信息，也有一些定义好的用户信息scope。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 用户信息，能返回哪些用户信息</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> IEnumerable<span class="token operator">&lt;</span>IdentityResource<span class="token operator">></span> <span class="token function">GetIdentityResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IdentityResource</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">IdentityResources<span class="token punctuation">.</span>OpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">IdentityResources<span class="token punctuation">.</span>Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//一堆默认属性</span>    <span class="token keyword">new</span> <span class="token class-name">IdentityResource</span><span class="token punctuation">(</span>      <span class="token string">"CustomIdentityResource"</span><span class="token punctuation">,</span>      <span class="token string">"This is Custom Model"</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"phonemodel"</span><span class="token punctuation">,</span><span class="token string">"phoneprise"</span><span class="token punctuation">,</span> <span class="token string">"eMail"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//自定义Id资源，植入claim</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然这些资源都需要在用户的Claim里面加进去，后面才能读取到：<br>可以看到用户的Claim里面加了很多信息，例如Role，NickName，Name，prog，phonemodel等。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>TestUser<span class="token operator">></span> <span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>TestUser<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">TestUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Username<span class="token operator">=</span><span class="token string">"chaoqiang"</span><span class="token punctuation">,</span>      Password<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">,</span>      SubjectId<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span>      Claims<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Claim<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>IdentityModel<span class="token punctuation">.</span>JwtClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span><span class="token string">"Admin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>IdentityModel<span class="token punctuation">.</span>JwtClaimTypes<span class="token punctuation">.</span>NickName<span class="token punctuation">,</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">"apiUser"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"eMail"</span><span class="token punctuation">,</span><span class="token string">"925610069@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"prog"</span><span class="token punctuation">,</span><span class="token string">"正式项目"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"phonemodel"</span><span class="token punctuation">,</span><span class="token string">"huawei"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"phoneprise"</span><span class="token punctuation">,</span><span class="token string">"5000元"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个是Client上的一些变化：需要把这些scope给暴露出去，客户端读取Id-Token时才能获取到。openid是必须加入的scope。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IEnumerable<span class="token operator">&lt;</span>Client<span class="token operator">></span> <span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Client</span>    <span class="token punctuation">{</span>      AlwaysIncludeUserClaimsInIdToken<span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">,</span>      AllowOfflineAccess <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      ClientId <span class="token operator">=</span> <span class="token string">"Chaoqiang.Demo.Hybrid"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//客户端惟一标识</span>      ClientName<span class="token operator">=</span><span class="token string">"ApiClient for HyBrid"</span><span class="token punctuation">,</span>      ClientSecrets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Secret</span><span class="token punctuation">(</span><span class="token string">"chaoqiang123456"</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      AccessTokenLifetime<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//默认1小时</span>      AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>Hybrid<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//混合模式</span>      RedirectUris<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"http://localhost:5726/Ids4/IndexCodeToken"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//可以多个</span>      AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token string">"UserApi"</span><span class="token punctuation">,</span>        <span class="token string">"TestApi"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//资源范围</span>        IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Ids4：获取Id_token，必需加入"openid"</span>        IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//用户信息范围</span>        <span class="token string">"CustomIdentityResource"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      AllowAccessTokensViaBrowser<span class="token operator">=</span><span class="token keyword">true</span><span class="token comment" spellcheck="true">//允许将token通过浏览器传递</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 时候请求的参数和之前有点不太一样了：</p><ul><li>response_type  返回token还是id_token还是都返回，scope范围也变大了；</li></ul><p><a href="http://localhost:5000/connect/authorize?client_id=Chaoqiang.Demo.Hybrid&amp;redirect_uri=http://localhost:8888/Identity/IdentityCodeToken&amp;response_type=code%20token%20id_token&amp;scope=UserApi%20openid%20CustomIdentityResource&amp;response_model=fragment&amp;nonce=12345" target="_blank" rel="noopener">http://localhost:5000/connect/authorize?client_id=Chaoqiang.Demo.Hybrid&amp;redirect_uri=http://localhost:8888/Identity/IdentityCodeToken&amp;response_type=code%20token%20id_token&amp;scope=UserApi%20openid%20CustomIdentityResource&amp;response_model=fragment&amp;nonce=12345</a></p><p>拿着这个地址直接去请求就可以获取相应的response_type,会让你输入用户密码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Hybrid_Allow_Page.jpg" alt=""></p><p>返回的这个结果里面有几个token，可以拿来解析一下：</p><p><a href="http://localhost:8888/Identity/IdentityCodeToken#**code**=Hvp8az0al1s4fRi--XoLEC8rPrcHubHaeJ9OET3z_l4&amp;**id_token**=eyJhbGciOiJSUzI1NiIsImtpZCI6InQtaG5LSXRlN1ZLUktrZXZNNzhPUlEiLCJ0eXAiOiJKV1QifQ.eyJuYmYiOjE1OTIxMTY3NTEsImV4cCI6MTU5MjExNzA1MSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjoiQ2hhb3FpYW5nLkRlbW8uSHlicmlkIiwibm9uY2UiOiIxMjM0NSIsImlhdCI6MTU5MjExNjc1MSwiYXRfaGFzaCI6IkhheEpHZjNWRi1oUW9CQkRIT2xqLVEiLCJjX2hhc2giOiJYQ2RzX0JJZ1V2TTBXUk01ZkgtaGR3Iiwic2lkIjoidXYzVERUa3oyLUdsSWhlR0cyaG9pdyIsInN1YiI6IjAiLCJhdXRoX3RpbWUiOjE1OTIxMTE1MDUsImlkcCI6ImxvY2FsIiwiZU1haWwiOiI5MjU2MTAwNjlAcXEuY29tIiwicGhvbmVtb2RlbCI6Imh1YXdlaSIsInBob25lcHJpc2UiOiI1MDAw5YWDIiwiYW1yIjpbInB3ZCJdfQ.AB0dxV3GHweMP-A4TVzqK7x_2zeEcxmjcC8NBYXf9hcPGMMq5ea2i0sgU1JiGrWIs_w_jPfFb5UUPFasfa0RhKdgF9LrkJI7zL3whYdUWCVOlsVvno2zLw7B_rrn-lUOVrdHbMXi9SaXiawct9VaLN7cx-KuvbWm18VjNwO90-bcJYdJ1L3umM_802CtjatmS61Jm6RHSgxFAqgmbRLSO4fEMu52roaFw2uXr_vr2YX5Hte1HW3g2pDNJ0K_Yc54tI3LzakxMMq88bblnuXJcVZOU0MUtxTo8Airs_2nyLdVAtxDZ8Sp0FIGDnzVL8P0KwdXcESCuh3y2_LHbI1yxQ&amp;" target="_blank" rel="noopener">http://localhost:8888/Identity/IdentityCodeToken#**code**=Hvp8az0al1s4fRi--XoLEC8rPrcHubHaeJ9OET3z_l4&amp;**id_token**=eyJhbGciOiJSUzI1NiIsImtpZCI6InQtaG5LSXRlN1ZLUktrZXZNNzhPUlEiLCJ0eXAiOiJKV1QifQ.eyJuYmYiOjE1OTIxMTY3NTEsImV4cCI6MTU5MjExNzA1MSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjoiQ2hhb3FpYW5nLkRlbW8uSHlicmlkIiwibm9uY2UiOiIxMjM0NSIsImlhdCI6MTU5MjExNjc1MSwiYXRfaGFzaCI6IkhheEpHZjNWRi1oUW9CQkRIT2xqLVEiLCJjX2hhc2giOiJYQ2RzX0JJZ1V2TTBXUk01ZkgtaGR3Iiwic2lkIjoidXYzVERUa3oyLUdsSWhlR0cyaG9pdyIsInN1YiI6IjAiLCJhdXRoX3RpbWUiOjE1OTIxMTE1MDUsImlkcCI6ImxvY2FsIiwiZU1haWwiOiI5MjU2MTAwNjlAcXEuY29tIiwicGhvbmVtb2RlbCI6Imh1YXdlaSIsInBob25lcHJpc2UiOiI1MDAw5YWDIiwiYW1yIjpbInB3ZCJdfQ.AB0dxV3GHweMP-A4TVzqK7x_2zeEcxmjcC8NBYXf9hcPGMMq5ea2i0sgU1JiGrWIs_w_jPfFb5UUPFasfa0RhKdgF9LrkJI7zL3whYdUWCVOlsVvno2zLw7B_rrn-lUOVrdHbMXi9SaXiawct9VaLN7cx-KuvbWm18VjNwO90-bcJYdJ1L3umM_802CtjatmS61Jm6RHSgxFAqgmbRLSO4fEMu52roaFw2uXr_vr2YX5Hte1HW3g2pDNJ0K_Yc54tI3LzakxMMq88bblnuXJcVZOU0MUtxTo8Airs_2nyLdVAtxDZ8Sp0FIGDnzVL8P0KwdXcESCuh3y2_LHbI1yxQ&amp;</a> <strong>access_token</strong>=eyJhbGciOiJSUzI1NiIsImtpZCI6InQtaG5LSXRlN1ZLUktrZXZNNzhPUlEiLCJ0eXAiOiJhdCtqd3QifQ.eyJuYmYiOjE1OTIxMTY3NTEsImV4cCI6MTU5MjEyMDM1MSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjoiVXNlckFwaSIsImNsaWVudF9pZCI6IkNoYW9xaWFuZy5EZW1vLkh5YnJpZCIsInN1YiI6IjAiLCJhdXRoX3RpbWUiOjE1OTIxMTE1MDUsImlkcCI6ImxvY2FsIiwicm9sZSI6IkFkbWluIiwiZU1haWwiOiI5MjU2MTAwNjlAcXEuY29tIiwic2NvcGUiOlsib3BlbmlkIiwiQ3VzdG9tSWRlbnRpdHlSZXNvdXJjZSIsIlVzZXJBcGkiXSwiYW1yIjpbInB3ZCJdfQ.MslmyGlDkVRwkG3XE1DGnXerUUsGhVb0f1KyOU3LU7lSv6mM5kj8rDh84upDBxEeIcQ3JGSl9Kd5ZgrWB5lV8OsKEteY3YUciFMAZ1L_gvfLhWKJeiPe669-40_JMSxmwX_6RWdwCURvqQ4bUeaGrYXzhGcnmkAAFO1MjWBEYFyMnIDSc5xuuqlpXRRppLrylWlHHoAY6oQ2ya0q7GyUdmCA5ITAQxOkxQWzgpDidvSHttX2QBbVCcKXAGnc-gKDuecixU-S1aGT6GC1nM1aREFQJcm9nbazenB25uOIl7XeAd81xpzz4BEz0SiRDHBU7WFW6DJrdB-GHtGljYScbg&amp;<strong>token_type</strong>=Bearer&amp;<strong>expires_in</strong>=3600&amp;<strong>scope</strong>=openid%20CustomIdentityResource%20UserApi&amp;<strong>session_state</strong>=_bKodowTCym88ixEUSrVjvykFZFMAFPVtBgiAI9xsw4.oGtn1UvHY5iEAcBoPB56GA</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Hybrid_IdToken.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Hybrid_AccessToken.jpg" alt=""></p><p>与之前的类似，拿着access token可以访问带有验证的API的方法；<br>对于id_token的用法，我们可以用来获取用户信息，主要用于单点登录，我们会把id_token往cookie里面塞，每次请求的时候带上。那么后端就可以解析这个id_token，然后获得用户信息。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//解析id_token</span>  <span class="token keyword">string</span> id_token <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Cookies<span class="token punctuation">[</span><span class="token string">"id_token"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> token_parts <span class="token operator">=</span> id_token<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> header <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Base64Url<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>token_parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> claims <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Base64Url<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>token_parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sign <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Base64Url<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>token_parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>    <span class="token keyword">from</span> c <span class="token keyword">in</span> User<span class="token punctuation">.</span>Claims <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>Type<span class="token punctuation">,</span>c<span class="token punctuation">.</span>Value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们用postman来模拟，在cookie中加上id_token，然后访问时读取id_token中的内容:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/Hybrid_IdToken_usage.jpg" alt=""></p><p>总结一下：混合模式一共有如下三种response的格式：</p><ul><li>response_type=code id_token</li><li>response_type=code token</li><li>response_type=code id_token token</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/codeAndid_token.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/codeAndtoken.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/IdentityServer4/codeAndid_tokenAndtoken.jpg" alt=""></p><p>至此，我们把几种模式都看了一遍，基本上对于OAuth和OpenId的理解也算是入门了，后面有时间来到时候考虑做几个基于OpenId配置的实例，还有将内存这种方式变为数据库存储的方式，争取把坑填上。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> .Net Core Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
            <tag> IdentityServer4 </tag>
            
            <tag> OAuth 2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netcore认证授权与IdentityServer4（2）JWT</title>
      <link href="/2020/05/29/netcore-authentication-authorization2/"/>
      <url>/2020/05/29/netcore-authentication-authorization2/</url>
      
        <content type="html"><![CDATA[<h2 id="主要概要"><a href="#主要概要" class="headerlink" title="主要概要"></a>主要概要</h2><p>这个文章主要来聊一聊Net Core中的认证与授权，以及Net Core生态中非常火热的IdentityServer4这个组件的使用，主要内容如下：</p><ol><li>鉴权授权流程变化</li><li>源码解读鉴权</li><li>源码解读多授权策略</li><li>JWT和Identity</li></ol><h2 id="Cookie-Session"><a href="#Cookie-Session" class="headerlink" title="Cookie/Session"></a>Cookie/Session</h2><p><strong>基本流程</strong>：其实是为了解决无状态下的用户识别问题<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/sessioncookie.png" alt=""></p><h2 id="Token校验"><a href="#Token校验" class="headerlink" title="Token校验"></a>Token校验</h2><p><strong>鉴权授权：</strong> 鉴权中心—根据账号密码颁发token</p><ul><li>带着Token就可以访问API，API认可token，不需要去鉴权中心校验</li><li>第三方API也认可Token</li><li>SSO： Single Sign On</li><li>防止抵赖-防止篡改-信息传递<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/Token.png" alt="Token"></li></ul><p><strong>细想一下，这个过程会不会有什么问题？</strong> 细思极恐！！！</p><ul><li>用户拿到token之后去访问应用，这个token可靠性如何保证，验证token的过程没有返回Authorization Center进行校验？</li><li>说到底，这是离线式的，这里面有个<strong>信任</strong>问题！</li></ul><p><strong>如何解决信任问题？</strong></p><ul><li>Token是不是真的？是不是Authorization Center颁发的？是不是有效的？</li></ul><p><strong>通过加密算法来建立信任：</strong> 通过密钥来加密解密token来实现</p><ul><li><p><strong>对称可逆加密</strong>—— 同一个秘钥用来加密解密—必须有秘钥才能加密，必须有秘钥才能解密—-如果token能解密，就能建立信任关系—再通过其他信息校验是否有效–</p></li><li><p><strong>非对称可逆加密</strong>—— 一组秘钥对(私钥加密+公钥解密)—由私钥加密的内容，提供公钥别人获取来解密—只要能解密，就能证明<strong>来源</strong>—建立了信任关系—再通过其他信息校验是否有效—</p></li><li><p>对称速度快—秘钥不安全—–内部用</p></li><li><p>非对称速度慢—秘钥安全—-第三方</p></li></ul><p><strong>常用的两种方式：</strong></p><ol><li><p>HS256<br>HS256 (带有 SHA-256 的 HMAC 是一种对称算法, 双方之间仅共享一个 密钥。由于使用相同的密钥生成签名和验证签名, 因此必须注意确保密钥不被泄密。</p></li><li><p>RS256<br>RS256 (采用SHA-256 的 RSA 签名) 是一种非对称算法, 它使用公共/私钥对: 标识提供方采用私钥生成签名, JWT 的使用方获取公钥以验证签名。由于公钥 (与私钥相比) 不需要保护, 因此大多数标识提供方使其易于使用方获取和使用 (通常通过一个元数据URL)。</p></li></ol><h2 id="JWT-Json-Web-Token"><a href="#JWT-Json-Web-Token" class="headerlink" title="JWT-Json Web Token"></a>JWT-Json Web Token</h2><p>官网：<a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p><p>1 <strong>授权</strong>：这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，允许用户访问该令牌允许的路由，服务和资源。Single Sign On是一种现在广泛使用JWT的功能，因为它的开销很小，并且能够在不同的域中轻松使用。</p><p>2 <strong>信息交换</strong>：JSON Web令牌是在各方之间安全传输信息的好方法。因为JWT可以签名 - 例如，使用公钥/私钥对 - 您可以确定发件人是他们所说的人。此外，由于使用标头和有效负载计算签名，您还可以验证内容是否未被篡改。</p><h3 id="JWT令牌结构"><a href="#JWT令牌结构" class="headerlink" title="JWT令牌结构"></a>JWT令牌结构</h3><ul><li><p>Header　头<br>{ “alg”: “HS256”, “typ”: “JWT”}</p></li><li><p>Payload　有效载荷—不是加密，只是序列化，JWT 默认是不加密的，任何人都可以读到</p></li><li><p>Signature　签名–防止抵赖-防止篡改<br>=HMACSHA256( base64UrlEncode(header) + “.” + base64UrlEncode(payload), secret)</p></li></ul><p>JWT形式就是这样 xxxxx.yyyyy.zzzzz，其实就是两个目的：</p><ol><li>加密-解密，只要能解密，就能证明来源</li><li>解密后比对内容，看是否篡改</li></ol><p>举对称加密的HS256这个例子，通过下图可以看到，token颁发者将header和payload.data组合进行MDK5加密成一字符串，然后通过密钥加密生成签名；对于接收者，首先将签名用密钥解密，如果能解开，那就解决了信任问题，其次，解开后再验证payload.data中的验证数据是否有效，看看有没有被篡改。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/JWT.JPG" alt=""></p><h2 id="JWT实践"><a href="#JWT实践" class="headerlink" title="JWT实践"></a>JWT实践</h2><h3 id="鉴权中心颁发Token"><a href="#鉴权中心颁发Token" class="headerlink" title="鉴权中心颁发Token"></a>鉴权中心颁发Token</h3><p>颁发Token 的过程就是根据用户输入的用户名密码生成Token,主要的过程依靠下面的<code>JWTHSService</code>这个服务：</p><p>登陆的API：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//应该数据库</span>  <span class="token punctuation">{</span>    CurrentUserModel currentUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentUserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Id <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>      Account <span class="token operator">=</span> <span class="token string">"zhengchaoqiang,com"</span><span class="token punctuation">,</span>      EMail<span class="token operator">=</span><span class="token string">"12345678@qq.com"</span><span class="token punctuation">,</span>      Mobile<span class="token operator">=</span><span class="token string">"1234567890"</span><span class="token punctuation">,</span>      Sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>      Age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">,</span>      Name <span class="token operator">=</span> <span class="token string">"Chaoqiang"</span><span class="token punctuation">,</span>      Role <span class="token operator">=</span> <span class="token string">"Admin"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_iJWTService<span class="token punctuation">.</span><span class="token function">GetToken</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      token    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>  <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token punctuation">{</span>  result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>  token <span class="token operator">=</span> <span class="token string">""</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成Token的服务：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTHSService</span> <span class="token punctuation">:</span> IJWTService<span class="token punctuation">{</span>  <span class="token preprocessor property">#<span class="token directive keyword">region</span> Option注入</span>  <span class="token keyword">private</span> <span class="token keyword">readonly</span> JWTTokenOptions _JWTTokenOptions<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">JWTHSService</span><span class="token punctuation">(</span>IOptionsMonitor<span class="token operator">&lt;</span>JWTTokenOptions<span class="token operator">></span> jwtTokenOptions<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_JWTTokenOptions <span class="token operator">=</span> jwtTokenOptions<span class="token punctuation">.</span>CurrentValue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>  <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">GetToken</span><span class="token punctuation">(</span>CurrentUserModel userModel<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> claims <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"EMail"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>EMail<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Account"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Age<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Mobile"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Mobile<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>userModel<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//new Claim("Role", userModel.Role),//这个不能角色授权</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Sex"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Sex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//各种信息拼装</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_JWTTokenOptions<span class="token punctuation">.</span>SecurityKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> creds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SigningCredentials</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>HmacSha256<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityToken</span><span class="token punctuation">(</span>        issuer<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_JWTTokenOptions<span class="token punctuation">.</span>Issuer<span class="token punctuation">,</span>        audience<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_JWTTokenOptions<span class="token punctuation">.</span>Audience<span class="token punctuation">,</span>        claims<span class="token punctuation">:</span> claims<span class="token punctuation">,</span>        expires<span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//5分钟有效期</span>        notBefore<span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//1分钟后有效</span>        signingCredentials<span class="token punctuation">:</span> creds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> returnToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityTokenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> returnToken<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是：<br>Claims (Payload)  Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:</p><ul><li>iss: The issuer of the token，token 是给谁的，颁发者身份标识，表示 Token 颁发者的唯一标识，一般是一个 http(s) url，如 <a href="https://www.baidu.com。" target="_blank" rel="noopener">https://www.baidu.com。</a></li><li>sub: The subject of the token，token 主题</li><li>exp: Expiration Time。 token 过期时间，Unix 时间戳格式</li><li>iat: Issued At。 token 创建时间， Unix 时间戳格式</li><li>jti: JWT ID。针对当前 token 的唯一标识</li><li>除了规定的字段外，可以包含其他任何 JSON 兼容的字段。</li></ul><h3 id="API中如何鉴权"><a href="#API中如何鉴权" class="headerlink" title="API中如何鉴权"></a>API中如何鉴权</h3><ol><li>首先，管道中使用<code>app.UseAuthentication();</code>，鉴权：解析信息–就是读取token，解密token；</li><li>然后，在serviceConfigure中要指定如何来鉴权：</li></ol><p>指定Scheme,这里的Scheme其实就是<code>Bearer</code>。</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Scheme</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>怎么理解这个Bearer呢？我们可以通过Postman直观地来看一下：<br>在请求的Header中有一个Authorization，然后有一种类型叫Bearer Token，其实就是Bearer+空格+Token这种形式。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/Bearer.png" alt=""><br>其实这也就等价于下面这样的操作，鉴权时直接在Header中对Authorization截取Bearer。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/Bearer2.png" alt=""></p><p>指定完Scheme之后，还需要指定校验的规则和细节：</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Scheme</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenValidationParameters</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//JWT有一些默认的属性，就是给鉴权时就可以筛选了</span>    ValidateIssuer <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证Issuer</span>    ValidateAudience <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证Audience</span>    ValidateLifetime <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证失效时间</span>    ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证SecurityKey</span>    ValidAudience <span class="token operator">=</span> tokenOptions<span class="token punctuation">.</span>Audience<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span>    ValidIssuer <span class="token operator">=</span> tokenOptions<span class="token punctuation">.</span>Issuer<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Issuer，这两项和前面签发jwt的设置一致</span>    IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>tokenOptions<span class="token punctuation">.</span>SecurityKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//拿到SecurityKey</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>接着，需要在被访问的API上加上[Authorize]标签，框架自动完成鉴权操作。</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTController</span> <span class="token punctuation">:</span> Controller<span class="token punctuation">{</span>  <span class="token punctuation">[</span>Authorize<span class="token punctuation">]</span>  <span class="token keyword">public</span> IActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Identities<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{item.Type}:{item.Value}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>请求Token，带上token访问API</li></ol><p>不带Token直接访问API，返回401未授权错误码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/witoutToken.png" alt=""><br>先去鉴权中心获取Token：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/RequestToken.png" alt=""><br>然后将Token手动放到请求Header的Authorization中，带着Token进行请求<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/withToken.png" alt=""></p><p><strong>非对称加密</strong><br>用非对称加密，先看鉴权中心这边的变化：<br>首先生成私钥和公钥,序列化到两个json文件中去：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> RSAParameters <span class="token function">GenerateAndSaveKey</span><span class="token punctuation">(</span><span class="token keyword">string</span> filePath<span class="token punctuation">,</span> <span class="token keyword">bool</span> withPrivate <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  RSAParameters publicKeys<span class="token punctuation">,</span> privateKeys<span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> rsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSACryptoServiceProvider</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//即时生成</span>  <span class="token punctuation">{</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>      privateKeys <span class="token operator">=</span> rsa<span class="token punctuation">.</span><span class="token function">ExportParameters</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      publicKeys <span class="token operator">=</span> rsa<span class="token punctuation">.</span><span class="token function">ExportParameters</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span>    <span class="token punctuation">{</span>      rsa<span class="token punctuation">.</span>PersistKeyInCsp <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">"key.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>privateKeys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">"key.public.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>publicKeys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> withPrivate <span class="token operator">?</span> privateKeys <span class="token punctuation">:</span> publicKeys<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，生成一个秘钥组key.json和key.public.json，生成token就有一点不一样：<br>主要就是加密算法不一样： <code>var credentials = new SigningCredentials(new RsaSecurityKey(keyParams), SecurityAlgorithms.RsaSha256Signature);</code>, 生成token如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">GetToken</span><span class="token punctuation">(</span>CurrentUserModel userModel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//string jtiCustom = Guid.NewGuid().ToString();//用来标识 Token</span>  <span class="token keyword">var</span> claims <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"EMail"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>EMail<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Account"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Age<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Mobile"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Mobile<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>userModel<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//new Claim("Role", userModel.Role),//这个不能角色授权</span>    <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Sex"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span>Sex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//各种信息拼装</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">string</span> keyDir <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>RSAHelper<span class="token punctuation">.</span><span class="token function">TryGetKeyParameters</span><span class="token punctuation">(</span>keyDir<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token keyword">out</span> RSAParameters keyParams<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">false</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    keyParams <span class="token operator">=</span> RSAHelper<span class="token punctuation">.</span><span class="token function">GenerateAndSaveKey</span><span class="token punctuation">(</span>keyDir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SigningCredentials</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RsaSecurityKey</span><span class="token punctuation">(</span>keyParams<span class="token punctuation">)</span><span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>RsaSha256Signature<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityToken</span><span class="token punctuation">(</span>      issuer<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_JWTTokenOptions<span class="token punctuation">.</span>Issuer<span class="token punctuation">,</span>      audience<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_JWTTokenOptions<span class="token punctuation">.</span>Audience<span class="token punctuation">,</span>      claims<span class="token punctuation">:</span> claims<span class="token punctuation">,</span>      expires<span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//5分钟有效期</span>      signingCredentials<span class="token punctuation">:</span> credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityTokenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">string</span> tokenString <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">WriteToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> tokenString<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用非对称加密，在API端的变化，主要IssuerSigningKey 不一样了，它是通过读取公钥<code>key.public.json</code>来解密，然后校验：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 读取公钥</span><span class="token keyword">string</span> path <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"key.public.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> key <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this.Configuration["SecurityKey"];</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"KeyPath:{path}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> keyParams <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method function">DeserializeObject<span class="token punctuation">&lt;</span>RSAParameters<span class="token punctuation">></span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SigningCredentials</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RsaSecurityKey</span><span class="token punctuation">(</span>keyParams<span class="token punctuation">)</span><span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>RsaSha256Signature<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenValidationParameters</span>  <span class="token punctuation">{</span>    ValidateIssuer <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证Issuer</span>    ValidateAudience <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证Audience</span>    ValidateLifetime <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证失效时间</span>    ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证SecurityKey</span>    ValidAudience <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">"JWTTokenOptions：Audience"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Audience</span>    ValidIssuer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">"JWTTokenOptions：Issuer"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Issuer，这两项和前面签发jwt的设置一致</span>    IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RsaSecurityKey</span><span class="token punctuation">(</span>keyParams<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><strong>对JWT对鉴权中心而言，主要的步骤：</strong></p><ul><li>Core WebApi当做鉴权服务器</li><li>配置基础信息(对称+不对称)</li><li>接受请求，完成验证，创建token</li></ul><p><strong>对JWT的客户端而言，主要的步骤：</strong></p><ul><li>客户端 Configure+ConfigureService</li><li>配置基础信息(对称+不对称)</li><li>配置请求接受鉴权授权</li></ul><p><strong>对称加密校验流程：</strong></p><ul><li>直接访问无权限要求地址—200</li><li>访问有权限要求地址—401</li><li>登录后获取token</li><li>拿着token登录需要权限认证地址—200</li><li>Authorization: bearer token</li></ul><p><strong>非对称可逆加密校验流程：</strong></p><ul><li>接访问无权限要求地址—200</li><li>访问有权限要求地址—401</li><li>登录后获取token</li><li>配置最新的public key</li><li>拿着token登录需要权限认证地址—200</li><li>Authorization: bearer token</li></ul><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="基于角色的授权策略"><a href="#基于角色的授权策略" class="headerlink" title="基于角色的授权策略"></a>基于角色的授权策略</h3><ol><li>在鉴权授权中心，生成token时，加上角色的Claims就可以了：<br><code>new Claim(ClaimTypes.Role,userModel.Role),</code></li><li>然后在客户端API上，加上基于Role的Authorize即可：<br><code>[Authorize(Roles = "Admin")]</code></li></ol><h3 id="基于Policy（策略）的授权策略"><a href="#基于Policy（策略）的授权策略" class="headerlink" title="基于Policy（策略）的授权策略"></a>基于Policy（策略）的授权策略</h3><p>基于现有的规则进行叠加，在API的startup service中中增加Authorization的检验：</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"AdminPolicy"</span><span class="token punctuation">,</span>    policyBuilder <span class="token operator">=</span><span class="token operator">></span> policyBuilder    <span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Claim的Role是Admin</span>    <span class="token punctuation">.</span><span class="token function">RequireUserName</span><span class="token punctuation">(</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Claim的Name是Eleven</span>    <span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"EMail"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//必须有某个Cliam</span>    <span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"Account"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内置</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在API上增加授权的验证：<br><code>[Authorize(Policy = "AdminPolicy")]</code></p><p>下面进行一些升级，自定义策略：</p><pre class="line-numbers language-csharp"><code class="language-csharp"> services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"AdminPolicy"</span><span class="token punctuation">,</span>  policyBuilder <span class="token operator">=</span><span class="token operator">></span> policyBuilder    <span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Claim的Role是Admin</span>    <span class="token punctuation">.</span><span class="token function">RequireUserName</span><span class="token punctuation">(</span><span class="token string">"Eleven"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Claim的Name是Eleven</span>    <span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"EMail"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//必须有某个Cliam</span>    <span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"Account"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//.Combine(qqEmailPolicy)</span>    <span class="token punctuation">.</span><span class="token function">AddRequirements</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomExtendRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内置</span>  options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"QQEmail"</span><span class="token punctuation">,</span> policyBuilder <span class="token operator">=</span><span class="token operator">></span> policyBuilder<span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QQEmailRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"DoubleEmail"</span><span class="token punctuation">,</span> policyBuilder <span class="token operator">=</span><span class="token operator">></span> policyBuilder  <span class="token punctuation">.</span><span class="token function">AddRequirements</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomExtendRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DoubleEmailRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> ZhaoxiMailHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> QQMailHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> CustomExtendRequirementHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些定制化的Requirement继承自IAuthorizationRequirement，需要有对应的AuthorizationHandler来实现，代码如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExtendRequirement</span> <span class="token punctuation">:</span> IAuthorizationRequirement<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExtendRequirementHandler</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>CustomExtendRequirement<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext       context<span class="token punctuation">,</span> CustomExtendRequirement requirement<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//context.User.Identities.First().Claims</span>    <span class="token comment" spellcheck="true">//var jti = context.User.FindFirst("jti")?.Value;// 检查 Jti 是否存在</span>    <span class="token keyword">bool</span> tokenExists <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenExists<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      context<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显式的声明验证成功</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 两种邮箱都能支持 </span><span class="token comment" spellcheck="true">/// </span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleEmailRequirement</span> <span class="token punctuation">:</span> IAuthorizationRequirement<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QQMailHandler</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>DoubleEmailRequirement<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> DoubleEmailRequirement requirement<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">"EMail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">var</span> email <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">"EMail"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"@qq.com"</span><span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//context.Fail();//不设置失败</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhaoxiMailHandler</span> <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>DoubleEmailRequirement<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>AuthorizationHandlerContext context<span class="token punctuation">,</span> DoubleEmailRequirement requirement<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">"EMail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">var</span> email <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">"EMail"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"@ZhaoxiEdu.Net"</span><span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//context.Fail();</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结：</strong><br>自定义策略完成授权：</p><ul><li>Requirement + Handler</li><li>+注册实例+组装Policy</li><li>+标识</li></ul><h2 id="JWT局限性"><a href="#JWT局限性" class="headerlink" title="JWT局限性"></a>JWT局限性</h2><p>基于Token式的传递，鉴权授权，有着天生的缺陷，还欠缺什么？</p><ul><li><p>Token泄漏了—重放攻击</p></li><li><p>改密码了，希望之前的token失效</p></li><li><p>滑动过期—token在用，就别过期</p></li></ul><p>问题很多很多，但是大部分解决不了，是由本质决定的：API和鉴权中心之间是不进行通讯的！<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/Token.png" alt="Token"></p><h3 id="问题1：改密码token过期问题"><a href="#问题1：改密码token过期问题" class="headerlink" title="问题1：改密码token过期问题"></a>问题1：改密码token过期问题</h3><p>改密码肯定要通知一下，不然API如何知道密码改了？例如QQ密码改了，第三方怎么知道？<br>方案一：考虑通过Redis来做中间层。</p><ul><li>生成token时—除了生成token(含guid)—还生成个guid+用户id—写入redis</li><li>验证token时—拿guid去redis校验</li><li>改密码—redis那一项数据—之前的给删掉/过期/无效</li><li>验证旧token—发现过期</li><li>验证新token就没事儿</li></ul><p>细想一下，这不就代表着，客户端和鉴权中心得通信，显然不是很好的方案！</p><p>方案二：减少token有效期—降低伤害</p><p><strong>客户端校验2个扩展点:</strong></p><ol><li>要么是JWT鉴权时的观察者-委托加入逻辑</li><li>要么是授权时基于requirement完成扩展</li></ol><p>颁发Token时，可以指定有效期和生效时间：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityToken</span><span class="token punctuation">(</span>  issuer<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_JWTTokenOptions<span class="token punctuation">.</span>Issuer<span class="token punctuation">,</span>  audience<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_JWTTokenOptions<span class="token punctuation">.</span>Audience<span class="token punctuation">,</span>  claims<span class="token punctuation">:</span> claims<span class="token punctuation">,</span>  expires<span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//5分钟有效期</span>  notBefore<span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//1分钟后有效</span>  signingCredentials<span class="token punctuation">:</span> creds<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在鉴权环节里去进行扩展：</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Scheme</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenValidationParameters</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//JWT有一些默认的属性，就是给鉴权时就可以筛选了</span>    ValidateIssuer <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证Issuer</span>    ValidateAudience <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证Audience</span>    ValidateLifetime <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证失效时间</span>    ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证SecurityKey</span>    ValidAudience <span class="token operator">=</span> tokenOptions<span class="token punctuation">.</span>Audience<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span>    ValidIssuer <span class="token operator">=</span> tokenOptions<span class="token punctuation">.</span>Issuer<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Issuer，这两项和前面签发jwt的设置一致</span>    IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>tokenOptions<span class="token punctuation">.</span>SecurityKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//拿到SecurityKey</span>    AudienceValidator <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//等同于去扩展了下Audience的校验规则---鉴权</span>      <span class="token keyword">return</span> m <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">"audience"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    LifetimeValidator <span class="token operator">=</span> <span class="token punctuation">(</span>notBefore<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> securityToken<span class="token punctuation">,</span> validationParameters<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> notBefore <span class="token operator">&lt;=</span> DateTime<span class="token punctuation">.</span>Now <span class="token operator">&amp;&amp;</span> expires <span class="token operator">>=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//&amp;&amp; validationParameters</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义校验规则</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在授权环节里进行扩展：<br>通过Requirement叠加规则，拿到context.User.Identities.First().Claims之后就可以随便操作。</p><h3 id="问题2：重放攻击"><a href="#问题2：重放攻击" class="headerlink" title="问题2：重放攻击"></a>问题2：重放攻击</h3><ul><li>重复请求—-请求带个随机数—随机数搞个Redis—执行前先redis一下</li><li>随机数不是在token</li></ul><h3 id="问题3：滑动过期"><a href="#问题3：滑动过期" class="headerlink" title="问题3：滑动过期"></a>问题3：滑动过期</h3><ul><li>Token是不会变的，而且只能鉴权中心发的</li><li>不能默认检测有效期—可以扩展<strong>校验</strong>—当然也可以放在requirement</li><li>还是写入Redis—这个滑动</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> .Net Core Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netcore认证授权与IdentityServer4（1）鉴权授权源码</title>
      <link href="/2020/05/23/netcore-authentication-authorization/"/>
      <url>/2020/05/23/netcore-authentication-authorization/</url>
      
        <content type="html"><![CDATA[<h2 id="主要概要"><a href="#主要概要" class="headerlink" title="主要概要"></a>主要概要</h2><p>这个文章主要来聊一聊Net Core中的认证与授权，以及Net Core生态中非常火热的IdentityServer4这个组件的使用，主要内容如下：</p><ol><li>鉴权授权流程变化</li><li>源码解读鉴权</li><li>源码解读多授权策略</li><li>JWT和Identity</li></ol><h2 id="鉴权授权流程变化"><a href="#鉴权授权流程变化" class="headerlink" title="鉴权授权流程变化"></a>鉴权授权流程变化</h2><p><strong>Http协议</strong></p><ul><li>无状态&amp;轻量级</li><li>请求–响应式–传输是文本</li><li>再次请求—不知道你刚来过</li><li>如果想识别—带个签名/证明/工卡/Token—就是放在文本里面</li></ul><h3 id="Cookie-Session"><a href="#Cookie-Session" class="headerlink" title="Cookie/Session"></a>Cookie/Session</h3><p><strong>基本流程</strong>：其实是为了解决无状态下的用户识别问题<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/sessioncookie.png" alt=""></p><p>第一，如果是<strong>集群</strong>，cookie和session如何应对？<br>Session共享，完成集群的session识别。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/nginxSeeion.jpg" alt=""></p><p>第二，如果是分布式的，如何解决呢？甚至是分布式的还是跨局域网络的，第三方的，又该如何解决？<br>会用Token来解决，可以参考下图Id4的架构。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/IdentityServer4.png" alt=""></p><h2 id="源码解读鉴权"><a href="#源码解读鉴权" class="headerlink" title="源码解读鉴权"></a>源码解读鉴权</h2><h3 id="登录验证-授权"><a href="#登录验证-授权" class="headerlink" title="登录验证-授权"></a>登录验证-授权</h3><ul><li>常规的Cookie+Session+Filter模式</li><li>基于IAuthorizationFilter，</li><li>通过OnAuthorization</li><li>发生在请求进入MVC伊始</li></ul><h4 id="Cookie-Session方式"><a href="#Cookie-Session方式" class="headerlink" title="Cookie+Session方式"></a>Cookie+Session方式</h4><p>cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。禁用cookie后还有其他方法存储，比如放在url中。<br>先看这种土办法如何实现：<br>第一，要在自定义Attribute，需要继承IAuthorizationFilter,如下：<br>context.HttpContext.Request.Cookies[“CurrentUser”];会检查cookie中是否有current user。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAuthorizationFilterAttribute</span> <span class="token punctuation">:</span> Attribute<span class="token punctuation">,</span> IAuthorizationFilter    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnAuthorization</span><span class="token punctuation">(</span>AuthorizationFilterContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>ActionDescriptor<span class="token punctuation">.</span>EndpointMetadata<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token keyword">is</span> AllowAnonymousAttribute<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匿名 不检查</span>            <span class="token punctuation">}</span>            <span class="token keyword">string</span> sUser <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Cookies<span class="token punctuation">[</span><span class="token string">"CurrentUser"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedirectResult</span><span class="token punctuation">(</span><span class="token string">"~/Home/Index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//还应该检查下权限</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二，配置管道，如下：使用cookie和Authorization并且关了Authentication.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">//app.UseAuthentication();</span>  app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三，配置验证标签：无论加不加[CustomAuthorizationFilter]这个标签如何都会去执行CustomAuthorizationFilterAttribute 中的OnAuthorization方法。如果是加了AllowAnonymous这个标签，那就回通过。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>CustomAuthorizationFilter<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> Controller<span class="token punctuation">{</span>   <span class="token punctuation">[</span>AllowAnonymous<span class="token punctuation">]</span>   <span class="token keyword">public</span> IActionResult <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> password<span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"chaoqiang"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>CurrentCultureIgnoreCase<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token preprocessor property">#<span class="token directive keyword">region</span> Filter</span>          <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cookies<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"CurrentUser"</span><span class="token punctuation">,</span> <span class="token string">"chaoqiang"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>CookieOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            Expires <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>          <span class="token punctuation">{</span>            Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>            Message <span class="token operator">=</span> <span class="token string">"登录成功"</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>          <span class="token punctuation">{</span>            Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>            Message <span class="token operator">=</span> <span class="token string">"登录失败"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">public</span> IActionResult <span class="token function">Privacy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述过程是：当通过login的验证之后，会将cookie放入rsponse中，后面请求就可以访问Privacy这个方法了。</p><h4 id="Authentication和Authorization"><a href="#Authentication和Authorization" class="headerlink" title="Authentication和Authorization"></a>Authentication和Authorization</h4><ul><li>鉴权——-&gt;授权</li><li>鉴权：鉴定身份，有没有登录，你是谁</li><li>授权：判定有没有权限</li></ul><p>鉴权授权里面，是通过AuthenticationHttpContextExtensions的5个方法—其实最终还是要写cookie/session/信息</p><p>都是调用的IAuthenticationService，ConfigureService注册进去</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 最基础认证--自定义Handler</span><span class="token comment" spellcheck="true">//services.AddAuthenticationCore();</span>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>AddAuthentication又通过AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore实现，主要是下面三个：</p><ul><li><p>IAuthenticationService</p></li><li><p>IAuthenticationHandlerProvider</p></li><li><p>IAuthenticationSchemeProvider</p></li><li><p>5个方法默认就在AuthenticationService，找handler完成处理</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/AuthenticationHttpContextExtensions.png" alt=""></p><h4 id="造轮子"><a href="#造轮子" class="headerlink" title="造轮子"></a>造轮子</h4><p>理解完源码的脉络，尝试自己写个简化版的鉴权流程：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 最基础认证--自定义Handler</span>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">AddAuthenticationCore</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span> options<span class="token punctuation">.</span><span class="token generic-method function">AddScheme<span class="token punctuation">&lt;</span>CustomHandler<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">,</span> <span class="token string">"DemoScheme"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时对应的中间件<code>app.UseAuthentication();</code>这个就不再需要了，用自定义的处理方式了。</p><p>下面看一下对应的 CustomHandler是如何来构造的：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// CustomHandler完成5个动作</span><span class="token comment" spellcheck="true">// 三个接口，登录/退出分开的原因有远程校验</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomHandler</span> <span class="token punctuation">:</span> IAuthenticationHandler<span class="token punctuation">,</span> IAuthenticationSignInHandler<span class="token punctuation">,</span> IAuthenticationSignOutHandler<span class="token punctuation">{</span>  <span class="token keyword">public</span> AuthenticationScheme Scheme <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">protected</span> HttpContext Context <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> Task <span class="token function">InitializeAsync</span><span class="token punctuation">(</span>AuthenticationScheme scheme<span class="token punctuation">,</span> HttpContext context<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Scheme <span class="token operator">=</span> scheme<span class="token punctuation">;</span>    Context <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>AuthenticateResult<span class="token operator">></span> <span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> cookie <span class="token operator">=</span> Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Cookies<span class="token punctuation">[</span><span class="token string">"CustomCookie"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">NoResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Task <span class="token function">ChallengeAsync</span><span class="token punctuation">(</span>AuthenticationProperties properties<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Context.Response.Redirect("/Account/Login");//跳转页面--上端返回json</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Task <span class="token function">ForbidAsync</span><span class="token punctuation">(</span>AuthenticationProperties properties<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">403</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Task <span class="token function">SignInAsync</span><span class="token punctuation">(</span>ClaimsPrincipal user<span class="token punctuation">,</span> AuthenticationProperties properties<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationTicket</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> Scheme<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cookies<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"CustomCookie"</span><span class="token punctuation">,</span> <span class="token function">Serialize</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Task <span class="token function">SignOutAsync</span><span class="token punctuation">(</span>AuthenticationProperties properties<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cookies<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">"CustomCookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> AuthenticationTicket <span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token keyword">string</span> content<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteTicket <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> TicketSerializer<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>byteTicket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">string</span> <span class="token function">Serialize</span><span class="token punctuation">(</span>AuthenticationTicket ticket<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要引入  Microsoft.AspNetCore.Authentication</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteTicket <span class="token operator">=</span> TicketSerializer<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>byteTicket<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第一步</strong>：登陆一下 访问login方法，将claim放入到claimIdentity中，再将claimIdentity 放入到ClaimsPrincipal中，然后丢给SignInAsync这个方法去处理，从而找对应的这个CustomHandler。<br>说明一下：</p><ul><li>Claim：信息</li><li>ClaimsIdentity：身份</li><li>ClaimsPrincipal：一个人可以有多个身份</li><li>AuthenticationTicket：用户票据</li><li>加密一下—写入cookie</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>IActionResult<span class="token operator">></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//base.HttpContext.RequestServices.</span>  <span class="token comment" spellcheck="true">//IAuthenticationService</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"chaoqiang"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>CurrentCultureIgnoreCase<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化ClaimsIdentity("Custom")带上参数，否则IsAuthenticated是false</span>    <span class="token keyword">var</span> claimIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token string">"Custom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token string">"chaoqiang@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//claimIdentity.IsAuthenticated = true;</span>    <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>claimIdentity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationProperties</span>    <span class="token punctuation">{</span>      ExpiresUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> <span class="token string">"登录成功"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">await</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> <span class="token string">"登录失败"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，鉴权，访问AuthenticateAsync方法，通过scheme告诉Authenticate用对应的处理器，比如这里是在cookie中鉴权。这里的scheme对应的handler就是在startup中注入的<code>CustomeScheme</code>对应<code>CustomeHandler</code>,把Principal给Http.Context.User,就完成了鉴权的过程。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>IActionResult<span class="token operator">></span> <span class="token function">Authentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">?</span><span class="token punctuation">.</span>Principal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User <span class="token operator">=</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"认证成功，包含用户{base.HttpContext.User.Identity.Name}"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"认证失败，用户未登录"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，授权，一般是先鉴权，然后授权，也就是做一些检查。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>IActionResult<span class="token operator">></span> <span class="token function">Authorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">?</span><span class="token punctuation">.</span>Principal <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"认证失败，用户未登录"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User <span class="token operator">=</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//授权</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">?</span><span class="token punctuation">.</span>Identity<span class="token operator">?</span><span class="token punctuation">.</span>IsAuthenticated <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">false</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>Identity<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Eleven"</span><span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">ForbidAsync</span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>      <span class="token punctuation">{</span>        Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>        Message <span class="token operator">=</span> $<span class="token string">"授权失败，用户{base.HttpContext.User.Identity.Name}没有权限"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"授权成功，用户{base.HttpContext.User.Identity.Name}具备权限"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">ChallengeAsync</span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"授权失败，没有登录"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如，下面有一个需要授权的页面，来访问：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>IActionResult<span class="token operator">></span> <span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">?</span><span class="token punctuation">.</span>Principal <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"认证失败，用户未登录"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User <span class="token operator">=</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//授权</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">?</span><span class="token punctuation">.</span>Identity<span class="token operator">?</span><span class="token punctuation">.</span>IsAuthenticated <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">false</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>Identity<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Eleven"</span><span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">ForbidAsync</span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>      <span class="token punctuation">{</span>        Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>        Message <span class="token operator">=</span> $<span class="token string">"授权失败，用户{base.HttpContext.User.Identity.Name}没有权限"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有权限</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"授权成功，正常访问页面！"</span><span class="token punctuation">,</span>      Html <span class="token operator">=</span> <span class="token string">"Hello Root!"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">ChallengeAsync</span><span class="token punctuation">(</span><span class="token string">"CustomScheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"授权失败，没有登录"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结一下（其实还是那套东西）</p><ul><li>登录写入凭证</li><li>鉴权就是找出用户</li><li>授权就是判断权限</li><li>退出就是清理凭证</li></ul><p>再回顾一下，Asp .Net Core标准内置的鉴权授权是如何来配置的？<br>1.configureservice里面</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能少 通过scheme找到handler</span>  options<span class="token punctuation">.</span>DefaultSignInScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>  options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> <span class="token string">"Cookie/Login"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.Configure里要启用鉴权授权中间件</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.在controller或者Action上添加<code>[Authorize]</code>标签</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>AllowAnonymous<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>IActionResult<span class="token operator">></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"chaoqiang"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>CurrentCultureIgnoreCase<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//var claimIdentity = new ClaimsIdentity("Cookie");</span>    <span class="token comment" spellcheck="true">//claimIdentity.AddClaim(new Claim(ClaimTypes.Name, name));</span>    <span class="token comment" spellcheck="true">//claimIdentity.AddClaim(new Claim(ClaimTypes.Email, "chaoqiang@qq.com"));</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 升级JwtClaimTypes  cookie会短一点</span>    <span class="token keyword">var</span> claimIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> JwtClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>    claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token string">"chaoqiang@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>claimIdentity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationProperties</span>    <span class="token punctuation">{</span>      ExpiresUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//省略scheme</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> <span class="token string">"登录成功"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">await</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> <span class="token string">"登录失败"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.鉴权授权,一起放在这个AuthenticationAuthorization方法中，其中<code>base.HttpContext.AuthenticateAsync();</code> 这一步可以不用执行，因为中间件根据标签<code>[Authorize]</code>已经把事情做完了。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>IActionResult<span class="token operator">></span> <span class="token function">AuthenticationAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认CookieAuthenticationDefaults.AuthenticationScheme</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">?</span><span class="token punctuation">.</span>Principal <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"认证失败，用户未登录"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User <span class="token operator">=</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//授权</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">?</span><span class="token punctuation">.</span>Identity<span class="token operator">?</span><span class="token punctuation">.</span>IsAuthenticated <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">false</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>Identity<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Eleven"</span><span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">ForbidAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"授权失败，用户{base.HttpContext.User.Identity.Name}没有权限"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"授权成功，用户{base.HttpContext.User.Identity.Name}具备权限"</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">ChallengeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> $<span class="token string">"授权失败，没有登录"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.访问有授权要求的页面</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>Authorize<span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//base.HttpContext.User.Identities 认证过之后就可以用了</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="app-UseAuthentication中间件"><a href="#app-UseAuthentication中间件" class="headerlink" title="app.UseAuthentication中间件"></a>app.UseAuthentication中间件</h3><p>可以看到是AuthAppBuilderExtensions这个类有个注册方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IApplicationBuilder <span class="token function">UseAuthentication</span><span class="token punctuation">(</span>      <span class="token keyword">this</span> IApplicationBuilder app<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>AuthAppBuilderExtensions—AuthenticationMiddleware</li><li>中间件一定是完成用户信息解析赋值给ContextUser</li><li>期间会优先执行IAuthenticationRequestHandler—Remote,远程校验（AuthenticationHandler本地基类 和 RemoteAuthenticationHandler远程）</li></ul><h3 id="service-AddAuthenication-服务注册"><a href="#service-AddAuthenication-服务注册" class="headerlink" title="service.AddAuthenication 服务注册"></a>service.AddAuthenication 服务注册</h3><ul><li>调用AddAuthenicationCore 其实就是通过AuthenicationHandlerProvider 指定具体的Handler</li><li>注册handler，如何处理；</li></ul><h3 id="AddCookie"><a href="#AddCookie" class="headerlink" title="AddCookie"></a>AddCookie</h3><p>使用Cookie，在这里指定了CookieAuthenticationHandler作为处理逻辑</p><p>来了个Events，就是以前的管道模型套路–</p><p>又来了个SessionStore(将信息存下来，换个更简洁的ticket返回前端)(不是session，只是类似session的思路)</p><p>PS: 详细的过程需要研读源码。</p><p>可以看下如何做cookie的扩展，<br>SessionStore—可以MemoryCache  也可以Redis；<br>Event—类似于Asp.Net  的管道模型—可以扩展下</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>ITicketStore<span class="token punctuation">,</span> MemoryCacheTicketStore<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">AddMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能少 通过scheme找到handler</span>  options<span class="token punctuation">.</span>DefaultSignInScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>  options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> <span class="token string">"Cookie/Login"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//信息存在服务端--把key写入cookie--类似session</span>    options<span class="token punctuation">.</span>SessionStore <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>ITicketStore<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieAuthenticationEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      OnSignedIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func</span><span class="token operator">&lt;</span>CookieSignedInContext<span class="token punctuation">,</span> Task<span class="token operator">></span><span class="token punctuation">(</span>      <span class="token keyword">async</span> context <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{context.Request.Path} is OnSignedIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      OnSigningIn <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{context.Request.Path} is OnSigningIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      OnSigningOut <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{context.Request.Path} is OnSigningOut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//扩展事件</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源码解读多授权策略"><a href="#源码解读多授权策略" class="headerlink" title="源码解读多授权策略"></a>源码解读多授权策略</h2><ul><li>鉴权解析用户信息</li><li>授权要求达成某个条件：</li></ul><ol><li>Scheme</li><li>Role</li><li>Policy</li></ol><h3 id="基于Scheme形式的授权"><a href="#基于Scheme形式的授权" class="headerlink" title="基于Scheme形式的授权"></a>基于Scheme形式的授权</h3><p>先看一下如何配置：</p><ul><li>2个Use </li><li>1个Add</li><li>指定Scheme</li><li>指定Controller/Action</li></ul><p>说到底就是：起个名字，保持统一 就可以完成授权。</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//不能少,signin signout Authenticate都是基于Scheme</span>  options<span class="token punctuation">.</span>DefaultSignInScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>LoginPath <span class="token operator">=</span> <span class="token string">"/Authorization/Index"</span><span class="token punctuation">;</span>  options<span class="token punctuation">.</span>AccessDeniedPath <span class="token operator">=</span> <span class="token string">"/Authorization/Index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 基于CookieAuthentication</span>app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//鉴权</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 需要授权的页面</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>AuthenticationSchemes <span class="token operator">=</span> <span class="token string">"Cookies"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">public</span> IActionResult <span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于Role的形式授权"><a href="#基于Role的形式授权" class="headerlink" title="基于Role的形式授权"></a>基于Role的形式授权</h3><p>看一下具体的配置：管道和注册服务的配置和上面一样，不同的地方在于登录的时候会把角色放到identity里面：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>AllowAnonymous<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>IActionResult<span class="token operator">></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> password<span class="token punctuation">,</span> <span class="token keyword">string</span> role <span class="token operator">=</span> <span class="token string">"Admin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//base.HttpContext.RequestServices.</span>  <span class="token comment" spellcheck="true">//IAuthenticationService</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"chaoqiang"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>CurrentCultureIgnoreCase<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> claimIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token string">"Custom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//claimIdentity.AddClaim(new Claim(ClaimTypes.Email, "chaoqiang@qq.com"));</span>    claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token string">"57265177@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claimIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>claimIdentity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationProperties</span>    <span class="token punctuation">{</span>      ExpiresUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//登录为默认的scheme  cookies</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> <span class="token string">"登录成功"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">await</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      Result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      Message <span class="token operator">=</span> <span class="token string">"登录失败"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">"Admin"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">InfoAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">InfoUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">"Admin,User"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">InfoAdminUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于Policy的授权"><a href="#基于Policy的授权" class="headerlink" title="基于Policy的授权"></a>基于Policy的授权</h3><p>管道配置与之前两种一致，不同之处在于service注入这有一个关于Authorization的注入。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 基于策略授权</span>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能少</span>  options<span class="token punctuation">.</span>DefaultSignInScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span>LoginPath <span class="token operator">=</span> <span class="token string">"/Authorization/Index"</span><span class="token punctuation">;</span>  options<span class="token punctuation">.</span>AccessDeniedPath <span class="token operator">=</span> <span class="token string">"/Authorization/Index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"AdminPolicy"</span><span class="token punctuation">,</span>    policyBuilder <span class="token operator">=</span><span class="token operator">></span> policyBuilder    <span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//Claim的Role是Admin</span>    <span class="token punctuation">.</span><span class="token function">RequireUserName</span><span class="token punctuation">(</span><span class="token string">"Eleven"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//Claim的Name是Eleven</span>    <span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Email<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须有某个Cliam</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内置</span>  options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"UserPolicy"</span><span class="token punctuation">,</span>    policyBuilder <span class="token operator">=</span><span class="token operator">></span> policyBuilder<span class="token punctuation">.</span><span class="token function">RequireAssertion</span><span class="token punctuation">(</span>context <span class="token operator">=</span><span class="token operator">></span>    context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token string">"Admin"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自定义</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> Policy</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>AuthenticationSchemes <span class="token operator">=</span> <span class="token string">"Cookies"</span><span class="token punctuation">,</span> Policy <span class="token operator">=</span> <span class="token string">"AdminPolicy"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">InfoAdminPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>AuthenticationSchemes <span class="token operator">=</span> <span class="token string">"Cookies"</span><span class="token punctuation">,</span> Policy <span class="token operator">=</span> <span class="token string">"UserPolicy"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">InfoUserPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>AuthenticationSchemes <span class="token operator">=</span> <span class="token string">"Cookies"</span><span class="token punctuation">,</span> Policy <span class="token operator">=</span> <span class="token string">"QQEmail"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">InfoQQEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>AuthenticationSchemes <span class="token operator">=</span> <span class="token string">"Cookies"</span><span class="token punctuation">,</span> Policy <span class="token operator">=</span> <span class="token string">"DoubleEmail"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> IActionResult <span class="token function">InfoDoubleEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>溯源：</p><ul><li>从AddMVC说起– AddAuthorization</li><li>PolicyServiceCollectionExtensions</li><li>AuthorizationServiceCollectionExtensions</li><li>常规的注册多个对象</li><li>AddAuthorizationPolicyEvaluator</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/Auth/AddAuthorizationCore.png" alt=""></p><p>AddAuthorization会看到Option里面就是字典存储Policy和提供名称获取</p><p>AuthorizationPolicy：</p><ul><li>CombineAsync：把特性里面的三个属性，转成Policy,</li><li>其实Scheme/Role其实都是转换成Policy</li><li>发现里面有一组Requirements，是校验规则的实现</li><li>生成一个Policy—PolicyBuilder+Requirements</li><li>AuthorizationPolicyBuilder：建造者，组装Policy</li></ul><p>下面自己定义一个Requirement，使得两种邮箱都能支持：</p><h2 id="JWT和Identity"><a href="#JWT和Identity" class="headerlink" title="JWT和Identity"></a>JWT和Identity</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> .Net Core Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
            <tag> Authentication </tag>
            
            <tag> Authorization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NetCore 开发实战（2）——微服务实战</title>
      <link href="/2020/05/02/netcore-programing-and-practice2/"/>
      <url>/2020/05/02/netcore-programing-and-practice2/</url>
      
        <content type="html"><![CDATA[<h2 id="26-工程结构概览：定义应用分层及依赖关系"><a href="#26-工程结构概览：定义应用分层及依赖关系" class="headerlink" title="26 | 工程结构概览：定义应用分层及依赖关系"></a>26 | 工程结构概览：定义应用分层及依赖关系</h2><p>从这一节开始进入微服务实战部分</p><p>这一节主要探讨工程的结构和应用的分层</p><p>在应用的分层这里定义了四个层次：</p><ol><li><p>领域模型层</p></li><li><p>基础设施层</p></li><li><p>应用层</p></li><li><p>共享层</p></li></ol><p>可以通过代码来看一下</p><p><strong>共享层</strong>一共建立三个工程：</p><ol><li><p><strong>GeekTime.Core</strong>：主要承载基础的简单的类型，比如说异常或者一些帮助类</p></li><li><p><strong>GeekTime.Domain.Abstractions</strong>：抽象层，领域的抽象是指在领域模型可以定义一些基类或者接口，领域事件接口，领域事件处理接口，还有 Entity 的接口和 Entity 的基类</p></li><li><p><strong>GeekTime.Infrastructure.Core</strong>：基础设施的核心层，是指对仓储，还有 EFContext 定义一些共享代码</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200319002637498-786809398.jpg" alt=""></p><p>这些包实际上在不同的项目里面都可以共享，所以建议的做法是把这些代码都通过私有的 NuGet 的仓库来存储，然后其他的工程可以使用 NuGet 包来直接引用即可</p><p><strong>领域模型层</strong>就是定义领域模型的地方，这里面会有不同的聚合，还有领域事件，不同的聚合下面就是领域模型</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200319002646413-1686646180.jpg" alt=""></p><p><strong>基础设施层</strong>是仓储层和一些共享代码的实现，这里只定义了仓储层的实现，包括 EF 的 DomainContext，还有 Order 的仓储层，User 的仓储层，还定义了领域模型与数据库之间的映射关系，就是在 EntityConfigurations 这目录下面去定义</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200319002655706-884151308.jpg" alt=""></p><p><strong>应用层</strong>分两个，一个工程是 API 层，是用来承载 Web API 或者 Web 应用的，另外一个是后台任务，这个就是用来执行一些特殊的 Job，作为 Job 的宿主运行的，它可以是一个控制台的应用程序</p><p>在 Web 层，Web API 层，也分了几个关键目录 Application，Controllers，Extensions，Infrastructure</p><p><strong>基础设施层</strong>会放一些身份认证缓存之类的与基础设施交互相关的一些代码</p><p><strong>扩展层</strong>主要是将服务注册进容器的代码和中间件配置的代码，也就是两扩展方法，一个是对 ServiceCollection 的扩展，一个是对 ApplicationBuilder 的扩展</p><p>控制器层主要用来定义 Web API，这一层就是定义前后端交互的接口</p><p>应用层使用了 *<em>CQRS *</em>的设计模式，就是命令与查询职责分离，把命令放在一个目录，把查询放在一个目录，同样的这里还有两个事件处理的目录，一个是领域模型，领域事件的处理，一个是集成事件的处理</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200319002705177-42272528.jpg" alt=""></p><p>再看一下各层之间的依赖关系</p><p>Shared 层实际上是不依赖任何层次的，它存储了共享的代码，被各个工程共享</p><p>GeekTime.Core，GeekTime.Domain.Abstractions 是不依赖任何工程的，而 GeekTime.Infrastructure.Core 依赖了 GeekTime.Domain.Abstractions，实现了仓储，比如说仓储会依赖 IAggregateRoot 接口</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRepository</span><span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token keyword">where</span> TEntity <span class="token punctuation">:</span> Entity<span class="token punctuation">,</span> IAggregateRoot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200319002713043-254228443.jpg" alt=""></p><p>领域模型需要继承模型的基类，并且实现一个聚合根的接口，表示它是一个聚合根</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">:</span> Entity<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">,</span> IAggregateRoot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>领域事件需要实现一个领域事件的接口</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedDomainEvent</span> <span class="token punctuation">:</span> IDomainEvent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200319002723847-2117213011.jpg" alt=""></p><p>基础设施层是一个独立的程序集，实现了仓储的部分，定义了一个 Order 的仓储</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrderRepository</span> <span class="token punctuation">:</span> IRepository<span class="token operator">&lt;</span>Order<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还定义了 Order 仓储的实现</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderRepository</span> <span class="token punctuation">:</span> Repository<span class="token operator">&lt;</span>Order<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> DomainContext<span class="token operator">></span><span class="token punctuation">,</span> IOrderRepository<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">OrderRepository</span><span class="token punctuation">(</span>DomainContext context<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看到仓储实际上依赖了基础设施层共享代码里面的仓储的定义 IRepository，这样就可以复用仓储层的代码，这样定义 OrderRepository 就会比较简单，可以复用 Repository 的一些实现</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TDbContext<span class="token operator">></span> <span class="token punctuation">:</span> Repository<span class="token operator">&lt;</span>TEntity<span class="token punctuation">,</span> TDbContext<span class="token operator">></span><span class="token punctuation">,</span> IRepository<span class="token operator">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token operator">></span> <span class="token keyword">where</span> TEntity <span class="token punctuation">:</span> Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span><span class="token punctuation">,</span> IAggregateRoot <span class="token keyword">where</span> TDbContext <span class="token punctuation">:</span> EFContext<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Repository</span><span class="token punctuation">(</span>TDbContext context<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Delete</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> entity <span class="token operator">=</span> DbContext<span class="token punctuation">.</span><span class="token generic-method function">Find<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DbContext<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">DeleteAsync</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> entity <span class="token operator">=</span> <span class="token keyword">await</span> DbContext<span class="token punctuation">.</span><span class="token generic-method function">FindAsync<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DbContext<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> TEntity <span class="token function">Get</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> DbContext<span class="token punctuation">.</span><span class="token generic-method function">Find<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> DbContext<span class="token punctuation">.</span><span class="token generic-method function">FindAsync<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>已经实现了一些基本的方法，增删改查的方法</p><p>数据库访问的实现，继承了自己定义的 EFContext，EFContext 作为共享代码在各个工程里面复用</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DomainContext</span> <span class="token punctuation">:</span> EFContext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外一个比较特殊的是事务处理的对象，这个对象是用来管理整个应用程序的请求上下文中的事务，这样就可以避免手动地去处理事务，简化代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DomainContextTransactionBehavior</span><span class="token operator">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span> <span class="token punctuation">:</span> TransactionBehavior<span class="token operator">&lt;</span>DomainContext<span class="token punctuation">,</span> TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">DomainContextTransactionBehavior</span><span class="token punctuation">(</span>DomainContext dbContext<span class="token punctuation">,</span> ICapPublisher capBus<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>DomainContextTransactionBehavior<span class="token operator">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span><span class="token operator">></span> logger<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>dbContext<span class="token punctuation">,</span> capBus<span class="token punctuation">,</span> logger<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200319002735650-467693226.jpg" alt=""></p><p>应用层依赖了基础设施层，基础设施层又依赖了领域层</p><p>应用层实际上是把各层组装在一起的这一层，它是应用程序的一个宿主，协调各层之间的关系，以及组装代码都是在这里实现的</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200319002743167-1634287954.jpg" alt=""></p><p><strong>总结一下</strong>:</p><p>领域模型层专注于业务的设计，它不依赖于其他各层，它是相对独立的</p><p>基础设施的仓储层仅仅负责领域模型的存取，它不负责任何的业务逻辑代码的承载</p><p>推荐使用 CQRS 的模式来设计应用程序，使应用程序的代码结构更加的合理，在团队和项目膨胀的情况下，工程的可维护性不至于急剧的下降</p><p>Web API 是面向前端交互的接口，避免依赖领域模型</p><p>共享代码建议设计为共享包，使用私有的 NuGet 仓库来分发和管理</p><h2 id="27-定义Entity：区分领域模型的内在逻辑和外在行为"><a href="#27-定义Entity：区分领域模型的内在逻辑和外在行为" class="headerlink" title="27 | 定义Entity：区分领域模型的内在逻辑和外在行为"></a>27 | 定义Entity：区分领域模型的内在逻辑和外在行为</h2><p>上一节讲到领域模型分为两层</p><p>一层是抽象层，定义了公共的接口和类</p><p>另一层就是领域模型的定义层</p><p>先看一下抽象层的定义</p><ol><li>实体接口 IEntity</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEntity</span>    <span class="token punctuation">{</span>        <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">GetKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEntity</span><span class="token operator">&lt;</span>TKey<span class="token operator">></span> <span class="token punctuation">:</span> IEntity    <span class="token punctuation">{</span>        TKey Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常情况下实体只有一个 ID，但是也不排除存在多个 ID 的情况，所以这里的接口 IEntity 定义实现为多个 ID 的情况，而 IEntity 表示实体只有一个 Id</p><p>同样看一下 Entity 的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">:</span> IEntity<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span><span class="token operator">&lt;</span>TKey<span class="token operator">></span> <span class="token punctuation">:</span> Entity<span class="token punctuation">,</span> IEntity<span class="token operator">&lt;</span>TKey<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样地定义了一个 Entity 和 Entity，这样就可以在实体上面定义一些共享的方法，比如 ToString</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">:</span> IEntity<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">GetKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输出当前实体的名称以及它的 Id 的清单</span>        <span class="token keyword">return</span> $<span class="token string">"[Entity: {GetType().Name}] Keys = {string.Join("</span><span class="token punctuation">,</span><span class="token string">", GetKeys())}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 Entity 定义了比较多的方法</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span><span class="token operator">&lt;</span>TKey<span class="token operator">></span> <span class="token punctuation">:</span> Entity<span class="token punctuation">,</span> IEntity<span class="token operator">&lt;</span>TKey<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">?</span> _requestedHashCode<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> TKey Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">protected</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">GetKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> Id <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 表示对象是否相等</span>    <span class="token comment" spellcheck="true">/// 这个方法的重载使我们可以正确的判断两个实体是否是同一个实体</span>    <span class="token comment" spellcheck="true">/// 根据 Id 判断，如果没有 Id 的话，两个实体是不会相等的</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="obj">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">object</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">is</span> Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span> item <span class="token operator">=</span> <span class="token punctuation">(</span>Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">IsTransient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">IsTransient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> item<span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 这个方法用来辅助对比两个对象是否相等</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">int</span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsTransient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_requestedHashCode<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span>                _requestedHashCode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">31</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> _requestedHashCode<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 表示对象是否为全新创建的，未持久化的</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">IsTransient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果它没有 Id 就表示它没有持久化</span>        <span class="token keyword">return</span> EqualityComparer<span class="token operator">&lt;</span>TKey<span class="token operator">></span><span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>Id<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> $<span class="token string">"[Entity: {GetType().Name}] Id = {Id}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 操作符 == 重载</span>    <span class="token comment" spellcheck="true">/// 借助上面的 Equals 方法</span>    <span class="token comment" spellcheck="true">/// 使得可以直接用 == 判断两个领域对象是否相等</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="left">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="right">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span>Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span> left<span class="token punctuation">,</span> Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">true</span> <span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 操作符 != 重载</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="left">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="right">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span>Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span> left<span class="token punctuation">,</span> Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>聚合根接口 IAggregateRoot</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAggregateRoot</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>聚合根接口实际上是一个空接口，它不实现任何的方法，它的作用是在实现仓储层的时候，让一个仓储对应一个聚合根</p><ol start="3"><li>领域事件接口 IDomainEvent</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEvent</span> <span class="token punctuation">:</span> INotification    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>域事件处理接口 IDomainEventHandler</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEventHandler</span><span class="token operator">&lt;</span>TDomainEvent<span class="token operator">></span> <span class="token punctuation">:</span> INotificationHandler<span class="token operator">&lt;</span>TDomainEvent<span class="token operator">></span>         <span class="token keyword">where</span> TDomainEvent <span class="token punctuation">:</span> IDomainEvent    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>还有一个领域模型里面比较关键的值对象 ValueObject</li></ol><p>值对象的定义比较特殊，因为它是没有 Id 的，所以没有关于 Id 的定义，并且没有对值对象定义接口</p><p>重点实现了它是否相等的判断，也是重载了 Equals 这个方法和 GetHashCode 这个方法</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">EqualOperator</span><span class="token punctuation">(</span>ValueObject left<span class="token punctuation">,</span> ValueObject right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> left<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">NotEqualOperator</span><span class="token punctuation">(</span>ValueObject left<span class="token punctuation">,</span> ValueObject right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">EqualOperator</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">int</span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">^</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它有一个特殊的抽象方法的定义，获取它的原子值</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span> <span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个方法的作用是将值对象的字段输出出来，作为唯一标识来判断两个对象是否相等，可以看到 Equals 的定义里面也是调用了获取原子值这个方法来判断它是否相等</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ValueObject other <span class="token operator">=</span> <span class="token punctuation">(</span>ValueObject<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>    IEnumerator<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span> thisValues <span class="token operator">=</span> <span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IEnumerator<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span> otherValues <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>thisValues<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> otherValues<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>thisValues<span class="token punctuation">.</span>Current<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>otherValues<span class="token punctuation">.</span>Current<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thisValues<span class="token punctuation">.</span>Current <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>thisValues<span class="token punctuation">.</span>Current<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>otherValues<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">!</span>thisValues<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>otherValues<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看一下定义的 Order 实体</p><pre><code>public class Order : Entity&lt;long&gt;, IAggregateRoot{    public string UserId { get; private set; }    public string UserName { get; private set; }    public Address Address { get; private set; }    public int ItemCount { get; private set; }    protected Order()    { }    public Order(string userId, string userName, int itemCount, Address address)    {        this.UserId = userId;        this.UserName = userName;        this.Address = address;        this.ItemCount = itemCount;        this.AddDomainEvent(new OrderCreatedDomainEvent(this));    }    public void ChangeAddress(Address address)    {        this.Address = address;    }}</code></pre><p>它首先实现了 Entity，这一个在上一节已经讲过，另外一个 Order 定义为一个聚合根，它需要实现聚合根接口 IAggregateRoot</p><p>实体中字段的 set 设置为 private，这样的好处是 Order 所有的数据的操作都应该由实体负责，而不应该被外部对象去操作，从而让领域模型符合封闭开放的原则</p><p>对于领域模型的操作，都应该是定义具有业务逻辑含义的方法来定义</p><p>比如说 ChangeAddress，就定义一个 ChangeAddress 的方法，把新的地址传进来，由领域模型负责赋值</p><p>这里面就可以添加一些地址的校验，比如新的地址是否能够与旧的地址距离太远</p><p>看一下地址的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">:</span> ValueObject<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Street <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> ZipCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span><span class="token keyword">string</span> street<span class="token punctuation">,</span> <span class="token keyword">string</span> city<span class="token punctuation">,</span> <span class="token keyword">string</span> zipcode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Street <span class="token operator">=</span> street<span class="token punctuation">;</span>        City <span class="token operator">=</span> city<span class="token punctuation">;</span>        ZipCode <span class="token operator">=</span> zipcode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span> <span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> Street<span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> City<span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> ZipCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能通过构造函数给值对象赋值，这里面需要注意的是重载了获取原子值的方法，使用了 yield return</p><p><strong>总结一下</strong></p><p>在定义领域模型的时候，首先领域模型的字段的修改应该设置为私有的</p><p>使用构造函数来表示对象的创建，它的初始值都是由构造函数的参数来赋值的</p><p>另外需要定义有业务含义的动作来操作模型的字段</p><p>领域模型只负责自己数据的处理，领域服务或者命令负责调用领域模型的业务动作</p><p>样就可以区分领域模型的内在逻辑和外在逻辑，使代码结构更加合理</p><h2 id="28-工作单元模式（UnitOfWork）：管理好你的事务"><a href="#28-工作单元模式（UnitOfWork）：管理好你的事务" class="headerlink" title="28 | 工作单元模式（UnitOfWork）：管理好你的事务"></a>28 | 工作单元模式（UnitOfWork）：管理好你的事务</h2><p>工作单元模式有如下几个特性：</p><ol><li><p>使用同一上下文</p></li><li><p>跟踪实体的状态</p></li><li><p>保障事务一致性</p></li></ol><p>我们对实体的操作，最终的状态都是应该如实保存到我们的存储中，进行持久化</p><p>接下来看一下代码</p><p>为了实现工作单元模式，这里定义了一个工作单元的接口</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUnitOfWork</span> <span class="token punctuation">:</span> IDisposable<span class="token punctuation">{</span>    Task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">SaveEntitiesAsync</span><span class="token punctuation">(</span>CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个方法的区别是：一个是返回的 int 是指我们影响的数据条数，另外一个返回 bool 表示我们保存是否成功，本质上这两个方法达到的效果是相同的</p><p>另外还定义了一个事务管理的接口</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITransaction</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前事务</span>    IDbContextTransaction <span class="token function">GetCurrentTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断当前事务是否开启</span>    <span class="token keyword">bool</span> HasActiveTransaction <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开启事务</span>    Task<span class="token operator">&lt;</span>IDbContextTransaction<span class="token operator">></span> <span class="token function">BeginTransactionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 提交事务</span>    Task <span class="token function">CommitTransactionAsync</span><span class="token punctuation">(</span>IDbContextTransaction transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 事务回滚</span>    <span class="token keyword">void</span> <span class="token function">RollbackTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实现上我们是借助 EF 来实现工作单元模式的</p><p>看一下 EFContext 的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// DbContext 是 EF 的基类，然后实现了 UnitOfWork 的接口和事务的接口</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EFContext</span> <span class="token punctuation">:</span> DbContext<span class="token punctuation">,</span> IUnitOfWork<span class="token punctuation">,</span> ITransaction<span class="token punctuation">{</span>    <span class="token keyword">protected</span> IMediator _mediator<span class="token punctuation">;</span>    ICapPublisher _capBus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后面的章节会详细讲到这两个参数</span>    <span class="token keyword">public</span> <span class="token function">EFContext</span><span class="token punctuation">(</span>DbContextOptions options<span class="token punctuation">,</span> IMediator mediator<span class="token punctuation">,</span> ICapPublisher capBus<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>        _capBus <span class="token operator">=</span> capBus<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> IUnitOfWork</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">SaveEntitiesAsync</span><span class="token punctuation">(</span>CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//await _mediator.DispatchDomainEventsAsync(this);</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//// 可以看到这个方法实际上与上面的方法是相同的，所以这个方法可以不实现</span>    <span class="token comment" spellcheck="true">//public override Task&lt;int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default)</span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);</span>    <span class="token comment" spellcheck="true">//}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> ITransaction</span>    <span class="token keyword">private</span> IDbContextTransaction _currentTransaction<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把当前的事务用一个字段存储</span>    <span class="token keyword">public</span> IDbContextTransaction <span class="token function">GetCurrentTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _currentTransaction<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取当前的事务就是返回存储的私有对象</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> HasActiveTransaction <span class="token operator">=</span><span class="token operator">></span> _currentTransaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 事务是否开启是判断当前这个事务是否为空</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 开启事务</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> Task<span class="token operator">&lt;</span>IDbContextTransaction<span class="token operator">></span> <span class="token function">BeginTransactionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_currentTransaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        _currentTransaction <span class="token operator">=</span> Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span>_capBus<span class="token punctuation">,</span> autoCommit<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>_currentTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 提交事务</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="transaction">当前事务&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">CommitTransactionAsync</span><span class="token punctuation">(</span>IDbContextTransaction transaction<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> _currentTransaction<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidOperationException</span><span class="token punctuation">(</span>$<span class="token string">"Transaction {transaction.TransactionId} is not current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将当前所有的变更都保存到数据库</span>            transaction<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span>        <span class="token punctuation">{</span>            <span class="token function">RollbackTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_currentTransaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 最终需要把当前事务进行释放，并且置为空</span>                <span class="token comment" spellcheck="true">// 这样就可以多次的开启事务和提交事务</span>                _currentTransaction<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                _currentTransaction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 回滚</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RollbackTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            _currentTransaction<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_currentTransaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                _currentTransaction<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                _currentTransaction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外一个我们还是需要关注的一点就是如何管理我们的事务</p><p>这里有一个类 TransactionBehavior，这个类是用来注入我们的事务的管理过程的，具体它是怎么工作的在后续的章节会讲到，这里先关注它的实现过程</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionBehavior</span><span class="token operator">&lt;</span>TDbContext<span class="token punctuation">,</span> TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span> <span class="token punctuation">:</span> IPipelineBehavior<span class="token operator">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span> <span class="token keyword">where</span> TDbContext <span class="token punctuation">:</span> EFContext<span class="token punctuation">{</span>    ILogger _logger<span class="token punctuation">;</span>    TDbContext _dbContext<span class="token punctuation">;</span>    ICapPublisher _capBus<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TransactionBehavior</span><span class="token punctuation">(</span>TDbContext dbContext<span class="token punctuation">,</span> ICapPublisher capBus<span class="token punctuation">,</span> ILogger logger<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _dbContext <span class="token operator">=</span> dbContext <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>dbContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _capBus <span class="token operator">=</span> capBus <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>capBus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _logger <span class="token operator">=</span> logger <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>TRequest request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">,</span> RequestHandlerDelegate<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>TResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> typeName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">GetGenericTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首先判断当前是否有开启事务</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_dbContext<span class="token punctuation">.</span>HasActiveTransaction<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 定义了一个数据库操作执行的策略，比如说可以在里面嵌入一些重试的逻辑，这里创建了一个默认的策略</span>            <span class="token keyword">var</span> strategy <span class="token operator">=</span> _dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">CreateExecutionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> strategy<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                Guid transactionId<span class="token punctuation">;</span>                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span><span class="token function">BeginTransactionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">using</span> <span class="token punctuation">(</span>_logger<span class="token punctuation">.</span><span class="token function">BeginScope</span><span class="token punctuation">(</span><span class="token string">"TransactionContext:{TransactionId}"</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>TransactionId<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"----- 开始事务 {TransactionId} ({@Command})"</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>TransactionId<span class="token punctuation">,</span> typeName<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>                    response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// next 实际上是指我们的后续操作，这里的模式有点像之前讲的中间件模式</span>                    _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"----- 提交事务 {TransactionId} {CommandName}"</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>TransactionId<span class="token punctuation">,</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span><span class="token function">CommitTransactionAsync</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>                    transactionId <span class="token operator">=</span> transaction<span class="token punctuation">.</span>TransactionId<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> response<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">"处理事务出错 {CommandName} ({@Command})"</span><span class="token punctuation">,</span> typeName<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回过头来看一下我们的 EFContext，EFContext 实现 IUnitOfWork，工作单元模式的核心，它实现了事务的管理和工作单元模式，我们就可以借助 EFContext 来实现我们的仓储层</p><h2 id="29-定义仓储：使用EF-Core实现仓储层"><a href="#29-定义仓储：使用EF-Core实现仓储层" class="headerlink" title="29 | 定义仓储：使用EF Core实现仓储层"></a>29 | 定义仓储：使用EF Core实现仓储层</h2><p>首先定义仓储层的接口，以及仓储层实现的基类，抽象类</p><p>仓储层的接口</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>Core<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 包含普通实体的仓储</span>    <span class="token comment" spellcheck="true">/// 约束 TEntity 必须是继承 Entity 的基类，必须实现聚合根 IAggregateRoot</span>    <span class="token comment" spellcheck="true">/// 也就是说仓储里面存储的对象必须是一个聚合根对象</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TEntity">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRepository</span><span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token keyword">where</span> TEntity <span class="token punctuation">:</span> Entity<span class="token punctuation">,</span> IAggregateRoot    <span class="token punctuation">{</span>        IUnitOfWork UnitOfWork <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        TEntity <span class="token function">Add</span><span class="token punctuation">(</span>TEntity entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        Task<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token function">AddAsync</span><span class="token punctuation">(</span>TEntity entity<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TEntity <span class="token function">Update</span><span class="token punctuation">(</span>TEntity entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        Task<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token function">UpdateAsync</span><span class="token punctuation">(</span>TEntity entity<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token function">Remove</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 由于没有指定主键，只能根据当前实体进行删除操作</span>        Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">RemoveAsync</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 包含指定主键的类型的实体的仓储</span>    <span class="token comment" spellcheck="true">/// 继承了上面的接口 IRepository&lt;TEntity>，也就是说拥有了上面定义的所有方法</span>    <span class="token comment" spellcheck="true">/// 另外一个，它实现了几个跟 Id 相关的操作的方法</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TEntity">&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TKey">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRepository</span><span class="token operator">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token operator">></span> <span class="token punctuation">:</span> IRepository<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token keyword">where</span> TEntity <span class="token punctuation">:</span> Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span><span class="token punctuation">,</span> IAggregateRoot    <span class="token punctuation">{</span>        <span class="token keyword">bool</span> <span class="token function">Delete</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">)</span><span class="token punctuation">;</span>        Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">DeleteAsync</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TEntity <span class="token function">Get</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">)</span><span class="token punctuation">;</span>        Task<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体抽象类的实现</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>Core<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 定义普通实体的仓储</span>    <span class="token comment" spellcheck="true">/// 定义约束 TDbContext 必须是 EFContext，也就是仓储必须依赖于 EFContext 及其子类</span>    <span class="token comment" spellcheck="true">/// 将来就可以把自己定义的比如 DomainContext 作为泛型参数传入 Repository，就可以很快捷地定义出来自己的仓储</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TEntity">&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TDbContext">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>TEntity<span class="token punctuation">,</span> TDbContext<span class="token operator">></span> <span class="token punctuation">:</span> IRepository<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token keyword">where</span> TEntity <span class="token punctuation">:</span> Entity<span class="token punctuation">,</span> IAggregateRoot <span class="token keyword">where</span> TDbContext <span class="token punctuation">:</span> EFContext    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体实现需要依赖 DbContext</span>        <span class="token keyword">protected</span> <span class="token keyword">virtual</span> TDbContext DbContext <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Repository</span><span class="token punctuation">(</span>TDbContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>DbContext <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> IUnitOfWork UnitOfWork <span class="token operator">=</span><span class="token operator">></span> DbContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为 DbContext， EFContext 实际上实现了 IUnitOfWork，所以直接返回</span>        <span class="token comment" spellcheck="true">// 下面这些方法都是 EntityFramework 提供的能力，所以就能通过简单的几行代码来实现基本的仓储操作</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> TEntity <span class="token function">Add</span><span class="token punctuation">(</span>TEntity entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> DbContext<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">.</span>Entity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> Task<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token function">AddAsync</span><span class="token punctuation">(</span>TEntity entity<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token function">Add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> TEntity <span class="token function">Update</span><span class="token punctuation">(</span>TEntity entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> DbContext<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">.</span>Entity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> Task<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token function">UpdateAsync</span><span class="token punctuation">(</span>TEntity entity<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token function">Update</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Remove</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DbContext<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">RemoveAsync</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token function">Remove</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 定义主键的实体的仓储</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TEntity">&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TKey">&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TDbContext">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TDbContext<span class="token operator">></span> <span class="token punctuation">:</span> Repository<span class="token operator">&lt;</span>TEntity<span class="token punctuation">,</span> TDbContext<span class="token operator">></span><span class="token punctuation">,</span> IRepository<span class="token operator">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token operator">></span> <span class="token keyword">where</span> TEntity <span class="token punctuation">:</span> Entity<span class="token operator">&lt;</span>TKey<span class="token operator">></span><span class="token punctuation">,</span> IAggregateRoot <span class="token keyword">where</span> TDbContext <span class="token punctuation">:</span> EFContext    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Repository</span><span class="token punctuation">(</span>TDbContext context<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 根据 Id 从 DbContext 获取 Entity，然后再 Remove</span>        <span class="token comment" spellcheck="true">/// 这样的好处是可以跟踪对象的状态</span>        <span class="token comment" spellcheck="true">/// 坏处是任意的删除都需要先去数据库里面做查询</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="id">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Delete</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> entity <span class="token operator">=</span> DbContext<span class="token punctuation">.</span><span class="token generic-method function">Find<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            DbContext<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">DeleteAsync</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> entity <span class="token operator">=</span> <span class="token keyword">await</span> DbContext<span class="token punctuation">.</span><span class="token generic-method function">FindAsync<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            DbContext<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> TEntity <span class="token function">Get</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> DbContext<span class="token punctuation">.</span><span class="token generic-method function">Find<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>TEntity<span class="token operator">></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span>TKey id<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">await</span> DbContext<span class="token punctuation">.</span><span class="token generic-method function">FindAsync<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现自己的 DbContext</p><p>DomainContext</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DomainContext</span> <span class="token punctuation">:</span> EFContext    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">DomainContext</span><span class="token punctuation">(</span>DbContextOptions options<span class="token punctuation">,</span> IMediator mediator<span class="token punctuation">,</span> ICapPublisher capBus<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> mediator<span class="token punctuation">,</span> capBus<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Order<span class="token operator">></span> Orders <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>User<span class="token operator">></span> Users <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>ModelBuilder modelBuilder<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 注册领域模型与数据库的映射关系</span>            modelBuilder<span class="token punctuation">.</span><span class="token function">ApplyConfiguration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderEntityTypeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            modelBuilder<span class="token punctuation">.</span><span class="token function">ApplyConfiguration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntityTypeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnModelCreating</span><span class="token punctuation">(</span>modelBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射关系，针对每一个领域模型创建一个 EntityTypeConfiguration</p><p>OrderEntityTypeConfiguration</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>EntityConfigurations<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">OrderEntityTypeConfiguration</span> <span class="token punctuation">:</span> IEntityTypeConfiguration<span class="token operator">&lt;</span>Order<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>Order<span class="token operator">></span> builder<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 定义主键</span>            builder<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//builder.ToTable("order");</span>            <span class="token comment" spellcheck="true">//builder.Property(p => p.UserId).HasMaxLength(20);</span>            <span class="token comment" spellcheck="true">//builder.Property(p => p.UserName).HasMaxLength(30);</span>            <span class="token comment" spellcheck="true">// 定义导航属性</span>            builder<span class="token punctuation">.</span><span class="token function">OwnsOne</span><span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">></span> o<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> a <span class="token operator">=</span><span class="token operator">></span>                <span class="token punctuation">{</span>                    a<span class="token punctuation">.</span><span class="token function">WithOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//a.Property(p => p.City).HasMaxLength(20);</span>                    <span class="token comment" spellcheck="true">//a.Property(p => p.Street).HasMaxLength(50);</span>                    <span class="token comment" spellcheck="true">//a.Property(p => p.ZipCode).HasMaxLength(10);</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserEntityTypeConfiguration</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>EntityConfigurations<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">UserEntityTypeConfiguration</span> <span class="token punctuation">:</span> IEntityTypeConfiguration<span class="token operator">&lt;</span>User<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>User<span class="token operator">></span> builder<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事务处理</p><p>要实现对 DomainContext 的事务处理的话，仅仅需要创建一个类 DomainContextTransactionBehavior</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DomainContextTransactionBehavior</span><span class="token operator">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span> <span class="token punctuation">:</span> TransactionBehavior<span class="token operator">&lt;</span>DomainContext<span class="token punctuation">,</span> TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">DomainContextTransactionBehavior</span><span class="token punctuation">(</span>DomainContext dbContext<span class="token punctuation">,</span> ICapPublisher capBus<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>DomainContextTransactionBehavior<span class="token operator">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span><span class="token operator">></span> logger<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>dbContext<span class="token punctuation">,</span> capBus<span class="token punctuation">,</span> logger<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了演示效果，在应用程序启动时，添加一行代码</p><p>Startup</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 这一行代码的作用是创建一个 Scope，在这个范围内创建 DomainContext</span><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> dc <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>DomainContext<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 确定数据库已经创建，如果数据库没有创建，这个时候会执行数据库的自动创建过程，根据模型创建数据库</span>    dc<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库的注册部分</p><p>ServiceCollectionExtensions</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 这个定义就是将连接字符串配置到 dDomainContext</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="services">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;param name="connectionString">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddMySqlDomainContext</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span> <span class="token keyword">string</span> connectionString<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> services<span class="token punctuation">.</span><span class="token function">AddDomainContext</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">UseMySql</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一行代码的调用位置是在 ConfigureServices 里面</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 从配置中获取字符串</span>services<span class="token punctuation">.</span><span class="token function">AddMySqlDomainContext</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token generic-method function">GetValue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"Mysql"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，运行过程中 EF 框架会根据定义的实体映射关系生成数据库，可在 Mysql 数据库中查看生成结果</p><p>接着丰富一下 Order 的映射关系</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>EntityConfigurations<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">OrderEntityTypeConfiguration</span> <span class="token punctuation">:</span> IEntityTypeConfiguration<span class="token operator">&lt;</span>Order<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>Order<span class="token operator">></span> builder<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 定义主键</span>            builder<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改表名为 order，不带 s</span>            builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>UserId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改字段长度</span>            builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 定义导航属性</span>            <span class="token comment" spellcheck="true">// OwnsOne 的方式可以将 Address 这个值类型作为同一个表的字段来设置</span>            builder<span class="token punctuation">.</span><span class="token function">OwnsOne</span><span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">></span> o<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> a <span class="token operator">=</span><span class="token operator">></span>                <span class="token punctuation">{</span>                    a<span class="token punctuation">.</span><span class="token function">WithOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    a<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>City<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    a<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>Street<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    a<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>ZipCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，可以看到数据库修改结果</p><p>这说明可以在仓储层定义领域模型与数据库的映射关系，这个映射关系可以组织为一个目录，为每一个领域模型设置一个类型来定义，并且这个过程是强类型的，这样的结构，便于后期维护</p><p>另外仓储层的话，定义了一个 IOrderRepository，仅仅实现了 IRepository 泛型接口，引进 Order，由于 Order 实际上有一个主键是 long，所以这里把主键类型也传给 IRepository</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>Repositories<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrderRepository</span> <span class="token punctuation">:</span> IRepository<span class="token operator">&lt;</span>Order<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">></span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Order</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">:</span> Entity<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">,</span> IAggregateRoot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样子，Order 的仓储就定义完毕</p><p>那么 Order 仓储的实现也非常简单，仅仅需要继承 Repository，把 Order，long，DomainContext 传入泛型 Repository 即可，这里还实现了 IOrderRepository</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>Repositories<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderRepository</span> <span class="token punctuation">:</span> Repository<span class="token operator">&lt;</span>Order<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> DomainContext<span class="token operator">></span><span class="token punctuation">,</span> IOrderRepository    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">OrderRepository</span><span class="token punctuation">(</span>DomainContext context<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这样简单的继承，可以复用之前定义的代码，快速实现仓储层的定义</p><p>可以通过代码提升看到仓储层是有 Add，Update，Remove，Delete 方法，还有 UnitOfWork 的属性</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200322001730753-633009317.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200322001738276-1845895458.png" alt=""></p><p>这样一来就完成了仓储层的定义，可以看到仓储层的代码非常的薄，仅仅包含了一些接口的定义和类的继承，需要自定义一些方法的时候，可以在仓储层定义一些特殊方法，比如 AddABC 等特殊的逻辑都可以在这里去实现</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>Repositories<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderRepository</span> <span class="token punctuation">:</span> Repository<span class="token operator">&lt;</span>Order<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> DomainContext<span class="token operator">></span><span class="token punctuation">,</span> IOrderRepository    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">OrderRepository</span><span class="token punctuation">(</span>DomainContext context<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddABC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外一个在组织领域模型和数据库的关系的时候，可以很清晰的看到，是在 EntityConfiguration 这个目录下面，为每一个模型定义一个映射类，当领域模型越来越复杂，数据库的结构越来越复杂的时候，这样的组织结构会非常的清晰</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200322001752157-1564773848.png" alt=""></p><h2 id="30-领域事件：提升业务内聚，实现模块解耦"><a href="#30-领域事件：提升业务内聚，实现模块解耦" class="headerlink" title="30 | 领域事件：提升业务内聚，实现模块解耦"></a>30 | 领域事件：提升业务内聚，实现模块解耦</h2><p>我们在领域的抽象层定义了领域事件和领域事件处理的接口</p><p>IDomainEvent</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEvent</span> <span class="token punctuation">:</span> INotification    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个空接口，它只是标记出来某一个对象是否是领域事件，INotification 也是一个空接口，它是 MediatR 框架的一个接口，是用来实现事件传递用的</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> MediatR<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INotification</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着是 IDomainEventHandler</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEventHandler</span><span class="token operator">&lt;</span>TDomainEvent<span class="token operator">></span> <span class="token punctuation">:</span> INotificationHandler<span class="token operator">&lt;</span>TDomainEvent<span class="token operator">></span>         <span class="token keyword">where</span> TDomainEvent <span class="token punctuation">:</span> IDomainEvent    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里我们使用了INotificationHandler的Handle方法来作为处理方法的定义</span>        <span class="token comment" spellcheck="true">//Task Handle(TDomainEvent domainEvent, CancellationToken cancellationToken);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样这个接口也是继承了 IDomainEventHandler 接口，它有一个泛型参数是 TDomainEvent，这个 TDomainEvent 约束必须为 IDomainEvent，也就是说处理程序只处理 IDomainEvent 作为入参</p><p>实际上该方法已经在 INotificationHandler 中定义好了，所以这里不需要重新定义，只是告诉大家它的定义是什么样子的</p><p>在 Entity 中对领域事件代码的处理</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>IDomainEvent<span class="token operator">></span> _domainEvents<span class="token punctuation">;</span><span class="token keyword">public</span> IReadOnlyCollection<span class="token operator">&lt;</span>IDomainEvent<span class="token operator">></span> DomainEvents <span class="token operator">=</span><span class="token operator">></span> _domainEvents<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">AsReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddDomainEvent</span><span class="token punctuation">(</span>IDomainEvent eventItem<span class="token punctuation">)</span><span class="token punctuation">{</span>    _domainEvents <span class="token operator">=</span> _domainEvents <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>IDomainEvent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _domainEvents<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>eventItem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveDomainEvent</span><span class="token punctuation">(</span>IDomainEvent eventItem<span class="token punctuation">)</span><span class="token punctuation">{</span>    _domainEvents<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>eventItem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ClearDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    _domainEvents<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将领域事件做一个实体的属性存储进来，它应该是一个列表，因为在一个实体操作过程中间可能会发生多件事情，领域事件应该是可以被实体模型之外的代码读到，所以暴露一个 ReadOnly 的 Collection</p><p>这里还提供几个方法：添加领域事件，移除领域事件，清除领域事件</p><p>这些方法都是在领域模型内部进行调用的</p><p>可以看一下之前定义的 Order</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token keyword">string</span> userId<span class="token punctuation">,</span> <span class="token keyword">string</span> userName<span class="token punctuation">,</span> <span class="token keyword">int</span> itemCount<span class="token punctuation">,</span> Address address<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>UserId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>UserName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>Address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ItemCount <span class="token operator">=</span> itemCount<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AddDomainEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderCreatedDomainEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ChangeAddress</span><span class="token punctuation">(</span>Address address<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>Address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//this.AddDomainEvent(new OrderAddressChangedDomainEvent(this));</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们构造一个全新的 Order 的时候，实际上这里可以定义一个事件叫做 OrderCreatedDomainEvent，这个领域事件它的构造函数的入参就是一个 Order，当我们调用 Order 的构造函数时，实际上我们的行为就是在创建一个全新的 Order，所以在这里添加一个事件 AddDomainEvent</p><p>同理的比如说 ChangeAddress 被调用了，我们在这里实际上可以定义一个 OrderAddressChangedDomainEvent 类似这样子的领域事件出来</p><p>大家可以看到领域事件的构造和添加都应该是在领域模型的方法内完成的，而不应该是被外界的代码去调用创建，因为这些事件都是领域模型内部发生的事件</p><p>接着看看 OrderCreatedDomainEvent 的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Events<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedDomainEvent</span> <span class="token punctuation">:</span> IDomainEvent    <span class="token punctuation">{</span>        <span class="token keyword">public</span> Order Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">OrderCreatedDomainEvent</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">=</span> order<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们如何处理我们的领域事件，接收领域事件的处理应该定义在应用层</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>DomainEventHandlers<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedDomainEventHandler</span> <span class="token punctuation">:</span> IDomainEventHandler<span class="token operator">&lt;</span>OrderCreatedDomainEvent<span class="token operator">></span>    <span class="token punctuation">{</span>        ICapPublisher _capPublisher<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OrderCreatedDomainEventHandler</span><span class="token punctuation">(</span>ICapPublisher capPublisher<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _capPublisher <span class="token operator">=</span> capPublisher<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">Handle</span><span class="token punctuation">(</span>OrderCreatedDomainEvent notification<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> _capPublisher<span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span><span class="token string">"OrderCreated"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OrderCreatedIntegrationEvent</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它继承了 IDomainEventHandler，这个接口是上面讲到的领域事件处理器的接口，它的泛型入参就是要处理的事件的类型 OrderCreatedDomainEvent</p><p>为了简单演示起见，这里的逻辑是当我们创建一个新的订单时，我们向 EventBus 发布一条事件，叫做 OrderCreated 这个事件</p><p>我们在 OrderController 的 CreateOrder 定义了一个 CreateOrderCommand</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">CreateOrder</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span>CreateOrderCommand cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> HttpContext<span class="token punctuation">.</span>RequestAborted<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CreateOrderCommand</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>Commands<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateOrderCommand</span> <span class="token punctuation">:</span> IRequest<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ublic CreateOrderCommand() { }</span>        <span class="token keyword">public</span> <span class="token function">CreateOrderCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> itemCount<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ItemCount <span class="token operator">=</span> itemCount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> ItemCount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CreateOrderCommandHandler</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>CreateOrderCommand request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"wen san lu"</span><span class="token punctuation">,</span> <span class="token string">"hangzhou"</span><span class="token punctuation">,</span> <span class="token string">"310000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"xiaohong1999"</span><span class="token punctuation">,</span> <span class="token string">"xiaohong"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>    _orderRepository<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> _orderRepository<span class="token punctuation">.</span>UnitOfWork<span class="token punctuation">.</span><span class="token function">SaveEntitiesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> order<span class="token punctuation">.</span>Id<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在 CreateOrderCommandHandler 里面创建了一个 Order，然后保存进仓储，调用了 UnitOfWork 的 SaveEntitiesAsync</p><p>启动程序，直接执行，调用我们的方法，可以看到我们先进入到了创建订单的处理系统（CreateOrderCommandHandler），接着进入到了领域事件发布的 Publish 的代码（MediatorExtension），当仓储存储完毕之后，进入到了 OrderCreatedDomainEventHandler，也就是说我们在创建完我们的领域模型并将其保存之后，我们的领域事件的处理程序才触发</p><p>在之前讲解实现 UnitOfWork 的时候（EFContext），我们的 SaveEntitiesAsync 里面只有一行代码是 SaveChangesAsync，这里添加了一行代码，是发送领域事件的代码 DispatchDomainEventsAsync</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">SaveEntitiesAsync</span><span class="token punctuation">(</span>CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//await _mediator.DispatchDomainEventsAsync(this);</span>    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是 MediatorExtension 中看到的 DispatchDomainEventsAsync</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>Core<span class="token punctuation">.</span>Extensions<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MediatorExtension</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">DispatchDomainEventsAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> IMediator mediator<span class="token punctuation">,</span> DbContext ctx<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> domainEntities <span class="token operator">=</span> ctx<span class="token punctuation">.</span>ChangeTracker                <span class="token punctuation">.</span><span class="token generic-method function">Entries<span class="token punctuation">&lt;</span>Entity<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span>DomainEvents <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span>DomainEvents<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> domainEvents <span class="token operator">=</span> domainEntities                <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span>DomainEvents<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            domainEntities<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>entity <span class="token operator">=</span><span class="token operator">></span> entity<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span><span class="token function">ClearDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> domainEvent <span class="token keyword">in</span> domainEvents<span class="token punctuation">)</span>                <span class="token keyword">await</span> mediator<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家可以看到我们发送领域事件实际上是这么一个过程：我们从当前要保存的 EntityContext 里面去跟踪我们的实体，然后从跟踪到的实体的对象中获取到我们当前的 Event，如果 Event 是存在的，就把它取出来，然后将实体内的 Event 进行清除，再然后将这些 Event 逐条地通过中间件发送出去，并且找到对应的 Handler 处理</p><p>定义领域事件实际上也非常简单，只需要在领域模型创建一个 Events 的目录，然后将领域事件都定义在这里，领域事件需要继承 IDomainEvent，领域事件的处理器都定义在 DomainEventHandler，在应用层这个目录下面，我们可以为每一个事件都定义我们的处理程序</p><p>总结一下</p><p>领域模型内创建事件：我们不要在领域模型的外面去构造事件，然后传递给领域模型，因为整个领域事件是由领域的业务逻辑触发的，而不是说外面的对模型的操作触发的</p><p>另外就是针对领域事件应该定义专有的领域事件处理类，就像我们刚才演示的，在一个特定的目录，对每一个事件进行定义处理类</p><p>还有一个就是在同一个事务里面去处理我们的领域事件，实际上我们也可以选择在不同的事务里面处理，如果需要在不同的事务里面去处理领域事件的时候，我们就需要考虑一致性的问题，考虑中间出错，消息丢失的问题</p><h2 id="31-APIController：定义API的最佳实践"><a href="#31-APIController：定义API的最佳实践" class="headerlink" title="31 | APIController：定义API的最佳实践"></a>31 | APIController：定义API的最佳实践</h2><p>首先看一个传统意义上三层架构定义的 Controller</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">CreateOrder</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span>CreateOrderVeiwModel viewModel<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> model <span class="token operator">=</span> viewModel<span class="token punctuation">.</span><span class="token function">ToModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> orderService<span class="token punctuation">.</span><span class="token function">CreateOrder</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">:</span> IOrderService<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">CreateOrder</span><span class="token punctuation">(</span>CreateOrderModel model<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"wen san lu"</span><span class="token punctuation">,</span> <span class="token string">"hangzhou"</span><span class="token punctuation">,</span> <span class="token string">"310000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"xiaohong1999"</span><span class="token punctuation">,</span> <span class="token string">"xiaohong"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>        _orderRepository<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> _orderRepository<span class="token punctuation">.</span>UnitOfWork<span class="token punctuation">.</span><span class="token function">SaveEntitiesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> order<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里的 Controller 负责模型转换，还负责服务调用，服务里面实际上就是领域模型的操作部分</p><p>随着业务逻辑的越来越复杂，Controller 会越来越膨胀，在 DDD 领域驱动设计的理念下，我们更倾向于把应用程序的每一层明确区分，然后层与层之间的界限应该是明确的，在实现上面应该也是隔离的</p><p>Controller 这一层负责与前端用户的交互，它主要的责任就是定义输入和输出，实现身份认证，授权功能，它不应该处理领域模型，处理仓储，所以不建议以上的写法，不建议在 Controller 里面写模型转换和服务调用</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Controllers<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"api/[controller]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span>ApiController<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">:</span> ControllerBase    <span class="token punctuation">{</span>        IMediator _mediator<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OrderController</span><span class="token punctuation">(</span>IMediator mediator<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">CreateOrder</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span>CreateOrderCommand cmd<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> HttpContext<span class="token punctuation">.</span>RequestAborted<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">QueryOrder</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span>MyOrderQuery myOrderQuery<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>myOrderQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了中间者模式 Mediator，它通过把命令发送出去，然后我们在 Commands 目录下面定义了每一个命令的 handler，这样就可以将业务逻辑的部分和 Controller 处理的部分，输入输出定义的部分进行隔离，我们的 Controller 还需要去定义路由的规则，路由验证的规则</p><p>再看一下 Controller 的构造函数，从设计上建议 Controller 所依赖的服务都通过它的构造函数注入进来，之前有讲过，通过容器进行属性注入的方式，但这种方式我们并不推荐使用，当一个 Controller 依赖了很多服务的时候，可以发现有一部分服务是大部分的 Action 都会依赖到的，有一部分服务只是个别 Action 依赖到的，这个时候就可以使用 FromServices，而不需要在构造函数里面注入它，这样有个好处是在编写单元测试的时候，可以在容器里面 Mock 所有的服务</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">CreateOrder</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span> IEventBus eventBus<span class="token punctuation">,</span> <span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span>CreateOrderCommand cmd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里不建议使用属性注入的方式来注入服务，是因为使用属性注入的时候，会把这些属性，比如说 IOrderService，有可能由其他代码 set 我们的 OrderService，造成意外的情况，使我们的代码的维护不可控</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> IOrderService orderService <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一个关键的点是建议尽可能定义异步的 action，尽可能地使用 async 和 await 这样的组合来实现我们的代码，这样对提高我们应用程序的吞吐量是有一定的帮助的</p><p><strong>总结一下</strong></p><p>APIController 实际上是负责了对前端用户的输入输出的定义，它还负责了身份验证，授权，Url 定义的部分</p><p>APIController 不应该负责业务逻辑的承载，应该把这些职责交给我们命令处理程序或者说领域服务来定义</p><p>再一个我们也讲解了 APIController 在注入服务时的一些方法，通过构造函数的注入，通过 FromServices 的方式获取服务，不建议的做法时使用属性注入的方式注入</p><h2 id="32-集成事件：解决跨微服务的最终一致性"><a href="#32-集成事件：解决跨微服务的最终一致性" class="headerlink" title="32 | 集成事件：解决跨微服务的最终一致性"></a>32 | 集成事件：解决跨微服务的最终一致性</h2><p>首先看一下集成事件的工作原理</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200326001626117-1275463266.png" alt=""></p><p>它的目的时为了实现系统的集成，它主要是用于系统里面多个微服务之间相互传递事件</p><p>集成事件的实现方式有两种，一种是图上显示的发布订阅的方式，通过 EventBus，还有一种方式是通过观察者模式，由观察者将事件发送给关注事件的人</p><p>接着看一下代码上的定义</p><p>在 Application 目录下面定义了一个集成事件的目录 IntegrationEvents</p><p>OrderCreatedIntegrationEvent</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>IntegrationEvents<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedIntegrationEvent</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">OrderCreatedIntegrationEvent</span><span class="token punctuation">(</span><span class="token keyword">long</span> orderId<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> OrderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得益于基础设施的发展，现在实际上可以借助一些开源框架，很轻松的实现集成事件的发布和订阅的能力</p><p>在发布端可以看一下这里的代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>DomainEventHandlers<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedDomainEventHandler</span> <span class="token punctuation">:</span> IDomainEventHandler<span class="token operator">&lt;</span>OrderCreatedDomainEvent<span class="token operator">></span>    <span class="token punctuation">{</span>        ICapPublisher _capPublisher<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OrderCreatedDomainEventHandler</span><span class="token punctuation">(</span>ICapPublisher capPublisher<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _capPublisher <span class="token operator">=</span> capPublisher<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">Handle</span><span class="token punctuation">(</span>OrderCreatedDomainEvent notification<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> _capPublisher<span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span><span class="token string">"OrderCreated"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OrderCreatedIntegrationEvent</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们定义了一个领域事件，它的作用就是将我们的集成事件发送出去，具体是要发送到 RabbitMQ 还是 kafka 这些消息队列中间件里面是可配置的，对于业务逻辑来讲的话，它是透明的</p><p>这里有一个 ICapPublisher 接口，这个接口实际上是由中国的开源社区开发的一个框架，借助这个框架，我们可以轻松的实现消息的发布和订阅</p><p>那我们如何来订阅其他微服务发出的消息呢？</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>IntegrationEvents<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubscriberService</span> <span class="token punctuation">:</span> ISubscriberService<span class="token punctuation">,</span> ICapSubscribe    <span class="token punctuation">{</span>        IMediator _mediator<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SubscriberService</span><span class="token punctuation">(</span>IMediator mediator<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token function">CapSubscribe</span><span class="token punctuation">(</span><span class="token string">"OrderPaymentSucceeded"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OrderPaymentSucceeded</span><span class="token punctuation">(</span>OrderPaymentSucceededIntegrationEvent @<span class="token keyword">event</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Do SomeThing</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token function">CapSubscribe</span><span class="token punctuation">(</span><span class="token string">"OrderCreated"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OrderCreated</span><span class="token punctuation">(</span>OrderCreatedIntegrationEvent @<span class="token keyword">event</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Do SomeThing</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过订阅服务，它同样也是借助了 Cap 的组件，我们实现了 ICapPublisher 这个接口，就可以将服务标记成我们的订阅服务</p><p>另外我们的订阅方法，订阅的处理函数上面，标记 CapSubscribe 这个属性，将我们要订阅的事件名放在这里，我们就可以订阅到这个事件了</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>IntegrationEvents<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPaymentSucceededIntegrationEvent</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">OrderPaymentSucceededIntegrationEvent</span><span class="token punctuation">(</span><span class="token keyword">long</span> orderId<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> OrderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到集成事件定义的话，它是没有接口和基类的约束的，因为在异构的系统里面，对于集成事件来讲的定义是相对比较灵活的，我们的建议是用这种简单的类型来承载它即可</p><p><strong>总结一下</strong></p><p>集成事件实际上也是由领域的业务逻辑驱动的，它本质上也是领域事件，只是说它是跨服务的领域事件</p><p>另外一个集成事件大部分场景是领域事件驱动的，也有可能是一些比如说定时任务触发的，由于集成事件是跨微服务来传递信息的，所以我们没办法通过事务来处理，那就需要借助 Cap 这样的框架来实现最终的一致性</p><p>当然我们建议仅在必要的情况下定义和使用集成事件，因为一旦引入集成事件，比如 EventBus，我们应用程序的版本控制，比如说我们发布新版本的时候，新旧版本的事件的发布和订阅都会受到影响，这个时候我们没办法使我们的应用程序成为一个单纯的无状态的程序，在更新新版本的时候，那么就会带来新的负担，兼容性方面我们会需要做更多的工作</p><h2 id="33-集成事件：使用RabbitMQ来实现EventBus"><a href="#33-集成事件：使用RabbitMQ来实现EventBus" class="headerlink" title="33 | 集成事件：使用RabbitMQ来实现EventBus"></a>33 | 集成事件：使用RabbitMQ来实现EventBus</h2><p>这一节我们来讲解如何通过 CAP 组件和 RabbitMQ 来实现 EventBus</p><p>要实现 EventBus，我们这里借助了 RabbitMQ，它的整个安装和使用的体验是非常人性化的，如果是在 Windows 下开发的话，它可以有 Windows 的 installer，也可以在其它的操作系统下安装和使用，当然它也支持 Docker 的模式，我们可以在以下的地址获取到安装包和安装方法的说明</p><p><a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">https://www.rabbitmq.com/download.html</a></p><p>另一个就是在 .NET Core 社区比较知名的 CAP 框架，这个框架是由我们国人开发的，它实现了开箱即用的 EventBus 的实现，我们可以通过简单的配置，就能把 RabbitMQ 集成进来，并且实现我们的集成事件的处理</p><p><a href="https://github.com/dotnetcore/CAP" target="_blank" rel="noopener">https://github.com/dotnetcore/CAP</a></p><p>我们来看一下 CAP 框架的实现架构</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200327003016423-1571983673.png" alt=""></p><p>它实际上实现了一个叫 OutBox 的设计模式，就是在我们的每个微服务，比如说微服务 A 的数据库 A，在这个数据库内部它建立了两张表，一张叫 publish 事件表和一张叫 receiver 事件表，这两张事件表用来记录微服务 A 发出的和微服务 A 收到的事件</p><p>当我们要发出事件时，我们会把事件的存储逻辑与我们的业务逻辑的事务合并，在同一个事务里提交，也就意味着当我们的业务逻辑提交成功时，我们的事件表里面的事件是一定存在的，它是与我们的业务逻辑的事务是强绑定的</p><p>如果说我们的业务逻辑失败了，事务回滚了，这条事件是不会出现在我们的事件表里的，这样子就可以做到说我们要发送的事件一定是与业务逻辑是一致的</p><p>接下来由我们组件来负责将事件表里的事件全部都发送到 EventBus，比如说 RabbitMQ 消息队列里面去，由接收方订阅</p><p>对于订阅的事件的话，设计的模式也是同理，当我们的应用程序在消息队列获取到信息的时候，它就会将这些消息持久化到我们的数据库的 Receive 事件表里，这样我们就可以在本地进行事件的处理，失败重试等操作，这些都是由 CAP 框架完成的，我们仅需要去做简单的配置，关注发布和订阅的业务逻辑即可</p><p>我们看一下代码，刚才有提到 CAP 的架构，关键的一点是需要事件的存储与我们的业务逻辑在同一个事务里，所以说我们在处理事务的逻辑部分的话，需要嵌入 CAP 的一部分代码，我们看一下 EFContext 的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">EFContext</span><span class="token punctuation">(</span>DbContextOptions options<span class="token punctuation">,</span> IMediator mediator<span class="token punctuation">,</span> ICapPublisher capBus<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>    _mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    _capBus <span class="token operator">=</span> capBus<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前有关注到有一个叫 ICapPublisher 这个入参，关键的是这一行代码我们需要关注一下</p><pre class="line-numbers language-csharp"><code class="language-csharp">_currentTransaction <span class="token operator">=</span> Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span>_capBus<span class="token punctuation">,</span> autoCommit<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一行代码的作用是创建事务，我们可以看到创建事务的过程中，我们把 ICapPublisher 也传入给了这个方法的构造函数，实际上这个方法是由 CAP 的组件提供的，它的核心作用就是将我们要发送的事件与我们的业务的存储都放在同一个事务内部，这样子我们就可以使得事务提交时或者回滚时，我们的事件与业务逻辑的存取都是一致的</p><p>然后我们再来看一下配置的部分，写在 ServiceCollectionExtensions 下面</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddEventBus</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span> IConfiguration configuration<span class="token punctuation">)</span><span class="token punctuation">{</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddTransient<span class="token punctuation">&lt;</span>ISubscriberService<span class="token punctuation">,</span> SubscriberService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token function">AddCap</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        options<span class="token punctuation">.</span><span class="token generic-method function">UseEntityFramework<span class="token punctuation">&lt;</span>DomainContext<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span><span class="token function">UseRabbitMQ</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"RabbitMQ"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//options.UseDashboard();</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> services<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们这里定义了一个 AddEventBus，可以看到将我们之前演示的代码订阅服务注入进来，然后 Services 最重点的代码是 AddCap，我们需要告诉 CAP 框架我们是针对 DomainContext 来实现我们的 EventBus，EventBus 与 DomainContext 共享我们的数据库连接，下面一行代码是指我们要用 RabbitMQ 来作为我们 EventBus 的消息队列的存储，这里可以看到使用了一个 Bind 的方法将我们的配置绑定到 RabbitMQ 的 options 上面去</p><p>我们可以看一下我们的配置</p><pre class="line-numbers language-csharp"><code class="language-csharp">  <span class="token string">"RabbitMQ"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"HostName"</span><span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    <span class="token string">"UserName"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>    <span class="token string">"Password"</span><span class="token punctuation">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>    <span class="token string">"VirtualHost"</span><span class="token punctuation">:</span> <span class="token string">"geektime"</span><span class="token punctuation">,</span>    <span class="token string">"ExchangeName"</span><span class="token punctuation">:</span> <span class="token string">"geek_queue"</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看到我们定义了一个 RabbitMQ 的配置，然后这里面会有我们的 host，因为是本地安装的，所以访问地址就是 localhost，VirtualHost 是 RabbitMQ 一个比较特殊的设置，它的作用是将 RabbitMQ 的空间区分为不同的空间，你可以认为这是一个租户，相同的 VirtualHost，大家都可以认为是一个 RabbitMQ 的集群，最下面的 ExchangeName 就是队列需要订阅的 Exchange 的名称，消息的发布和订阅都是通过这个 Exchange 来的</p><p>然后我们在 Startup 这里添加一行</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddEventBus</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样我们就配置完成了</p><h2 id="33-集成事件：使用RabbitMQ来实现EventBus-1"><a href="#33-集成事件：使用RabbitMQ来实现EventBus-1" class="headerlink" title="33 | 集成事件：使用RabbitMQ来实现EventBus"></a>33 | 集成事件：使用RabbitMQ来实现EventBus</h2><p>为了演示我们的发布和订阅的话，我们在这里的代码做一些稍微的调整</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>DomainEventHandlers<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedDomainEventHandler</span> <span class="token punctuation">:</span> IDomainEventHandler<span class="token operator">&lt;</span>OrderCreatedDomainEvent<span class="token operator">></span>    <span class="token punctuation">{</span>        ICapPublisher _capPublisher<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OrderCreatedDomainEventHandler</span><span class="token punctuation">(</span>ICapPublisher capPublisher<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _capPublisher <span class="token operator">=</span> capPublisher<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">Handle</span><span class="token punctuation">(</span>OrderCreatedDomainEvent notification<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> _capPublisher<span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span><span class="token string">"OrderCreated"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OrderCreatedIntegrationEvent</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们发布了一个 OrderCreated 的集成事件，然后订阅一个 OrderCreated</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>IntegrationEvents<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubscriberService</span> <span class="token punctuation">:</span> ISubscriberService<span class="token punctuation">,</span> ICapSubscribe    <span class="token punctuation">{</span>        IMediator _mediator<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SubscriberService</span><span class="token punctuation">(</span>IMediator mediator<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token function">CapSubscribe</span><span class="token punctuation">(</span><span class="token string">"OrderPaymentSucceeded"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OrderPaymentSucceeded</span><span class="token punctuation">(</span>OrderPaymentSucceededIntegrationEvent @<span class="token keyword">event</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Do SomeThing</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token function">CapSubscribe</span><span class="token punctuation">(</span><span class="token string">"OrderCreated"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OrderCreated</span><span class="token punctuation">(</span>OrderCreatedIntegrationEvent @<span class="token keyword">event</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Do SomeThing</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过标注属性，我们就可以完成订阅</p><p>也就是说我们创建一个订单的时，我们会触发订单创建的领域事件，订单创建的领域事件又发送了一个订单创建的集成事件，然后我们在订阅服务里面订阅了订单创建的集成事件</p><p>在发布和订阅的地方分别打上一个断点，启动程序，可以看到整个流程</p><p>我们再梳理一下整个流程，首先我们创建了一个订单，这个订单触发了我们的 OrderCreated 的领域事件，OrderCreated 的领域事件的处理器像我们的 EventBus 发布了一个 OrderCreated 的集成事件，我们在订阅服务的地方订阅了这个事件，所以我们可以接收到并且做出相应的处理</p><p>我们观察一下数据库的表，一共有四张表，cap.publish 和 cap.received 这两张表分别对应发送事件表和接收事件表，order 和 user 这两张表是我们的领域模型表</p><p>整个 CAP 的框架，它的实现原理其实有两个关键点，一个是事件表，一个就是事务控制，也就是说将事件的存储嵌入到我们的业务逻辑的事务里面去，这样子我们就可以保证我们的业务与事件是要么都能存储成功，要么都失败</p><p>整个 CAP 框架它的应用性是非常强的，非常建议在处理集成事件的时候使用这个框架</p><h2 id="34-MediatR：轻松实现命令查询职责分离模式（CQRS）"><a href="#34-MediatR：轻松实现命令查询职责分离模式（CQRS）" class="headerlink" title="34 | MediatR：轻松实现命令查询职责分离模式（CQRS）"></a>34 | MediatR：轻松实现命令查询职责分离模式（CQRS）</h2><p>核心对象</p><ul><li>IMeditator</li><li>IRequese、IRequest</li><li>IRequestHandler&lt;in TRequest, TResponse&gt;</li></ul><p>首先我们安装了 MediatR 的 8.0 的组件包，还安装了依赖注入框架的扩展包，以及依赖注入框架的核心组件包</p><ul><li>MediatR</li><li>MediatR.Extensions.Microsoft.DependencyInjection</li><li>Microsoft.Extensions.DependencyInjection</li></ul><p>大家可以观察到 MediatR 的包名和命名空间少了一个 o，猜测是作者故意这样设计的，因为它具体实现里面会有一个接口和类是 Mediator，如果设置同名的话会有一些引用上的问题</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们在这里构建一个 ServiceCollection，然后通过一行代码将我们当前的程序集注入进去，它就可以扫描我们当前程序集相关的类，下面看一下我们定义的两个类</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyCommand</span> <span class="token punctuation">:</span> IRequest<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">string</span> CommandName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyCommandHandler</span> <span class="token punctuation">:</span> IRequestHandler<span class="token operator">&lt;</span>MyCommand<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>MyCommand request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyCommandHandler执行命令：{request.CommandName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个类是 MyCommand，它实现了 IRequest 接口，这个接口就代表中介者要执行的命令</p><p>第二个类是 MyCommandHandler，它实现了 IRequestHandler 的接口，这个就是我们对命令的处理器的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> serviceProvider <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mediator <span class="token operator">=</span> serviceProvider<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>IMediator<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCommand</span> <span class="token punctuation">{</span> CommandName <span class="token operator">=</span> <span class="token string">"cmd01"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们从容器里面获取一个 IMediator，然后通过 send 方法发送一个 MyCommand 命令，我们构造了一个新的 MyCommand 的实例传给它</p><p>启动程序，输出如下：</p><pre><code>MyCommandHandler执行命令：cmd01</code></pre><p>我们可以看到 MyCommandHandler 的 Handle 方法执行了，它输出了 MyCommandHandler 的执行命令 cmd01</p><p>这样子，这个中介者它有什么好处呢?</p><p>大家可以看到，通过中介者模式，我们将命令的构造和命令的处理可以分离开，那么命令的处理如何知道要处理哪个命令呢，就是通过我们泛型的约束来定义的，我们这里为 IRequestHandler 填入了 MyCommand 类型，所以我们能明确知道 MyCommandHandler 是用来处理 MyCommand 的</p><p>如果说我在程序里面实现了多个 Handler，我们可以试验一下</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyCommandHandlerV2</span> <span class="token punctuation">:</span> IRequestHandler<span class="token operator">&lt;</span>MyCommand<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>MyCommand request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyCommandHandlerV2执行命令：{request.CommandName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyCommandHandler</span> <span class="token punctuation">:</span> IRequestHandler<span class="token operator">&lt;</span>MyCommand<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>MyCommand request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyCommandHandler执行命令：{request.CommandName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>MyCommandHandlerV2执行命令：cmd01</code></pre><p>大家可以看到我们输出的是 V2 执行命令</p><p>我们把代码进行一个调整，把这个定义移到后面</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyCommandHandler</span> <span class="token punctuation">:</span> IRequestHandler<span class="token operator">&lt;</span>MyCommand<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>MyCommand request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyCommandHandler执行命令：{request.CommandName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyCommandHandlerV2</span> <span class="token punctuation">:</span> IRequestHandler<span class="token operator">&lt;</span>MyCommand<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>MyCommand request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyCommandHandlerV2执行命令：{request.CommandName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>MyCommandHandler执行命令：cmd01</code></pre><p>大家可以看到我们这次输出的并不是 V2，而是之前的那个命令，为什么会这样子呢？是因为实际上 mediator 对于 IRequestHandler 的扫描，它是有顺序的，后面扫描到的会替换前面扫描到的 Handler，它只会识别其中最后注册进去的一个，也就是说我们在处理 RequestHandler 的时候，我们要注意在注册时仅注册需要的那个</p><p>我们再来看看我们的应用程序，回到我们之前的工程里</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>Commands<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateOrderCommandHandler</span> <span class="token punctuation">:</span> IRequestHandler<span class="token operator">&lt;</span>CreateOrderCommand<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">></span>    <span class="token punctuation">{</span>        IOrderRepository _orderRepository<span class="token punctuation">;</span>        ICapPublisher _capPublisher<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CreateOrderCommandHandler</span><span class="token punctuation">(</span>IOrderRepository orderRepository<span class="token punctuation">,</span> ICapPublisher capPublisher<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _orderRepository <span class="token operator">=</span> orderRepository<span class="token punctuation">;</span>            _capPublisher <span class="token operator">=</span> capPublisher<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>CreateOrderCommand request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"wen san lu"</span><span class="token punctuation">,</span> <span class="token string">"hangzhou"</span><span class="token punctuation">,</span> <span class="token string">"310000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"xiaohong1999"</span><span class="token punctuation">,</span> <span class="token string">"xiaohong"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>            _orderRepository<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> _orderRepository<span class="token punctuation">.</span>UnitOfWork<span class="token punctuation">.</span><span class="token function">SaveEntitiesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> order<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到我们的 CreateOrderCommandHandler 实现的是 IRequestHandler，这也就是解释了为什么之前我们并没有显示的调用 CreateOrderCommandHandler，代码却能够执行到这里的原因</p><p>实际上我们在定义我的查询的时候，也可以这样定义，例如我们定义一个 MyOrderQuery，把订单的所有名称都输出出去</p><pre class="line-numbers language-csahrp"><code class="language-csahrp">namespace GeekTime.API.Application.Queries{    public class MyOrderQuery : IRequest<List<string>>    {        public MyOrderQuery(string userName) => UserName = userName;        public string UserName { get; private set; }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再定义一个查询器，这里就可以从各种地方查询到我们的数据然后返回出去</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> GeekTime<span class="token punctuation">.</span>API<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>Queries<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyOrderQueryHandler</span> <span class="token punctuation">:</span> IRequestHandler<span class="token operator">&lt;</span>MyOrderQuery<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> Task<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>MyOrderQuery request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上我们这样子就完成了查询和查询处理的定义</p><p>我们可以在 Controller 定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">QueryOrder</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span>MyOrderQuery myOrderQuery<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>myOrderQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就完成了查询和查询处理逻辑的分离</p><p>我们执行命令是同样的实现方式，我们这样子做的话可以将我们的查询的输入和处理定义在一个目录下面，也可以将我们的命令的定义和命令的执行放在一个目录下面，使我们的 Controller 关注于身份认证或者基础设施缓存等等一些逻辑的处理，它不再关心说我的业务逻辑是怎么样子的</p><h2 id="35-MediatR：让领域事件处理更加优雅"><a href="#35-MediatR：让领域事件处理更加优雅" class="headerlink" title="35 | MediatR：让领域事件处理更加优雅"></a>35 | MediatR：让领域事件处理更加优雅</h2><p>核心对象</p><ul><li><p>IMediator</p></li><li><p>INotification</p></li><li><p>INotificationHandler</p></li></ul><p>这两个与之前的 Request 的行为是不一样的，接下来看一下代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span> <span class="token punctuation">:</span> INotification<span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">string</span> EventName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyEventHandler</span> <span class="token punctuation">:</span> INotificationHandler<span class="token operator">&lt;</span>MyEvent<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Task <span class="token function">Handle</span><span class="token punctuation">(</span>MyEvent notification<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyEventHandler执行：{notification.EventName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyEventHandlerV2</span> <span class="token punctuation">:</span> INotificationHandler<span class="token operator">&lt;</span>MyEvent<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Task <span class="token function">Handle</span><span class="token punctuation">(</span>MyEvent notification<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyEventHandlerV2执行：{notification.EventName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//await mediator.Send(new MyCommand { CommandName = "cmd01" });</span><span class="token keyword">await</span> mediator<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEvent</span> <span class="token punctuation">{</span> EventName <span class="token operator">=</span> <span class="token string">"event01"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之前 mediator 使用了 Send 的方式来处理 Command，它还有一个方法 Publish，这个方法的入参是一个 INotification</p><p>启动程序，输出如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyEventHandler执行：event01MyEventHandlerV2执行：event01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与之前的 IRequest 不同的是，INotification 是可以注册多个 Handler 的，它是一个一对多的关系，借助它就可以对领域事件定义多个处理器来处理</p><p>接着看一下之前云服务的代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">SaveEntitiesAsync</span><span class="token punctuation">(</span>CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">DispatchDomainEventsAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前在 IUnitOfWork 定义的时候讲过一个发送领域事件的方法 DispatchDomainEventsAsync，看一下这个方法的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MediatorExtension</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">DispatchDomainEventsAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> IMediator mediator<span class="token punctuation">,</span> DbContext ctx<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> domainEntities <span class="token operator">=</span> ctx<span class="token punctuation">.</span>ChangeTracker            <span class="token punctuation">.</span><span class="token generic-method function">Entries<span class="token punctuation">&lt;</span>Entity<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span>DomainEvents <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span>DomainEvents<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> domainEvents <span class="token operator">=</span> domainEntities            <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span>DomainEvents<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        domainEntities<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>entity <span class="token operator">=</span><span class="token operator">></span> entity<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span><span class="token function">ClearDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> domainEvent <span class="token keyword">in</span> domainEvents<span class="token punctuation">)</span>            <span class="token keyword">await</span> mediator<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里是将所有的实体内的领域事件全部都查找出来，然后通过 mediator 的 Publish 发送领域事件，具体的领域事件的处理注册在 mediator 里面，这里定义了一个 OrderCreatedDomainEventHandler</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedDomainEventHandler</span> <span class="token punctuation">:</span> IDomainEventHandler<span class="token operator">&lt;</span>OrderCreatedDomainEvent<span class="token operator">></span><span class="token punctuation">{</span>    ICapPublisher _capPublisher<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderCreatedDomainEventHandler</span><span class="token punctuation">(</span>ICapPublisher capPublisher<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _capPublisher <span class="token operator">=</span> capPublisher<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">Handle</span><span class="token punctuation">(</span>OrderCreatedDomainEvent notification<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">await</span> _capPublisher<span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span><span class="token string">"OrderCreated"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OrderCreatedIntegrationEvent</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它继承自 IDomainEventHandler，而 IDomainEventHandler 继承自 INotificationHandler</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEventHandler</span><span class="token operator">&lt;</span>TDomainEvent<span class="token operator">></span> <span class="token punctuation">:</span> INotificationHandler<span class="token operator">&lt;</span>TDomainEvent<span class="token operator">></span>     <span class="token keyword">where</span> TDomainEvent <span class="token punctuation">:</span> IDomainEvent<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里我们使用了INotificationHandler的Handle方法来作为处理方法的定义</span>    Task <span class="token function">Handle</span><span class="token punctuation">(</span>TDomainEvent domainEvent<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这也就是为什么 IDomainEventHandler 会识别到 DomainEvent 并且进行处理，同样的在定义 DomainEvent 的时候，也需要标识它是一个 DomainEvent</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedDomainEvent</span> <span class="token punctuation">:</span> IDomainEvent<span class="token punctuation">{</span>    <span class="token keyword">public</span> Order Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">OrderCreatedDomainEvent</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">=</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 DomainEvent 实际上也是继承自 INotification</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEvent</span> <span class="token punctuation">:</span> INotification<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这也就意味着 EventHandler 可以正确的识别到对应的 Event 并且进行处理，这都是 MediatR 的核心能力</p><p>领域事件都是定义在 event 目录下，与领域模型定义在一起，所有的领域事件都继承 DomainEvent，分布于这个目录</p><p>领域事件的处理 Handler 都定义在 Application 应用层的 Application 下面的 DomainEventHandlers 目录下面</p><p>这样的好处是事件的定义与事件的处理是分开的，并且非常的明确知道有哪些领域事件，有哪些领域事件的处理程序</p><p>关于 MediatR 再补充一部分内容，在 TransactionBehavior 内可以看到这个类实际上继承自 IPipelineBehavior</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> MediatR<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPipelineBehavior</span><span class="token operator">&lt;</span><span class="token keyword">in</span> TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span>    <span class="token punctuation">{</span>        Task<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>TRequest request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">,</span> RequestHandlerDelegate<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个接口的作用是在命令或者事件处理的之前或者之后插入逻辑，它的执行的方式有点像中间件的方式，在 Handler 的入参里面有一个 next 的参数，就是指 CommandHandler 或者 EventHandler 的执行的逻辑，在这里就可以决定 Handler 的具体执行之前或者之后，插入一些逻辑</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>TRequest request<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">,</span> RequestHandlerDelegate<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>TResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> typeName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">GetGenericTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 首先判断当前是否有开启事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_dbContext<span class="token punctuation">.</span>HasActiveTransaction<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 定义了一个数据库操作执行的策略，比如说可以在里面嵌入一些重试的逻辑，这里创建了一个默认的策略</span>        <span class="token keyword">var</span> strategy <span class="token operator">=</span> _dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">CreateExecutionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> strategy<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Guid transactionId<span class="token punctuation">;</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span><span class="token function">BeginTransactionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span>_logger<span class="token punctuation">.</span><span class="token function">BeginScope</span><span class="token punctuation">(</span><span class="token string">"TransactionContext:{TransactionId}"</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>TransactionId<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"----- 开始事务 {TransactionId} ({@Command})"</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>TransactionId<span class="token punctuation">,</span> typeName<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>                response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// next 实际上是指我们的后续操作，这里的模式有点像之前讲的中间件模式</span>                _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"----- 提交事务 {TransactionId} {CommandName}"</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>TransactionId<span class="token punctuation">,</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span><span class="token function">CommitTransactionAsync</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>                transactionId <span class="token operator">=</span> transaction<span class="token punctuation">.</span>TransactionId<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">"处理事务出错 {CommandName} ({@Command})"</span><span class="token punctuation">,</span> typeName<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里实现里在执行命令之前判断事务是否开启，如果事务开启的话继续执行后面的逻辑，如果事务没有开启，先开启事务，再执行后面的逻辑</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NetCore 开发实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NetCore 开发实战（1）——必备知识</title>
      <link href="/2020/04/19/netcore-programing-and-practice/"/>
      <url>/2020/04/19/netcore-programing-and-practice/</url>
      
        <content type="html"><![CDATA[<h2 id="01-简介"><a href="#01-简介" class="headerlink" title="01 | 简介"></a>01 | 简介</h2><h3 id="为什么要学习-NET-Core"><a href="#为什么要学习-NET-Core" class="headerlink" title="为什么要学习 .NET Core"></a>为什么要学习 .NET Core</h3><ul><li>微软大力支持推动 .Net 技术生态发展</li><li>跨平台：更多的开发环境和部署环境选择，尤其是对 Docker 和 Kubernetes 的良好支持，快速构建微服务并部署到云基础设施中，实现高可用，可伸缩的系统架构搭建，提高代码重用程度</li><li>开源：.NET 技术栈的开放性和包容性，同时也意味着自主性，可以自由使用，再分发 .NET Core 源码</li><li>在桌面开发、移动客户端开发、物联网、AI等领域都有非常好的支持，所以可以快速构建适应不同场景的系统</li></ul><h3 id="学习-NET-Core-的难点有哪些"><a href="#学习-NET-Core-的难点有哪些" class="headerlink" title="学习 .NET Core 的难点有哪些"></a>学习 .NET Core 的难点有哪些</h3><p>.NET Core 的类库、框架、组件使用起来非常自然简单，因此入门非常容易</p><p>但是如何用最好的方式使用它来解决工作中的各类问题</p><p>如何确保我们设计的系统具备健壮性、可扩展性</p><p>如何让团队借助 .NET Core 高效的协作，则是需要大量的实战和经验积累的</p><p>比如，如何确保我们的应用适应不同的部署环境</p><p>如何设计业务代码，确保其不会随着系统的复杂度的提升而丧失可维护性</p><p>服务化又是如何在多团队中保障支付效率的</p><p>如何使用 .NET Core 技术解决服务化带来的事务一致性问题</p><p>要回答上述问题，就需要你对 .NET Core 的深层原理</p><p>以及在实际生产中的最佳实践有进一步的学习和了解</p><p>这样你才能认清技术架构和团队协作的关系</p><p>并具备保障系统架构的可持续演进的能力</p><h3 id="主要预期"><a href="#主要预期" class="headerlink" title="主要预期"></a>主要预期</h3><ul><li>掌握 .NET Core 重要组件的设计原理和最佳实践</li><li>掌握 Kubernetes 下 .NET Core 微服务应用的设计和实现方案</li><li>掌握工程设计原则在 .NET Core 技术栈中的实践</li></ul><h2 id="02-内容综述"><a href="#02-内容综述" class="headerlink" title="02 | 内容综述"></a>02 | 内容综述</h2><h3 id="主要目标"><a href="#主要目标" class="headerlink" title="主要目标"></a>主要目标</h3><ul><li>掌握 .NET Core 微服务架构的最佳实践</li><li>成长为一个具备良好架构设计能力的架构师</li></ul><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><ul><li>第一部分 .NET Core 的必备知识</li><li>第二部分 .NET Core 微服务实战</li><li>第三部分 将微服务应用部署到 Kubernetes 中</li></ul><h4 id="第一部分-NET-Core-的必备知识"><a href="#第一部分-NET-Core-的必备知识" class="headerlink" title="第一部分 .NET Core 的必备知识"></a>第一部分 .NET Core 的必备知识</h4><ul><li>依赖注入</li><li>配置管理</li><li>日志框架</li><li>关键中间件</li></ul><p>这些都是构建良好架构的必要知识</p><h4 id="第二部分-NET-Core-微服务实战"><a href="#第二部分-NET-Core-微服务实战" class="headerlink" title="第二部分 .NET Core 微服务实战"></a>第二部分 .NET Core 微服务实战</h4><p>面向期望掌握复杂系统架构设计能力的开发者</p><p>通过一步步构建一个微服务架构展开</p><p>涉及领域驱动设计、远程调用、熔断限流、网关、身份认证、安全等微服务架构的各个方面</p><h4 id="第三部分-将微服务应用部署到-Kubernetes-中"><a href="#第三部分-将微服务应用部署到-Kubernetes-中" class="headerlink" title="第三部分 将微服务应用部署到 Kubernetes 中"></a>第三部分 将微服务应用部署到 Kubernetes 中</h4><p>偏向运维侧的需求，现在 DevOps 协作模式非常流行，部署和维护不再是单个运维单个角色的职责，开发和架构师都需要掌握这部分技能</p><p>通过一个在 Kubernetes 中部署和维护的案例，了解技术机构对团队 DevOps 能力的影响</p><p>通过这部分内容，理解如何保障系统的可用性、可检测性、故障隔离能力和可维护性</p><h2 id="03-NET-Core的现状、未来以及环境搭建"><a href="#03-NET-Core的现状、未来以及环境搭建" class="headerlink" title="03 | .NET Core的现状、未来以及环境搭建"></a>03 | .NET Core的现状、未来以及环境搭建</h2><h3 id="NET-Core的现状"><a href="#NET-Core的现状" class="headerlink" title=".NET Core的现状"></a>.NET Core的现状</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="03-01-Net-Core-Function-Map.png" alt=""><br>.NET Core 的应用场景：桌面端、Web端、云端、移动端、游戏、IOT 和 AI</p><p>云端指的是 .NET Core 与云原生 Kubernetes 的完美融合</p><p>游戏，比如最流行的王者荣耀，就是用 Unity 3D 做的，基于 .NET 的 C# 语言和 Mono</p><p>AI 指的是 ML.NET 和 Azure .NET</p><h3 id="NET-Core的未来"><a href="#NET-Core的未来" class="headerlink" title=".NET Core的未来"></a>.NET Core的未来</h3><p>.NET Core 的版本历史主要版本</p><ul><li>2018年5月 .NET Core 2.1 (LTS)</li><li>2019年12月 .NET Core 3.1 (LTS)</li><li>2020年11月 .NET 5.0</li><li>2021年11月 .NET 6.0 (LTS)</li><li>2022年11月 .NTE 7.0</li><li>2023年11月 .NET 8.0 (LTS)</li></ul><p>LTS：3年官方支持期</p><h3 id="NET-Core-开发工具介绍"><a href="#NET-Core-开发工具介绍" class="headerlink" title=".NET Core 开发工具介绍"></a>.NET Core 开发工具介绍</h3><ul><li>Visual Studio (Community, Professional, Enterprise)</li><li>Visual Studio for Mac</li><li>Visual Studio Code</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>开发工具下载链接：<a href="https://visualstudio.microsoft.com/zh-hans/" target="_blank" rel="noopener">https://visualstudio.microsoft.com/zh-hans/</a><br>社区版是针对个人开发者授权免费下载使用</p><p>工作负载：勾选 ASP.NET 和 Web 开发</p><p>单个组件：可以选择一些自定义选项</p><h2 id="04-Startup：掌握ASP-NET-Core的启动过程"><a href="#04-Startup：掌握ASP-NET-Core的启动过程" class="headerlink" title="04 | Startup：掌握ASP.NET Core的启动过程"></a>04 | Startup：掌握ASP.NET Core的启动过程</h2><p>新建一个 ASP.NET Core Web 应用程序</p><p>选择 API</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Program.cs 的 Main 函数中</p><p>CreateHostBuilder 方法返回了一个 <strong>IHostBuilder</strong></p><p>它是应用程序启动的<strong>核心接口</strong></p><p>IHostBuilder 接口有六个方法：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2018.cnblogs.com/blog/1412316/202002/1412316-20200216235246031-976888981.jpg" alt=""></p><p>主要关注以下三个：</p><ul><li>ConfigureAppConfiguration</li><li>ConfigureHostConfiguration</li><li>ConfigureServices</li></ul><p>接下来，我们添加一些代码演示整个应用程序的启动过程：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureAppConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>service <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureServices"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureHostConfiguration</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureHostConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureWebHostDefaults"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，在 Startup 的三个方法中添加一些代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">Startup</span><span class="token punctuation">(</span>IConfiguration configuration<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Startup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureServices"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Configure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序查看输出：</p><pre><code>ConfigureWebHostDefaultsConfigureHostConfigurationConfigureAppConfigurationConfigureServicesStartupStartup.ConfigureServicesStartup.Configure</code></pre><p>调整一下委托的注册顺序</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureWebHostDefaults"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>service <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureServices"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureAppConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureHostConfiguration</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureHostConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会得到不同的结果</p><pre><code>ConfigureWebHostDefaultsConfigureHostConfigurationConfigureAppConfigurationStartupStartup.ConfigureServicesConfigureServicesStartup.Configure</code></pre><p>本质上，如果查看源码会发现，委托注册进去之后，实际上是按照一定的顺序来执行的：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="04-01-StartOrder.png" alt=""></p><ol><li>ConfigureWebHostDefaults</li></ol><p>这个阶段注册了应用程序必要的几个组件，比如配置的组件、容器组件</p><ol start="2"><li>ConfigureHostConfiguration</li></ol><p>用于配置应用程序启动时必要的配置，比如应用程序启动时所需要监听的端口，URL 地址</p><p>在这个过程可以嵌入一些自己配置的内容，注入到配置的框架中</p><ol start="3"><li>ConfigureAppConfiguration</li></ol><p>用于嵌入自己的配置文件，供应用程序读取，这些配置将会在后续的应用程序执行过程中间每个组件读取</p><ol start="4"><li>ConfigureServices, ConfigureLogging, Startup, Startup.ConfigureServices</li></ol><p>用于往容器里注入应用的组件</p><ol start="5"><li>Startup.Configure</li></ol><p>用于注入中间件，处理 HttpContext 整个请求过程</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Startup.Configure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseFileServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseWebSockets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在整个启动的过程中，Startup 这个类不是必要的，只是让代码结构更加合理</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureWebHostDefaults"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//webBuilder.UseStartup&lt;Startup>();</span>            webBuilder<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>services <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"webBuilder.ConfigureServices"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webBuilder<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>app <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"webBuilder.Configure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                app<span class="token punctuation">.</span><span class="token function">UseFileServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                app<span class="token punctuation">.</span><span class="token function">UseWebSockets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>                <span class="token punctuation">{</span>                    endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>service <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureServices"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureAppConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ConfigureHostConfiguration</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ConfigureHostConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序查看输出：</p><pre><code>ConfigureWebHostDefaultsConfigureHostConfigurationConfigureAppConfigurationwebBuilder.ConfigureServicesConfigureServiceswebBuilder.Configure</code></pre><p>服务注册一般放在 Startup 的 ConfigureServices，一般是services.AddXXX</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Startup.ConfigureServices"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中间件的注册一般放在 Startup 的 Configure</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Startup.Configure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseFileServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseWebSockets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="05-依赖注入：良好架构的起点"><a href="#05-依赖注入：良好架构的起点" class="headerlink" title="05 | 依赖注入：良好架构的起点"></a>05 | 依赖注入：良好架构的起点</h2><h3 id="为什么要使用依赖注入框架"><a href="#为什么要使用依赖注入框架" class="headerlink" title="为什么要使用依赖注入框架"></a>为什么要使用依赖注入框架</h3><ul><li>借助依赖注入框架，我们可以轻松管理类之间的依赖，帮助我们在构建应用时遵循设计原则，确保代码的可维护性和可扩展性</li><li>ASP.NET Core 的整个架构中，依赖注入框架提供了对象创建和生命周期管理的核心能力，各个组件相互协作，也是由依赖注入框架的能力来实现的</li></ul><h3 id="组件包"><a href="#组件包" class="headerlink" title="组件包"></a>组件包</h3><ul><li>Microsoft.Extensions.DependencyInjection.Abstractions</li><li>Microsoft.Extensions.DependencyInjection</li></ul><p>依赖注入的核心是以上两个组件包，一个是抽象包，一个是具体的实现</p><p>这里用到了一个经典的设计模式，接口实现分离模式</p><p>组件只需要依赖抽象接口，而不需要依赖具体实现，当使用的时候注入它的具体实现即可</p><p>这样做的好处是可以在使用时决定具体的实现，也就意味着未来可以做任意的扩展，替换依赖注入框架的具体实现</p><p>默认情况下，使用 .NET Core 提供的内置依赖注入框架，也可以使用第三方的依赖注入框架来替换默认实现</p><h3 id="核心类型"><a href="#核心类型" class="headerlink" title="核心类型"></a>核心类型</h3><ul><li>IServiceCollection：服务的注册</li><li>ServiceDescriptor：每一个服务注册时的信息</li><li>IServiceProvider：具体的容器，由 ServiceCollection Build 产生</li><li>IServiceScope：一个容器的子容器的生命周期</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>单例 Singleton：在整个根容器的生命周期内，都是单例，不管是子容器还是根容器，与作用域的区别是：一个是全局的，一个是范围的单例</li><li>作用域 Scoped：在 Scope 的生存周期内，也就是容器的生存周期内，或者子容器的生存周期内，如果我的容器释放掉，我的对象也会释放掉</li><li>瞬时（暂时）Transient：每一次从容器里面获取对象时，都可以得到一个全新的对象</li></ul><p>新建一个 ASP.NET Core Web 应用程序 DependencyInjectionDemo，选择API</p><p>添加一个 Services 文件夹，新建三个服务代表三个生命周期的服务</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> DependencyInjectionDemo<span class="token punctuation">.</span>Services<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyScopedService</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScopedService</span> <span class="token punctuation">:</span> IMyScopedService    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> DependencyInjectionDemo<span class="token punctuation">.</span>Services<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMySingletonService</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySingletonService</span> <span class="token punctuation">:</span> IMySingletonService    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> DependencyInjectionDemo<span class="token punctuation">.</span>Services<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyTransientService</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTransientService</span> <span class="token punctuation">:</span> IMyTransientService    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Startup 中注册服务</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 注册服务不同生命周期的服务</span>    <span class="token comment" spellcheck="true">// 将单例的服务注册为单例的模式</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IMySingletonService<span class="token punctuation">,</span> MySingletonService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Scoped 的服务注册为 Scoped 的生命周期</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>IMyScopedService<span class="token punctuation">,</span> MyScopedService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 瞬时的服务注册为瞬时的生命周期</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddTransient<span class="token punctuation">&lt;</span>IMyTransientService<span class="token punctuation">,</span> MyTransientService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Controller 里面获取我们的服务</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// FromServices 标注的作用是从容器里面获取我们的对象</span><span class="token comment" spellcheck="true">// 每个对象获取两遍，用于对比每个生命周期获取的对象是什么样子的</span><span class="token comment" spellcheck="true">// HashCode 代表对象的唯一性</span><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">GetService</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IMySingletonService singleton1<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IMySingletonService singleton2<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IMyTransientService transient1<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IMyTransientService transient2<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IMyScopedService scoped1<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IMyScopedService scoped2<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"singleton1:{singleton1.GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"singleton2:{singleton2.GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"transient1:{transient1.GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"transient2:{transient2.GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"scoped1:{scoped1.GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"scoped2:{scoped2.GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"========请求结束========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，刷新浏览器再次访问接口，输出如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2018.cnblogs.com/blog/1412316/202002/1412316-20200218003943791-347841228.png" alt=""></p><p>单例模式两次的 HashCode 没有变化</p><p>两个瞬时服务两次的 HashCode 完全不同，意味着瞬时服务每次请求都会得到一个新对象</p><p>范围服务每个请求内是相同的，不同的请求之间得到的对象实例是不同的</p><h3 id="其他服务注册方式"><a href="#其他服务注册方式" class="headerlink" title="其他服务注册方式"></a>其他服务注册方式</h3><p>除了使用泛型的方式注册服务之外，还有其他的方式</p><p>添加一个 OrderService</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrderService</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">:</span> IOrderService<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceEx</span> <span class="token punctuation">:</span> IOrderService<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Startup 中注册服务</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 注册服务不同生命周期的服务</span>    <span class="token comment" spellcheck="true">// 将单例的服务注册为单例的模式</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IMySingletonService<span class="token punctuation">,</span> MySingletonService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Scoped 的服务注册为 Scoped 的生命周期</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>IMyScopedService<span class="token punctuation">,</span> MyScopedService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 瞬时的服务注册为瞬时的生命周期</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddTransient<span class="token punctuation">&lt;</span>IMyTransientService<span class="token punctuation">,</span> MyTransientService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 花式注册</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//直接注入实例</span>    <span class="token comment" spellcheck="true">//// 通过工厂模式</span>    <span class="token comment" spellcheck="true">//services.AddSingleton&lt;IOrderService>(serviceProvider =></span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    return new OrderServiceEx();</span>    <span class="token comment" spellcheck="true">//});</span>    <span class="token comment" spellcheck="true">//services.AddScoped&lt;IOrderService>(serviceProvider =></span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    // 可以使用 IServiceProvider 入参，也就意味着可以从容器里面获取多个对象，进行组装，得到最终的实现实例</span>    <span class="token comment" spellcheck="true">//    // 也就是可以把工厂类设计的比较复杂，比如说实现类依赖了容器里面的另外一个类，或者用另一个类来包装原有的实现</span>    <span class="token comment" spellcheck="true">//    //serviceProvider.GetService&lt;>()</span>    <span class="token comment" spellcheck="true">//    return new OrderServiceEx();</span>    <span class="token comment" spellcheck="true">//});</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 尝试注册（如果服务已经注册过，则不再注册）</span>    services<span class="token punctuation">.</span><span class="token generic-method function">TryAddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderServiceEx<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在服务端 WeatherForecastController 定义另外一个接口</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// IEnumerable&lt;IOrderService>：获取曾经注册过的所有 IOrderService</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">GetServiceList</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IEnumerable<span class="token operator">&lt;</span>IOrderService<span class="token operator">></span> services<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> services<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"获取到服务实例：{item.ToString()}:{item.GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调整一下程序的启动页面，Properties 下的 launchSetting.json 的这一行代码</p><pre><code>"launchUrl": "weatherforecast/getservicelist",</code></pre><p>启动程序，输出如下：</p><pre><code>获取到服务实例：DependencyInjectionDemo.Services.OrderService:25560520</code></pre><p>只有一个实例，说明 TryAddSingleton 没有生效</p><p>接着，注册两个服务</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderServiceEx<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>获取到服务实例：DependencyInjectionDemo.Services.OrderService:16991442获取到服务实例：DependencyInjectionDemo.Services.OrderServiceEx:25560520</code></pre><p>结果获取到了两个实例</p><p>接下来，了解一下 TryAddEnumerable 与 TryAddSingleton 的区别</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 尝试注册（如果服务已经注册过，则不再注册）</span>services<span class="token punctuation">.</span><span class="token generic-method function">TryAddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderServiceEx<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接口类型重复，则不注册</span>services<span class="token punctuation">.</span><span class="token function">TryAddEnumerable</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Singleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 相同类型的接口，实现类相同，则不注册</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册服务</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">TryAddEnumerable</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Singleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>获取到服务实例：DependencyInjectionDemo.Services.OrderService:53046438</code></pre><p>因为已经注册过 OrderService，所以第二句代码不生效</p><p>以不同的实现注册服务</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">TryAddEnumerable</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Singleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderServiceEx<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>获取到服务实例：DependencyInjectionDemo.Services.OrderService:24219861获取到服务实例：DependencyInjectionDemo.Services.OrderServiceEx:38855053</code></pre><p>这样就可以获取到两个服务实例</p><p>刷新浏览器，再执行一遍</p><pre><code>获取到服务实例：DependencyInjectionDemo.Services.OrderService:24219861获取到服务实例：DependencyInjectionDemo.Services.OrderServiceEx:38855053获取到服务实例：DependencyInjectionDemo.Services.OrderService:24219861获取到服务实例：DependencyInjectionDemo.Services.OrderServiceEx:38855053</code></pre><p>因为注册的是单例，所以两次请求获取到的实例都是相同的</p><h3 id="服务的替换和删除"><a href="#服务的替换和删除" class="headerlink" title="服务的替换和删除"></a>服务的替换和删除</h3><p>注册完毕之后，想替换某些组件的某些部分时，可以使用 <strong>Replace</strong> 和 <strong>RemoveAll</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Singleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderServiceEx<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 替换掉注册的第一个实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>获取到服务实例：DependencyInjectionDemo.Services.OrderServiceEx:25560520</code></pre><p>从结果看出，注册的 OrderService 被替换为 OrderServiceEx</p><p>下面介绍 RemoveAll</p><pre><code>services.AddSingleton&lt;IOrderService&gt;(new OrderService());services.AddSingleton&lt;IOrderService, OrderServiceEx&gt;();services.RemoveAll&lt;IOrderService&gt;();// 移除所有 IOrderService 的注册</code></pre><p>这种情况下程序会报错，因为所有 IOrderService 的注册被移除</p><pre><code>Unable to resolve service for type 'DependencyInjectionDemo.Services.IOrderService'</code></pre><h3 id="注册泛型模板"><a href="#注册泛型模板" class="headerlink" title="注册泛型模板"></a>注册泛型模板</h3><p>当需要注册一组泛型实现的时候</p><p>实际上注册的时候并不知道泛型类的具体类型入参</p><p>依赖注入框架为我们提供了泛型模板的注册方式</p><p>通过一行代码来注册所有此泛型的具体实现</p><p>定义一个泛型接口</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> DependencyInjectionDemo<span class="token punctuation">.</span>Services<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGenericService</span><span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericService</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> IGenericService<span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> T Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">GenericService</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型模板注册方法</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>IGenericService<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>GenericService<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的生命周期与之前的注册方式是一致的</p><p>不过它无法通过泛型 API 注册</p><p>需要注册两个 service 的 type</p><p>第一个入参是服务的类型</p><p>第二个入参是服务实现的类型</p><p>接下来，看看如何在 controller 中使用</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 在构造函数中添加两个入参，IOrderService 和 IGenericService</span><span class="token comment" spellcheck="true">// 通过断点调试查看 genericService 的类型可得知，泛型的具体实现可以用容器里面的任意类型来替代</span><span class="token keyword">public</span> <span class="token function">WeatherForecastController</span><span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span>WeatherForecastController<span class="token operator">></span> logger<span class="token punctuation">,</span> IOrderService orderService<span class="token punctuation">,</span> IGenericService<span class="token operator">&lt;</span>IOrderService<span class="token operator">></span> genericService<span class="token punctuation">)</span><span class="token punctuation">{</span>    _orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>    _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 controller 中有两种依赖注入的实例的获取方式：</p><ul><li>通过 controller 构造函数注入</li><li>通过 [FromServices] 注入</li></ul><p>当定义一个 controller 的时候</p><p>它的服务是大部分接口都需要使用的情况下</p><p>推荐的做法是用构造函数注入的方式</p><p>如果这个服务仅仅在某一个接口使用的情况下</p><p>推荐使用 [FromServices] 注入</p><h2 id="06-作用域与对象释放行为"><a href="#06-作用域与对象释放行为" class="headerlink" title="06 | 作用域与对象释放行为"></a>06 | 作用域与对象释放行为</h2><p>作用域主要由<strong>IServiceScope</strong>这个接口来承载</p><p>对于实现 IDisposable 类的实例的对象，容器会负责对其生命周期进行管理，使用完毕之后，他会释放这些对象。</p><p>实现 IDisposable 接口类型的释放：</p><ul><li>1.容器只会负责由其创建的对象，如果这个对象是<strong>自己创建出来并放到容器里的</strong>，容器不负责释放这个对象</li><li>2.在容器和子容器释放时，容器才会去释放这些对象，也就是说<strong>容器的生命周期与其创建的对象的生命周期是有对应关系的</strong></li></ul><p>两点建议：</p><ul><li>1.在根容器，最好不要创建实现了 IDisposable 瞬时服务</li><li>2.避免手动创建实现了 IDisposable 对象，然后塞到容器里面，应该尽可能地使用容器来管理我们对象的创建和释放</li></ul><p>先看一下服务</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> DependencyInjectionScopeAndDisposableDemo<span class="token punctuation">.</span>Services<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrderService</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisposableOrderService</span> <span class="token punctuation">:</span> IOrderService<span class="token punctuation">,</span> IDisposable    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"DisposableOrderService Disposed:{this.GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先定义 IOrderService</p><p>接着定义 IOrderService 的实现 DisposableOrderService，并*<em>实现了 IDisposable *</em>这个接口</p><p>在释放的时候打印释放信息，并输出对象的 HashCode</p><p>接着是服务注册（Startup）</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddTransient<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span>DisposableOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里先注册一个<strong>瞬时服务</strong>，将 IOrderService 注册进去</p><p>然后看一下控制器（WeatherForecastController）</p><pre><code>[HttpGet]public int Get([FromServices] IOrderService orderService,    [FromServices] IOrderService orderService2){    return 1;}</code></pre><p>这里 FromServices 获取了两次 IOrderService</p><p>这里不需要写任何代码对它进行操作，因为整个生命周期是由容器去管理的</p><p>启动程序，输出如下：</p><pre><code>DisposableOrderService Disposed:10579059DisposableOrderService Disposed:47945396</code></pre><p>可以看出，执行完毕之后，DisposableOrderService 会被释放掉，并且两个对象都会被释放掉</p><p>两个对象的 HashCode 不同</p><p><strong>瞬时服务在每一次获取的时候都会获得一个新的对象</strong></p><p>接着，添加一行代码表示服务</p><pre><code>[HttpGet]public int Get([FromServices] IOrderService orderService,    [FromServices] IOrderService orderService2){    Console.WriteLine("接口请求处理结束");    return 1;}</code></pre><p>输出一下，表示我们的接口已经访问完毕，看一下释放时机在哪里</p><p>启动程序，输出如下：</p><pre><code>接口请求处理结束DisposableOrderService Disposed:35023218DisposableOrderService Disposed:13943705</code></pre><p>由此看出，<strong>接口请求处理结束后，才释放对象</strong></p><p>接下来看一下 <strong>Scoped 模式</strong></p><p>服务注册</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">DisposableOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>控制器</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span> IOrderService orderService<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span> IOrderService orderService2<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"=======1=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// HttpContext.RequestServices</span>    <span class="token comment" spellcheck="true">// 是当前请求的一个根容器</span>    <span class="token comment" spellcheck="true">// 应用程序根容器的一个子容器</span>    <span class="token comment" spellcheck="true">// 每个请求会创建一个容器</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span>IServiceScope scope <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这个子容器下面再创建一个子容器来获取服务</span>        <span class="token keyword">var</span> service <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"=======2=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"接口请求处理结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>=======1==========DisposableOrderService Disposed:31307802=======2==========接口请求处理结束DisposableOrderService Disposed:31614998</code></pre><p>每次请求会获得两个释放，意味着<strong>每创建一个 Scoped 的作用域，每个作用域内可以是单例的</strong></p><p>接下来，把服务切换为单例模式，通过工厂的方式</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">DisposableOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>=======1=================2==========接口请求处理结束</code></pre><p>可以看到代码实际上<strong>不会被释放</strong></p><p>如果切换为瞬时模式，通过工厂的方式</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddTransient<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">DisposableOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>=======1==========DisposableOrderService Disposed:12021664DisposableOrderService Disposed:32106157=======2==========接口请求处理结束DisposableOrderService Disposed:3165221DisposableOrderService Disposed:13048313</code></pre><p>这里可以看到，<strong>获取四个服务并且释放掉</strong></p><p>接下来把服务调整为<strong>自己创建，并注册进去</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisposableOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样我们也不会得到释放的输出</p><p>也就是说，通过这种方式注册，<strong>容器不会管理对象的生命周期</strong></p><p>如何识别这个区别呢？</p><p>在控制器中注入 <strong>IHostApplicationLifetime</strong> 接口</p><p>这个接口的作用是用来管理整个应用程序的生命周期</p><p>它有一个方法 <strong>StopApplication</strong></p><p>也就是说它可以把整个应用程序关掉</p><p>接着，<strong>通过手工关掉的方式看一下应用程序关闭时会不会把单例对象释放掉</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span> IOrderService orderService<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span> IOrderService orderService2<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IHostApplicationLifetime hostApplicationLifetime<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromQuery<span class="token punctuation">]</span><span class="token keyword">bool</span> stop <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"=======1=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// HttpContext.RequestServices</span>    <span class="token comment" spellcheck="true">// 是当前请求的一个根容器</span>    <span class="token comment" spellcheck="true">// 应用程序根容器的一个子容器</span>    <span class="token comment" spellcheck="true">// 每个请求会创建一个容器</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span>IServiceScope scope <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这个子容器下面再创建一个子容器来获取服务</span>        <span class="token keyword">var</span> service <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> service2 <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"=======2=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stop<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        hostApplicationLifetime<span class="token punctuation">.</span><span class="token function">StopApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"接口请求处理结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先用自己创建对象的方式</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisposableOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序</p><p>输入 ?stop=true</p><pre><code>https://localhost:5001/weatherforecast?stop=true</code></pre><p>输出如下：</p><pre><code>...DependencyInjectionScopeAndDisposableDemo.exe (进程 16884)已退出，代码为 0。要在调试停止时自动关闭控制台，请启用“工具”-&gt;“选项”-&gt;“调试”-&gt;“调试停止时自动关闭控制台”。按任意键关闭此窗口. . .</code></pre><p>如果单例由容器来管理，切换回普通注册方式</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> DisposableOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动程序</p><p>输入 ?stop=true</p><pre><code>https://localhost:5001/weatherforecast?stop=true</code></pre><p>输出如下：</p><pre><code>Application is shutting down...接口请求处理结束DisposableOrderService Disposed:23399238</code></pre><p>对象释放，应用程序退出</p><p>这里说明<strong>单例的服务都是注册在根容器里面</strong></p><p><strong>根容器的释放意味着需要在整个应用程序退出时释放</strong></p><p>这个时候它会释放自己所管理的所有的 IDisposable 的对象</p><p>这里面有一个非常需要注意的坑：</p><p>假如把服务注册成<strong>瞬时</strong>的</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddTransient<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> DisposableOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后又<strong>在根容器里面去获取这个对象</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> s <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这意味着在根容器去持续的创建 IOrderService，但是<strong>由于根容器只会在应用程序整个退出时回收</strong>，也就意味着<strong>这些对象会一直积累在应用程序内</strong></p><p>调整控制器，不获取 IOrderService</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Get</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IHostApplicationLifetime hostApplicationLifetime<span class="token punctuation">,</span>    <span class="token punctuation">[</span>FromQuery<span class="token punctuation">]</span><span class="token keyword">bool</span> stop <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stop<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        hostApplicationLifetime<span class="token punctuation">.</span><span class="token function">StopApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仅仅在根容器获取一次</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> s <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样运行起来，每次请求（点击刷新）的话，整个输出是不会有内容的，因为我们没有在子容器里面去获取对象</p><p>但实际上当我们退出的时候，会发现确实有一个实例被释放掉了</p><pre class="line-numbers language-csharp"><code class="language-csharp">DisposableOrderService Disposed<span class="token punctuation">:</span><span class="token number">7511460</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说，<strong>实现了 IDisposable 接口的服务，如果时注册瞬时的，又在根容器去做操作，它会一直保持到应用程序退出的时候，才能够被回收掉</strong></p><h2 id="07-用Autofac增强容器能力：引入面向切面编程（AOP）的能力"><a href="#07-用Autofac增强容器能力：引入面向切面编程（AOP）的能力" class="headerlink" title="07 | 用Autofac增强容器能力：引入面向切面编程（AOP）的能力"></a>07 | 用Autofac增强容器能力：引入面向切面编程（AOP）的能力</h2><p>这一节讲解使用第三方框架来扩展依赖注入容器</p><p>什么情况下需要我们引入第三方容器组件？</p><p>大部分情况下，默认的容器组件足够使用</p><p>当需要一些非常特殊的场景如下：</p><ol><li><p>基于名称的注入：需要把一个服务按照名称来区分它的不同实现的时候</p></li><li><p>属性注入：直接把服务注册到某一个类的属性里面去，而不需要定义构造函数，比如之前的 FromService 和 构造函数入参</p></li><li><p>子容器：可以理解为之前讲过的 Scope，但实际上还可以用第三方的框架实现一些特殊的子容器</p></li><li><p>基于动态代理的 AOP：需要在服务中注入额外的行为的时候，可以用动态代理的能力</p></li></ol><p>.NET Core 的依赖注入框架，它的核心扩展点是 IserviceProviderFactory</p><p>第三方的依赖注入容器都是用了这个类来作为扩展点，把自己注入到整个框架里来</p><p>也就是说在使用这些依赖注入框架的时候，不需要关注说谁家的特性，谁家的接口是什么样子，只需要关注官方核心的定义就可以了，不需要直接依赖这些框架</p><p>服务</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> DependencyInjectionAutofacDemo<span class="token punctuation">.</span>Services<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyService</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">ShowCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">:</span> IMyService    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ShowCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyService.ShowCode:{GetHashCode()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceV2</span> <span class="token punctuation">:</span> IMyService    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 用于演示属性注入的方式</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> MyNameService NameService <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ShowCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 默认情况下，NameService 为空，如果注入成功，则不为空</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"MyServiceV2.ShowCode:{GetHashCode()},NameService是否为空：{NameService == null}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNameService</span>    <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看一下如何集成 Autofac</p><p>使用 Autofac 是因为它是 .NET 社区里面最老牌的容器框架之一</p><p>它有两个包：</p><ul><li>Autofac.Extensions.DependencyInjection</li><li>Autofac.Extras.DynamicProxy</li></ul><p>引入这两个包，就可以使用它来达到之前说的四种能力</p><p>引入这两个包后，需要在 Program 中添加一行代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">.</span><span class="token function">UseServiceProviderFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutofacServiceProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UseServiceProviderFactory 是用于注册第三方容器的入口</p><p>还有一个改动在 Startup 中，我们需要添加一个 ConfigureContainer 方法，它的入参是 Autofac 的 ContainerBuilder</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span>ContainerBuilder builder<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在有两个 ConfigureServices，一个是默认的，一个是 ConfigureContainer</p><p>服务注册进默认的容器之后，实际上会被 Autofac 接替，然后执行 ConfigureContainer</p><p>Autofac 的注册方式与之前的注册方式不同，先注册具体的实现，然后再告诉它想把它标记为哪个服务的类型，与之前的写法相反</p><pre class="line-numbers language-csharp"><code class="language-csharp">builder<span class="token punctuation">.</span><span class="token generic-method function">RegisterType<span class="token punctuation">&lt;</span>MyService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method function">As<span class="token punctuation">&lt;</span>IMyService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来是命名注册，当需要把一个服务注册多次，并且用不同命名作为区分的时候，可以用这种方式，入参是一个服务名</p><pre class="line-numbers language-csharp"><code class="language-csharp">builder<span class="token punctuation">.</span><span class="token generic-method function">RegisterType<span class="token punctuation">&lt;</span>MyServiceV2<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method function">Named<span class="token punctuation">&lt;</span>IMyService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"service2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何使用它呢？</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> ILifetimeScope AutofacContainer <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册根容器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>AutofacContainer <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token function">GetAutofacRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Autofac 容器获取实例的方式是一组 Resolve 方法</span>    <span class="token keyword">var</span> service <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>AutofacContainer<span class="token punctuation">.</span><span class="token generic-method function">ResolveNamed<span class="token punctuation">&lt;</span>IMyService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"service2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">ShowCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>MyServiceV2.ShowCode:61566768,NameService是否为空：True</code></pre><p>如何获取没有命名的服务呢？</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 获取没有命名的服务，把 namd 去掉即可</span><span class="token keyword">var</span> servicenamed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>AutofacContainer<span class="token punctuation">.</span><span class="token generic-method function">Resolve<span class="token punctuation">&lt;</span>IMyService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>servicenamed<span class="token punctuation">.</span><span class="token function">ShowCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Autofac 容器获取实例的方式是一组 Resolve 方法</span><span class="token keyword">var</span> service <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>AutofacContainer<span class="token punctuation">.</span><span class="token generic-method function">ResolveNamed<span class="token punctuation">&lt;</span>IMyService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"service2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">ShowCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyService<span class="token punctuation">.</span>ShowCode<span class="token punctuation">:</span><span class="token number">61566768</span>MyServiceV2<span class="token punctuation">.</span>ShowCode<span class="token punctuation">:</span><span class="token number">44407631</span><span class="token punctuation">,</span>NameService是否为空：True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来，讲解属性注入</p><pre class="line-numbers language-csahrp"><code class="language-csahrp">builder.RegisterType<MyNameService>();// 只需要在注册方法加上 PropertiesAutowired 即可builder.RegisterType<MyServiceV2>().As<IMyService>().PropertiesAutowired();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从服务里面获取它并且 ShowCode</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> servicenamed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>AutofacContainer<span class="token punctuation">.</span><span class="token generic-method function">Resolve<span class="token punctuation">&lt;</span>IMyService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>servicenamed<span class="token punctuation">.</span><span class="token function">ShowCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyServiceV2<span class="token punctuation">.</span>ShowCode<span class="token punctuation">:</span><span class="token number">11318800</span><span class="token punctuation">,</span>NameService是否为空：False<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不为空，注册成功</p><p>接下来，演示 AOP 场景，它指的是在不期望改变原有类的情况下，在方法执行时嵌入一些逻辑，使得可以在方法执行的切面上任意插入逻辑</p><pre class="line-numbers language-cshqrp"><code class="language-cshqrp">namespace DependencyInjectionAutofacDemo.Services{    /// <summary>    /// IInterceptor 是 Autofac 的面向切面的最重要的一个接口，它可以把逻辑注入到方法的切面里面去    /// </summary>    public class MyInterceptor : IInterceptor    {        public void Intercept(IInvocation invocation)        {            // 方法执行前            Console.WriteLine($"Intercept before,Method:{invocation.Method.Name}");            // 具体方法的执行，如果这句话不执行，相当于把切面的方法拦截掉，让具体类的方法不执行            invocation.Proceed();            // 方法执行后，也就是说可以在任意的方法执行后，插入执行逻辑，并且决定原有的方法是否执行            Console.WriteLine($"Intercept after,Method:{invocation.Method.Name}");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何启动切面？</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 把拦截器注册到容器里面</span>builder<span class="token punctuation">.</span><span class="token generic-method function">RegisterType<span class="token punctuation">&lt;</span>MyInterceptor<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注册 MyServiceV2，并且允许它属性注册 （PropertiesAutowired）</span><span class="token comment" spellcheck="true">// 开启拦截器需要使用 InterceptedBy 方法，并且注册类型 MyInterceptor</span><span class="token comment" spellcheck="true">// 最后还要执行一个开关 EnableInterfaceInterceptors 允许接口拦截器</span>builder<span class="token punctuation">.</span><span class="token generic-method function">RegisterType<span class="token punctuation">&lt;</span>MyServiceV2<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method function">As<span class="token punctuation">&lt;</span>IMyService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PropertiesAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InterceptedBy</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>MyInterceptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">EnableInterfaceInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拦截器分两种类型，一种是接口拦截器，一种是类拦截器</p><p>常用的是接口拦截器，当服务类型是接口的时候，就需要使用这种方式</p><p>如果没有基于接口设计类，而是实现类的时候，就需要用类拦截器</p><p>类拦截器需要把方法设计为虚方法，这样子允许类重载的情况下，才可以拦截到具体的方法</p><p>启动程序，输出如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Intercept before<span class="token punctuation">,</span>Method<span class="token punctuation">:</span>ShowCodeMyServiceV2<span class="token punctuation">.</span>ShowCode<span class="token punctuation">:</span><span class="token number">31780825</span><span class="token punctuation">,</span>NameService是否为空：TrueIntercept after<span class="token punctuation">,</span>Method<span class="token punctuation">:</span>ShowCode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来看一下子容器的用法</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Autofac 具备给子容器进行命名的特性，可以把以服务注入到子容器中，并且是特定命名的子容器，这就意味着在其他的子容器是获取不到这个对象的</span>builder<span class="token punctuation">.</span><span class="token generic-method function">RegisterType<span class="token punctuation">&lt;</span>MyNameService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerMatchingLifetimeScope</span><span class="token punctuation">(</span><span class="token string">"myscope"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个 myscope 的子容器</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> myscope <span class="token operator">=</span> AutofacContainer<span class="token punctuation">.</span><span class="token function">BeginLifetimeScope</span><span class="token punctuation">(</span><span class="token string">"myscope"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> service0 <span class="token operator">=</span> myscope<span class="token punctuation">.</span><span class="token generic-method function">Resolve<span class="token punctuation">&lt;</span>MyNameService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> myscope<span class="token punctuation">.</span><span class="token function">BeginLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> service1 <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token generic-method function">Resolve<span class="token punctuation">&lt;</span>MyNameService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> service2 <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token generic-method function">Resolve<span class="token punctuation">&lt;</span>MyNameService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"service1=service2:{service1 == service2}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"service1=service0:{service1 == service0}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>service1=service2:Trueservice1=service0:True</code></pre><p>这意味着在 myscope 子容器下面，不管再创建任何子容器的生命周期，得到的都是同一个对象</p><p>这样子的好处是当不期望这个对象在根容器创建时，又希望它在某一定的范围内时单例模式的情况下，可以使用这种方式</p><h2 id="08-配置框架：让服务无缝适应各种环境"><a href="#08-配置框架：让服务无缝适应各种环境" class="headerlink" title="08 | 配置框架：让服务无缝适应各种环境"></a>08 | 配置框架：让服务无缝适应各种环境</h2><p>配置是应用程序发布到各种环境的必备能力，这一节开始详细讲解 ASP.NET Core 的配置框架</p><p>配置框架的核心包有两个，一个抽象包，一个实现包</p><ul><li>Microsoft.Extensions.Configuration.Abstractions</li><li>Microsoft.Extensions.Configuration</li></ul><p>这与依赖注入框架一样，也是使用了接口实现分离的设计模式</p><p>配置框架以 Key-value 字符串键值对的方式抽象了配置</p><p>同时还支持从各种不同的数据源读取配置，比如从命令行读取，从环境变量读取，从文件中读取</p><p>配置框架的核心接口有四个</p><ul><li>IConfiguration</li><li>IConfigurationRoot</li><li>IConfigurationSection</li><li>IConfigurationBuilder</li></ul><p>配置框架有一个核心的扩展点，就是注入自己的配置源，也就是说可以指定任意的配置的数据来源，注入到配置框架里面</p><ul><li>IConfigurationSource</li><li>IConfigurationProvider</li></ul><p>接下来通过一个基本的控制台应用程序从头到尾演示一个配置的构建和使用。</p><p>首先引入上面提到的两个包</p><ul><li>Microsoft.Extensions.Configuration.Abstractions</li><li>Microsoft.Extensions.Configuration</li></ul><p>接着是构建和使用</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationDemo<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ConfigurationBuilder 是用来构建配置的核心，所有设置都在 builder 中完成</span>            IConfigurationBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 注入一个内存的配置数据源（注入一个字典集合作为配置数据源）</span>            builder<span class="token punctuation">.</span><span class="token function">AddInMemoryCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token punctuation">{</span> <span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> <span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Build 方法用来把所有的配置构建出来，并且获得一个 configurationRoot，表示配置的根</span>            <span class="token comment" spellcheck="true">// 也就是说读取配置的动作都需要从 IConfigurationRoot 这个对象读取的</span>            IConfigurationRoot configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configurationRoot<span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configurationRoot<span class="token punctuation">[</span><span class="token string">"key2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>value1value2</code></pre><p>IConfigurationSection</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationDemo<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ConfigurationBuilder 是用来构建配置的核心，所有设置都在 builder 中完成</span>            IConfigurationBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 注入一个内存的配置数据源（注入一个字典集合作为配置数据源）</span>            builder<span class="token punctuation">.</span><span class="token function">AddInMemoryCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token punctuation">{</span> <span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> <span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> <span class="token string">"section1:key4"</span><span class="token punctuation">,</span><span class="token string">"value4"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> <span class="token string">"section2:key5"</span><span class="token punctuation">,</span><span class="token string">"value5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> <span class="token string">"section2:key6"</span><span class="token punctuation">,</span><span class="token string">"value6"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Build 方法用来把所有的配置构建出来，并且获得一个 configurationRoot，表示配置的根</span>            <span class="token comment" spellcheck="true">// 也就是说读取配置的动作都需要从 IConfigurationRoot 这个对象读取的</span>            IConfigurationRoot configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//IConfiguration config = configurationRoot;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configurationRoot<span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configurationRoot<span class="token punctuation">[</span><span class="token string">"key2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// section 的作用是指当配置不仅仅是简单的 Key value 的时候，比如说需要给配置分组，就可以使用 section 来定义</span>            <span class="token comment" spellcheck="true">// section 每一节是用冒号来作为节的分隔符的</span>            IConfigurationSection section <span class="token operator">=</span> configurationRoot<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"section1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"key4:{section["</span>key4<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"key5:{section["</span>key5<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>value1value2key4:value4key5:</code></pre><p>section1 的 key5 没有值</p><p>打印一下 section2 的 key5</p><pre class="line-numbers language-csharp"><code class="language-csharp">IConfigurationSection section2 <span class="token operator">=</span> configurationRoot<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"section2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"key5_v2:{section2["</span>key5<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>key5_v2:value5</code></pre><p>多级嵌套</p><pre><code>{ "section2:section3:key7","value7" }</code></pre><p>打印输出</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> section3 <span class="token operator">=</span> section2<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"section3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"key7:{section3["</span>key7<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>key7:value7</code></pre><p>这样做的好处是：一方面避免一个服务重复注册，也可以控制一个服务需要注册不同的实现</p><h2 id="09-命令行配置提供程序：最简单快捷的配置注入方法"><a href="#09-命令行配置提供程序：最简单快捷的配置注入方法" class="headerlink" title="09 | 命令行配置提供程序：最简单快捷的配置注入方法"></a>09 | 命令行配置提供程序：最简单快捷的配置注入方法</h2><p>这一节讲解如何使用命令行参数来作为配置数据源</p><p>命令行配置（提供程序的）支持三种格式的命令</p><ol><li>无前缀的 key=value 模式</li><li>双中横线模式 –key=value 或 –key value</li><li>正横杠模式 /key=value 或 /key value</li></ol><p>备注：等号分隔符和空格分隔符不能混用</p><p>命令替换模式：为命令参数提供别名</p><ol><li>必须以单横杠(-)或双横杠(–)开头</li><li>映射字典不能包含重复 Key</li></ol><p>首先引入三个包</p><ul><li>Microsoft.Extensions.Configuration.Abstractions</li><li>Microsoft.Extensions.Configuration</li><li>Microsoft.Extensions.Configuration.CommandLine</li></ul><p>主程序</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationCommandLineDemo<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把入参传递给命令行参提供程序</span>            builder<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"CommandLineKey1:{configurationRoot["</span>CommandLineKey1<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"CommandLineKey2:{configurationRoot["</span>CommandLineKey2<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目右键属性，设置调试模式启动时的命令参数</p><pre class="line-numbers language-csharp"><code class="language-csharp">CommandLineKey1<span class="token operator">=</span>value1 <span class="token operator">--</span>CommandLineKey2<span class="token operator">=</span>value2 <span class="token operator">/</span>CommandLineKey3<span class="token operator">=</span>value3 <span class="token operator">--</span>k1<span class="token operator">=</span>k3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过文件编辑，launchSettings.json</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">{</span>  <span class="token string">"profiles"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"ConfigurationCommandLineDemo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"commandName"</span><span class="token punctuation">:</span> <span class="token string">"Project"</span><span class="token punctuation">,</span>      <span class="token string">"commandLineArgs"</span><span class="token punctuation">:</span> <span class="token string">"CommandLineKey1=value1 --CommandLineKey2=value2 /CommandLineKey3=value3 --k1=k3"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">CommandLineKey1<span class="token punctuation">:</span>value1CommandLineKey2<span class="token punctuation">:</span>value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着是命令替换</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationCommandLineDemo<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//// 把入参传递给命令行参提供程序</span>            <span class="token comment" spellcheck="true">//builder.AddCommandLine(args);</span>            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 命令替换</span>            <span class="token keyword">var</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">"-k1"</span><span class="token punctuation">,</span> <span class="token string">"CommandLineKey1"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>            <span class="token keyword">var</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"CommandLineKey1:{configurationRoot["</span>CommandLineKey1<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"CommandLineKey2:{configurationRoot["</span>CommandLineKey2<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将双横杠 –k1=k3 改为 单横杠 -k1=k3</p><pre><code>{  "profiles": {    "ConfigurationCommandLineDemo": {      "commandName": "Project",      "commandLineArgs": "CommandLineKey1=value1 --CommandLineKey2=value2 /CommandLineKey3=value3 -k1=k3"    }  }}</code></pre><p>启动程序，输出如下：</p><pre><code>CommandLineKey1:k3CommandLineKey2:value2</code></pre><p>可以看出，-k1 替换了 CommandLineKey1 里面的值</p><p>这个场景是用来做什么的？</p><p>实际上可以看一下 .NET 自己的命令行工具</p><p>打开控制台，输入 dotnet –help</p><pre><code>sdk-options:  -d|--diagnostics  启用诊断输出。  -h|--help         显示命令行帮助。  --info            显示 .NET Core 信息。  --list-runtimes   显示安装的运行时。  --list-sdks       显示安装的 SDK。  --version         显示使用中的 .NET Core SDK 版本。</code></pre><p>这里可以看到 options 支持双横杠长命名和单横杠的短命名</p><p>实际上最典型的场景就是给应用的命令行参数提供了一个短命名快捷命名的方式，比如说 -h 就可以替换 –help</p><h2 id="10-环境变量配置提供程序：容器环境下配置注入的最佳途径"><a href="#10-环境变量配置提供程序：容器环境下配置注入的最佳途径" class="headerlink" title="10 | 环境变量配置提供程序：容器环境下配置注入的最佳途径"></a>10 | 环境变量配置提供程序：容器环境下配置注入的最佳途径</h2><p>环境变量的配置提供程序主要适应场景：</p><ol><li>在 Docker 中运行时</li><li>在 Kubernetes 中运行时</li><li>需要设置 ASP.NET Core 的一些内置特殊配置时</li></ol><p>环境变量和命令行这两个提供程序在早期是没有容器化的，当时一个操作系统会跑多个应用程序，应用程序注入配置的方式一般都是通过文件或者是命令行的方式来注入的，环境变量当时用的比较少</p><p>现在在容器化的环境下，有了 Docker 的隔离能力，就意味着每一个应用程序都相当于跑在一个小型的操作系统下面一样，所以说这个时候 Docker 提供的环境隔离能力让我们可以使用环境变量来配置应用程序，在 Docker 和 Kubernetes 中，会大量使用环境变量，而不是使用命令行来配置基础配置</p><p>环境变量的配置有如下特点：</p><ol><li>对于配置的分层键，支持使用双下横线 “__” 代替 “:”</li><li>支持根据前缀加载</li></ol><p>在某些操作系统，比如说 Linux 下面，冒号作为环境变量的 Key 值是不行的，所以说这里支持用双下划线来代替冒号，也就是说当遇到双下划线的环境变量时，可以认为这是一个分层键</p><p>环境变量提供程序还支持根据环境变量的前缀来加载</p><p>接下来是代码演示：</p><p>首先引入三个包</p><ul><li>Microsoft.Extensions.Configuration.Abstractions</li><li>Microsoft.Extensions.Configuration</li><li>Microsoft.Extensions.Configuration.EnvironmentVariables</li></ul><p>然后看一下环境变量如何在调试环境下注入</p><p>右键项目，属性，调试，环境变量</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2018.cnblogs.com/blog/1412316/202002/1412316-20200227005129677-597064997.jpg" alt=""></p><p>同样的在 Properties 下的 launchSettings.json 可以看到配置</p><pre><code>{  "profiles": {    "ConfigurationEnvironmentVariablesDemo": {      "commandName": "Project",      "environmentVariables": {        "KEY1": "value1",        "KEY2": "value2",        "SECTION1__KEY3": "value3",        "SECTION1__SECTION2__KEY4": "value4",        "XIAO_KEY1": "xiao key1"      }    }  }}</code></pre><p>主程序</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationEnvironmentVariablesDemo<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">AddEnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"key1:{configurationRoot["</span>key1<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>key1:value1</code></pre><p>分层键</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// "SECTION1__KEY3": "value3"</span><span class="token comment" spellcheck="true">// 我们定义了一个分层键 SECTION1，用双下划线隔开，这个 section 下面有一个 KEY3 的 Key</span><span class="token keyword">var</span> section <span class="token operator">=</span> configurationRoot<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"SECTION1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"KEY3:{section["</span>KEY3<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>KEY3:value3</code></pre><p>多级分层键</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// "SECTION1__SECTION2__KEY4": "value4"</span><span class="token keyword">var</span> section2 <span class="token operator">=</span> configurationRoot<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"SECTION1:SECTION2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"KEY4:{section2["</span>KEY4<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>KEY4:value4</code></pre><p>前缀过滤：是指在注入环境变量的时候，指定一个前缀，意味着只注入指定前缀的环境变量，而不是把整个操作系统的所有环境变量注入进去</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// "XIAO_KEY1": "xiao key1"</span><span class="token comment" spellcheck="true">// build 之后把读取到的环境变量的前缀去掉</span>builder<span class="token punctuation">.</span><span class="token function">AddEnvironmentVariables</span><span class="token punctuation">(</span><span class="token string">"XIAO_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"KEY1:{configurationRoot["</span>KEY1<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "KEY2": "value2"</span><span class="token comment" spellcheck="true">// 在注入的时候，凡是没有 XIAO_ 开头的 Key 都没有注入进来，仅注册进来需要的一个环境变量值</span><span class="token comment" spellcheck="true">// 适合当需要加载特定的值，去掉系统其他值的干扰项的场景使用</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"KEY2:{configurationRoot["</span>KEY2<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>KEY1:xiao key1KEY2:value2</code></pre><h2 id="11-文件配置提供程序：自由选择配置的格式"><a href="#11-文件配置提供程序：自由选择配置的格式" class="headerlink" title="11 | 文件配置提供程序：自由选择配置的格式"></a>11 | 文件配置提供程序：自由选择配置的格式</h2><p>文件配置提供程序</p><ul><li>Microsoft.Extensions.Configuration.Ini</li><li>Microsoft.Extensions.Configuration.Json</li><li>Microsoft.Extensions.Configuration.NewtonsoftJson</li><li>Microsoft.Extensions.Configuration.Xml</li><li>Microsoft.Extensions.Configuration.UserSecrets</li></ul><p>这些都是读取不同文件的格式，或者从不同的位置来读取文件</p><p>文件提供程序支持</p><ul><li>文件是否可选</li><li>监视文件的变更</li></ul><p>下面通过代码来了解这些特性</p><p>引用以下四个包：</p><ul><li>Microsoft.Extensions.Configuration</li><li>Microsoft.Extensions.Configuration.Abstractions</li><li>Microsoft.Extensions.Configuration.Ini</li><li>Microsoft.Extensions.Configuration.Json</li></ul><p>读取 appsettings.json</p><pre><code>{  "Key1": "Value1",  "Key2": "Value2"}</code></pre><p>主程序</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key1:{configurationRoot["</span>Key1<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key2:{configurationRoot["</span>Key2<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key3:{configurationRoot["</span>Key3<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>Key1:Value1Key2:Value2Key3:</code></pre><p>Key3 不存在，所以他的值是空的</p><p>文件是否可选是它的第二个参数 optional，默认情况下是 false</p><pre class="line-numbers language-csharp"><code class="language-csharp">builder<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这意味当文件不存在的时候它会报错</p><p>它的另一个参数是 reloadOnChange， 默认情况下是 true</p><pre class="line-numbers language-sharp"><code class="language-sharp">builder.AddJsonFile("appsettings.json", optional:false, reloadOnChange:true);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这意味着每次文件变更，它会去读取新文件</p><p>接下来看一下 appsettings.ini</p><pre><code>Key3=Value3 in ini</code></pre><p>主程序</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span><span class="token keyword">false</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">AddIniFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key1:{configurationRoot["</span>Key1<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key2:{configurationRoot["</span>Key2<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key3:{configurationRoot["</span>Key3<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Key1<span class="token punctuation">:</span>Value1Key2<span class="token punctuation">:</span>Value2Key3<span class="token punctuation">:</span>Value3 <span class="token keyword">in</span> ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里可以看到新添加的配置已经生效</p><p>builder 中添加配置源是有顺序关系的，后添加的配置会覆盖先添加的配置</p><h2 id="12-配置变更监听：配置热更新能力的核心"><a href="#12-配置变更监听：配置热更新能力的核心" class="headerlink" title="12 | 配置变更监听：配置热更新能力的核心"></a>12 | 配置变更监听：配置热更新能力的核心</h2><p>这一节讲解如何使用代码来监视配置变化并做出一些动作</p><p>当我们需要追踪配置发生的变化，可以在变化发生时执行一些特定的操作</p><p>配置主要提供了一个 GetReloadToken 方法，这就是跟踪配置的关键方法</p><p>接着使用上一节的代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span><span class="token keyword">true</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IChangeToken token <span class="token operator">=</span> configurationRoot<span class="token punctuation">.</span><span class="token function">GetReloadToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IChangeToken 有两个属性和一个方法</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IChangeToken</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> HasChanged <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">bool</span> ActiveChangeCallbacks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    IDisposable <span class="token function">RegisterChangeCallback</span><span class="token punctuation">(</span>Action<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span> callback<span class="token punctuation">,</span> <span class="token keyword">object</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着注册 Callback</p><pre class="line-numbers language-csharp"><code class="language-csharp">token<span class="token punctuation">.</span><span class="token function">RegisterChangeCallback</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key1:{configurationRoot["</span>Key1<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key2:{configurationRoot["</span>Key2<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key3:{configurationRoot["</span>Key3<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> configurationRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，修改配置文件，触发 Callback</p><p>多次修改配置文件没有效果？</p><p>因为 IChangeToken 这个对象只能使用一次，也就是说捕获到变更并且执行代码之后，需要再重新获取一个新的 IChangeToken，再次注册</p><pre class="line-numbers language-csharp"><code class="language-csharp">token<span class="token punctuation">.</span><span class="token function">RegisterChangeCallback</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key1:{configurationRoot["</span>Key1<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key2:{configurationRoot["</span>Key2<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key3:{configurationRoot["</span>Key3<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    token <span class="token operator">=</span> configurationRoot<span class="token punctuation">.</span><span class="token function">GetReloadToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    token<span class="token punctuation">.</span><span class="token function">RegisterChangeCallback</span><span class="token punctuation">(</span>state2 <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> configurationRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> configurationRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将变成一个无限循环的过程，微软实际上提供了一个比较方便使用的快捷的扩展方法，这个方法可以帮助我们轻松地处理这件事，也就意味着每次触发完成以后可以重新绑定</p><pre><code>ChangeToken.OnChange(() =&gt; configurationRoot.GetReloadToken(), () =&gt;{    Console.WriteLine($"Key1:{configurationRoot["Key1"]}");    Console.WriteLine($"Key2:{configurationRoot["Key2"]}");    Console.WriteLine($"Key3:{configurationRoot["Key3"]}");});</code></pre><p>第一个参数是获取 IChangeToken 的方法</p><p>第二个参数是处理变更的注入方法</p><p>启动程序，修改配置文件，多次触发 Callback</p><h2 id="13-配置绑定：使用强类型对象承载配置数据"><a href="#13-配置绑定：使用强类型对象承载配置数据" class="headerlink" title="13 | 配置绑定：使用强类型对象承载配置数据"></a>13 | 配置绑定：使用强类型对象承载配置数据</h2><p>要点：</p><ol><li><p>支持将配置值绑定到已有对象</p></li><li><p>支持将配置值绑定到私有属性上</p></li></ol><p>继续使用上一节代码</p><p>首先定义一个类作为接收配置的实例</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Key1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> Key5 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Key6 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span>  <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着看一下配置文件，appsettings.json</p><pre><code>{  "Key1": "Value1",  "Key2": "Value2",  "Key5": true,  "Key6": 0}</code></pre><p>新增一个引用包</p><ul><li>Microsoft.Extensions.Configuration.Binder</li></ul><p>这个包的作用就是让我们能够很方便的把配置绑定到强类型上面去</p><p>主程序</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span><span class="token keyword">true</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Key1 <span class="token operator">=</span> <span class="token string">"config key1"</span><span class="token punctuation">,</span>    Key5 <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    Key6 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>configurationRoot<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key1:{config.Key1}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key5:{config.Key5}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Key6:{config.Key6}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>Key1:Value1Key5:TrueKey6:0</code></pre><p>可以看出，绑定的字段都是从配置中读出来的</p><p>实际上通常意义来讲，配置文件不会这么简单，一般都是有嵌套格式</p><pre><code>{  "Key2": "Value2",  "Key6": 0,  "OrderService": {    "Key1": "order key1",    "Key5": true,    "Key6": 200  }}</code></pre><p>在这种情形下，需要把 section 绑定给 config 对象</p><pre class="line-numbers language-csharp"><code class="language-csharp">configurationRoot<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"OrderService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以对不同的配置进行分组，并且分别绑定，避免配置混在一起</p><p>启动程序，输出如下：</p><pre><code>Key1:order key1Key5:TrueKey6:200</code></pre><p>也就是说可以从任意的节来读取配置，并且绑定到类型上面</p><p>这里定义的所有类型，所有的字段都是 public，但有一些场景下面可能是 private，对于私有的字段，默认情况下，是不会去绑定的，也不允许赋默认值，可以在定义时设置</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Key1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> Key5 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Key6 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主程序</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Key1 <span class="token operator">=</span> <span class="token string">"config key1"</span><span class="token punctuation">,</span>    Key5 <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>configurationRoot<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"OrderService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>Key1:order key1Key5:TrueKey6:100</code></pre><p>可以看到 Key6 的值是100，没有发生变化，而配置中的值是200</p><p>要让私有变量生效，实际上 Bind 还有另外一个参数</p><pre class="line-numbers language-csharp"><code class="language-csharp">configurationRoot<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"OrderService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>                binderOptions <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> binderOptions<span class="token punctuation">.</span>BindNonPublicProperties <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>Key1:order key1Key5:TrueKey6:200</code></pre><p>这样一来，私有字段也都可以从配置里面赋值了</p><h2 id="14-自定义配置数据源：低成本实现定制化配置方案"><a href="#14-自定义配置数据源：低成本实现定制化配置方案" class="headerlink" title="14 | 自定义配置数据源：低成本实现定制化配置方案"></a>14 | 自定义配置数据源：低成本实现定制化配置方案</h2><p>这一节讲解如何定义自己的数据源，来扩展配置框架</p><p>扩展步骤</p><ol><li>实现 IConfigurationSource</li><li>实现 IConfigurationProvider</li><li>实现 AddXXX 扩展方法，用来作为注入的快捷方式</li></ol><p>首先定义一个 MyConfigurationSource</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationCustom<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MyConfigurationSource</span> <span class="token punctuation">:</span> IConfigurationSource    <span class="token punctuation">{</span>        <span class="token keyword">public</span> IConfigurationProvider <span class="token function">Build</span><span class="token punctuation">(</span>IConfigurationBuilder builder<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyConfigurationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着是 MyConfigurationProvider</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationCustom<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ConfigurationProvider 集成自 IConfigurationProvider</span>    <span class="token keyword">class</span> <span class="token class-name">MyConfigurationProvider</span> <span class="token punctuation">:</span> ConfigurationProvider    <span class="token punctuation">{</span>        Timer timer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyConfigurationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 用一个线程模拟配置发生变化，每三秒钟执行一次，告诉我们要重新加载配置</span>            timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+</span><span class="token operator">=</span> Timer_Elapsed<span class="token punctuation">;</span>            timer<span class="token punctuation">.</span>Interval <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>            timer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Timer_Elapsed</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> ElapsedEventArgs e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 加载数据</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="reload">是否重新加载数据&lt;/param></span>        <span class="token keyword">void</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">bool</span> reload<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Data 表示 Key-value 数据，这是由 ConfigurationProvider 提供的一个数据承载的集合</span>            <span class="token comment" spellcheck="true">// 我们把最新的时间填充进去</span>            Data<span class="token punctuation">[</span><span class="token string">"lastTime"</span><span class="token punctuation">]</span> <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reload<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnReload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上到此扩展就已经完成了，可以通过 builder.AddXXX 这个方法来把 source 注入进来</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationCustom<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> configRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"lastTime:{configRoot["</span>lastTime<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>lastTime:2020/3/1 22:39:36</code></pre><p>这里可以看到，输出最新的时间</p><p>但是如果这样去分发配置源的包的话，需要把 MyConfigurationSource<br>定义为 public，否则使用方式没办法引用到这个类</p><p>那么就可以通过扩展方法的方式来保障不需要暴露 ConfigSource</p><p>定义一个扩展方法 AddMyConfiguration</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigurationBuilderExtensions</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfigurationBuilder <span class="token function">AddMyConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span> IConfigurationBuilder builder<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先把扩展方法的命名空间放在 config 的命名空间，而不是自己的命名空间，这样方便在引用的时候直接使用而无需加载具体的命名空间</p><p>另外一个可以把 Provider 定义为 internal 的，默认是 internal，如果说分发到第三方的话，internal 的类是不能被引用的，这样就意味着只需要暴露一个扩展方法，而不需要暴露具体的配置源的实现</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyConfigurationProvider</span> <span class="token punctuation">:</span> ConfigurationProvider<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何使用呢，其实很简单</p><p>只需要在 builder.Add 的时候使用 builder.AddMyConfiguration 就可以了，这样达到的效果是一样的</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationCustom<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//builder.Add(new MyConfigurationSource());</span>            builder<span class="token punctuation">.</span><span class="token function">AddMyConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> configRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"lastTime:{configRoot["</span>lastTime<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>lastTime:2020/3/1 22:55:11</code></pre><p>在定义扩展的时候，都推荐这样去做，把具体实现都定义为私有的，然后通过扩展方法的方式暴露出去</p><p>刚才实际上还定义了一个 timer 来模拟配置的变更，这里可以监听一下它的变更，看是否生效</p><p>上一节讲到 ChangeToken 的方式，这里还是用 ChangeToken 的 OnChange 方法</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ConfigurationCustom<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">AddMyConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> configRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChangeToken<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> configRoot<span class="token punctuation">.</span><span class="token function">GetReloadToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"lastTime:{configRoot["</span>lastTime<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"开始了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">开始了lastTime<span class="token punctuation">:</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">1</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">25</span>lastTime<span class="token punctuation">:</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">1</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">28</span>lastTime<span class="token punctuation">:</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">1</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>每个三秒钟输出一次，这说明我们定义的配置变更的通知已经生效了</p><p>MyConfigurationProvider 中我们只是通过赋值一个 DateTime 来模拟配置源</p><p>实际上可以从远程来说，比如阿波罗的配置中心，Kazoo，这些地方远程的读取配置，结合着命令行和环境变量配置，就可以完成配置中心的远程方案，意味着可以版本化的管理配置</p><p>这样子在 Docker 容器环境下面，Kubernetes 环境下面，就可以有完善的配置管理解决方案</p><h2 id="15-选项框架：服务组件集成配置的最佳实践"><a href="#15-选项框架：服务组件集成配置的最佳实践" class="headerlink" title="15 | 选项框架：服务组件集成配置的最佳实践"></a>15 | 选项框架：服务组件集成配置的最佳实践</h2><p>这一节讲解如何使用选项框架来处理服务和配置的关系</p><p>选项框架的特性：</p><ol><li>支持单例模式读取配置</li><li>支持快照</li><li>支持配置变更通知</li><li>支持运行时动态修改选项值</li></ol><p>在设计系统的时候需要遵循两个原则：</p><ol><li>接口分离原则（ISP），我们的类不应该依赖它不使用的配置</li><li>关注点分离（SoC），不同组件、服务、类之间的配置不应相互依赖或耦合</li></ol><p>建议：</p><ol><li>为我们的服务设计 XXXOptions</li><li>使用 IOptions、IOptionsSnapshot、IOptionsMonitor作为服务构造函数的参数</li></ol><p>这样会让我们更快的实现服务配置的各种能力</p><p>在定义服务的时候，一般先定义服务接口</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> OptionsDemo<span class="token punctuation">.</span>Services<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrderService</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token function">ShowMaxOrderCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">:</span> IOrderService    <span class="token punctuation">{</span>        OrderServiceOptions _options<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OrderService</span><span class="token punctuation">(</span>OrderServiceOptions options<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _options <span class="token operator">=</span> options<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">ShowMaxOrderCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> _options<span class="token punctuation">.</span>MaxOrderCount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 代表从配置中读取的值</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceOptions</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> MaxOrderCount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着是服务注册</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着是控制器的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>IOrderService orderService<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"orderService.ShowMaxOrderCount:{orderService.ShowMaxOrderCount()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>orderService.ShowMaxOrderCount:100</code></pre><p>如果说我们需要把这个值跟配置绑定，怎么做呢？</p><p>首先需要引入 Options 框架</p><p>ASP.NET Core 实际上已经默认帮我们把框架引入进来了</p><p>命名空间是：Microsoft.Extensions.Options</p><p>我们需要修改一下服务的入参</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">:</span> IOrderService<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//OrderServiceOptions _options;</span>    IOptions<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> _options<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public OrderService(OrderServiceOptions options)</span>    <span class="token keyword">public</span> <span class="token function">OrderService</span><span class="token punctuation">(</span>IOptions<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> options<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _options <span class="token operator">=</span> options<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">ShowMaxOrderCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return _options.MaxOrderCount;</span>        <span class="token keyword">return</span> _options<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>MaxOrderCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册的时候使用 config 方法，从配置文件读取</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//services.AddSingleton&lt;OrderServiceOptions>();</span>    services<span class="token punctuation">.</span><span class="token generic-method function">Configure<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"OrderService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件</p><pre><code>{  "OrderService": {    "MaxOrderCount": 200  }}</code></pre><p>启动程序，输出如下：</p><pre><code>orderService.ShowMaxOrderCount:200</code></pre><p>可以看到，输出的值为200，说明配置与选项已经完成绑定</p><p>服务只依赖了 OrderServiceOptions，并没有依赖配置框架，也就是说服务只关心配置的值是什么，它并不关心配置的值从哪里来，解除了配置与服务之间的依赖</p><p>另外可以为所有的服务分别设计它们的 Options，这样服务之间的选项配置也都不会互相依赖</p><h2 id="16-选项数据热更新：让服务感知配置的变化"><a href="#16-选项数据热更新：让服务感知配置的变化" class="headerlink" title="16 | 选项数据热更新：让服务感知配置的变化"></a>16 | 选项数据热更新：让服务感知配置的变化</h2><p>选项框架还有两个关键类型：</p><ol><li>IOptionsMonitor</li><li>IOptionsSnapshot</li></ol><p>场景：</p><ol><li>范围作用域类型使用 IOptinsSnapshot</li><li>单例服务使用 IOptionsMonitor</li></ol><p>通过代码更新选项：</p><p><strong>IPostConfigureOptions</strong></p><p>延续上一节的代码，但是做一些特殊处理，之前注册 Order 服务用的是单例模式，这里改为 Scoped 模式</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    services<span class="token punctuation">.</span><span class="token generic-method function">Configure<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"OrderService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//services.AddSingleton&lt;IOrderService, OrderService>();</span>    services<span class="token punctuation">.</span><span class="token generic-method function">AddScoped<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service 还是使用 IOptions</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">:</span> IOrderService<span class="token punctuation">{</span>    IOptions<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> _options<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderService</span><span class="token punctuation">(</span>IOptions<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> options<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _options <span class="token operator">=</span> options<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">ShowMaxOrderCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> _options<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>MaxOrderCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>orderService.ShowMaxOrderCount:200</code></pre><p>修改配置</p><pre><code>{    "OrderService": {    "MaxOrderCount": 2000  }}</code></pre><p>启动程序，输出如下：</p><pre><code>orderService.ShowMaxOrderCount:200</code></pre><p>输出值还是200</p><p>那么如何能够读到新的配置呢？</p><p>只需要把 IOptions 换成 IOptionsSnapshot 即可</p><pre class="line-numbers language-csharp"><code class="language-csharp">IOptionsSnapshot<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> _options<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">OrderService</span><span class="token punctuation">(</span>IOptionsSnapshot<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为我们的服务注册的是 Scoped 模式，并且使用 Snapshot 来读取配置，每次请求都会重新计算并读取配置</p><p>那如果我们的服务是单例的时候怎么办呢？</p><p>把服务注册改为单例模式</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里需要使用另一个接口，把 Snapshot 改为 Monitor</p><pre class="line-numbers language-csharp"><code class="language-csharp">IOptionsMonitor<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> _options<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">OrderService</span><span class="token punctuation">(</span>IOptionsMonitor<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Monitor 与 Snapshot 的定义略微有些不同，它获取值是需要用 CurrentValue 字段</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">ShowMaxOrderCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> _options<span class="token punctuation">.</span>CurrentValue<span class="token punctuation">.</span>MaxOrderCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，修改配置文件，刷新浏览器，可以看到输出了修改后的数据，也就是说单例对象同时也能读取到最新的配置</p><p>如果说我想知道配置的值发生变化并且通知到我的 Options 怎么做呢？</p><p>首先看一下 Monitor 的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOptionsMonitor</span><span class="token operator">&lt;</span><span class="token keyword">out</span> TOptions<span class="token operator">></span>  <span class="token punctuation">{</span>    TOptions CurrentValue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    TOptions <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    IDisposable <span class="token function">OnChange</span><span class="token punctuation">(</span>Action<span class="token operator">&lt;</span>TOptions<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它有一个 OnChange 方法，也就是说可以监听它的变更</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">OrderService</span><span class="token punctuation">(</span>IOptionsMonitor<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">{</span>    _options <span class="token operator">=</span> options<span class="token punctuation">;</span>    _options<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span>option <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"配置更新了，最新的值是:{_options.CurrentValue.MaxOrderCount}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，修改配置，可以看到输出配置变化，也就是说可以在单例模式下监听到 Options 的变化</p><p>通常情况下，在设计服务的时候，会在 ConfigureServices 添加配置注入、服务注入，但是当配置多起来的时候，注入代码就会非常多</p><p>那么如何使代码结构更加良好？</p><p>实际上可以<strong>把服务注册的代码放在静态扩展方法里</strong>，使得 ConfigureServices 更加简洁</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceExtensions</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddOrderService</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span>IConfiguration configuration<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            services<span class="token punctuation">.</span><span class="token generic-method function">Configure<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> services<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样在 Startup 的注册就变得更为简单了</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddOrderService</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"OrderService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们在设计系统的时候会涉及大量的 service，所以我们可以把 service 的注册提炼在扩展方法里，不同的模块用不同的扩展方法隔开，使模块之间更加清晰，代码的结构也更加的清晰</p><p>那么实际上我们在设计服务的时候，还有一些特殊的述求，比如说把配置读取出来之后，还需要在内存里面进行一些特殊的处理，我们就可以使用动态配置的方式</p><p>动态配置的方式是在我们的 Configure 的代码之后，调用 PostConfigure 的方法，这里需要配置 OrderServiceOptions</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceExtensions</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddOrderService</span><span class="token punctuation">(</span><span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span>IConfiguration configuration<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            services<span class="token punctuation">.</span><span class="token generic-method function">Configure<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token generic-method function">PostConfigure<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                options<span class="token punctuation">.</span>MaxOrderCount <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">,</span> OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> services<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，可以看到输出动态增加了20</p><h2 id="17-为选项数据添加验证：避免错误配置的应用接收用户流量"><a href="#17-为选项数据添加验证：避免错误配置的应用接收用户流量" class="headerlink" title="17 | 为选项数据添加验证：避免错误配置的应用接收用户流量"></a>17 | 为选项数据添加验证：避免错误配置的应用接收用户流量</h2><p>三种验证方法</p><ol><li>直接注册验证函数</li><li>实现 IValidateOptions</li><li>使用 Microsoft.Extensions.Options.DataAnnotations</li></ol><p>延用上一节代码</p><p>需要添加验证的时候不能用 Configure，而用 AddOptions 方法</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//services.Configure&lt;OrderServiceOptions>(configuration);</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddOptions<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    configuration<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> options<span class="token punctuation">.</span>MaxOrderCount <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"MaxOrderCount 不能大于100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置中的值是200，所以运行之后报错，提示 “MaxOrderCount 不能大于100”</p><p>接着使用属性的方式，切换成属性注入</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddOptions<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    configuration<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ValidateDataAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还需要修改 OrderServiceOptions，定义它的验证属性</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceOptions</span><span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> MaxOrderCount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置中的值是200，所以运行之后报错，提示 “MaxOrderCount 的值必须在30到100之间”</p><p>接着是第三种方式，实现接口的方式</p><p>首先是定义验证类</p><pre class="line-numbers language-cshar"><code class="language-cshar">public class OrderServiceValidateOptions : IValidateOptions<OrderServiceOptions>{    public ValidateOptionsResult Validate(string name, OrderServiceOptions options)    {        if (options.MaxOrderCount > 100)        {            return ValidateOptionsResult.Fail("MaxOrderCount 不能大于100");        }        else        {            return ValidateOptionsResult.Success;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要使用这个类，需要注入进去</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method function">AddOptions<span class="token punctuation">&lt;</span>OrderServiceOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    configuration<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Services<span class="token punctuation">.</span>AddSingleton<span class="token operator">&lt;</span>IValidateOptions<span class="token operator">&lt;</span>OrderServiceOptions<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderServiceValidateOptions</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置中的值是200，所以运行之后报错，提示 “MaxOrderCount 不能大于100”</p><p>总结一下，通过添加选项的验证，可以在配置错误的情况下阻止应用程序启动，这样就可以避免用户流量达到错误的节点上。</p><h2 id="18-日志框架：聊聊记日志的最佳姿势"><a href="#18-日志框架：聊聊记日志的最佳姿势" class="headerlink" title="18 | 日志框架：聊聊记日志的最佳姿势"></a>18 | 日志框架：聊聊记日志的最佳姿势</h2><p>日志框架必要的包：</p><ol><li>Microsoft.Extensions.Logging</li><li>Microsoft.Extensions.Logging.Console</li><li>Microsoft.Extensions.Logging.Debug</li><li>Microsoft.Extensions.Logging.TraceSource</li></ol><p>代码通过一个控制台程序，展示从读取配置到整个日志的记录器的构造和日志记录的过程<br>首先从文件读取配置</p><pre class="line-numbers language-csharp"><code class="language-csharp">IConfigurationBuilder configBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configBuilder<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> configBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接着构造容器，注入对象</p><pre class="line-numbers language-csharp"><code class="language-csharp">IServiceCollection serviceCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造容器</span><span class="token comment" spellcheck="true">// 用工厂模式将配置对象注册到容器管理</span><span class="token comment" spellcheck="true">// 注入的时候使用了一个委托，意味着容器可以帮我们管理这个对象的生命周期</span>serviceCollection<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IConfiguration<span class="token punctuation">></span></span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果将实例直接注入，容器不会帮我们管理</span><span class="token comment" spellcheck="true">//serviceCollection.AddSingleton&lt;IConfiguration>(config);</span><span class="token comment" spellcheck="true">// AddLogging 往容器里面注册了几个关键对象：</span><span class="token comment" spellcheck="true">// ILoggerFactory，泛型模板 typeof (ILogger&lt;>)，Logger 的过滤配置 IConfigureOptions&lt;LoggerFilterOptions></span><span class="token comment" spellcheck="true">// 最后一行，configure((ILoggingBuilder) new LoggingBuilder(services)); 就是整个注入我们的委托</span>serviceCollection<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    builder<span class="token punctuation">.</span><span class="token function">AddConfiguration</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"Logging"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注册 Logging 配置的 Section</span>    builder<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 先使用一个 Console 的日志输出提供程序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AddLogging 源码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IServiceCollection <span class="token function">AddLogging</span><span class="token punctuation">(</span>      <span class="token keyword">this</span> IServiceCollection services<span class="token punctuation">,</span>      Action<span class="token operator">&lt;</span>ILoggingBuilder<span class="token operator">></span> configure<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>services <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span> <span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  services<span class="token punctuation">.</span><span class="token function">AddOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method function">Singleton<span class="token punctuation">&lt;</span>ILoggerFactory<span class="token punctuation">,</span> LoggerFactory<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>Logger<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  services<span class="token punctuation">.</span><span class="token function">TryAddEnumerable</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span>Singleton<span class="token operator">&lt;</span>IConfigureOptions<span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>IConfigureOptions<span class="token operator">&lt;</span>LoggerFilterOptions<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">DefaultLoggerLevelConfigureOptions</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ILoggingBuilder<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">LoggingBuilder</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> services<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件，appsettings.json</p><pre><code>{  "Logging": {    "LogLevel": {      "Default": "Debug",      "Microsoft": "Warning",      "Microsoft.Hosting.Lifetime": "Information"    },    "Console": {      "LogLevel": {        "Default": "Information",        "Program": "Trace",        "alogger": "Trace",        "LoggingSimpleDemo.OrderService": "None"      }    }  }}</code></pre><p>Logging 里面定义了 Log 的级别，Key 代表 Log 的名称，Value 代表 Logger 的级别</p><p>Console 是指针对 Console 的输出提供程序配置的日志级别</p><p>下面看一下日志级别的定义，按照严重程度从低到高</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Logging<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> LogLevel  <span class="token punctuation">{</span>    Trace<span class="token punctuation">,</span>    Debug<span class="token punctuation">,</span>    Information<span class="token punctuation">,</span>    Warning<span class="token punctuation">,</span>    Error<span class="token punctuation">,</span>    Critical<span class="token punctuation">,</span>    None<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说我们可以指定日志输出的最低级别</p><p>接着 BuildServiceProvider，从容器里面获取 ILoggerFactory</p><pre class="line-numbers language-csharp"><code class="language-csharp">IServiceProvider service <span class="token operator">=</span> serviceCollection<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ILoggerFactory loggerFactory <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>ILoggerFactory<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ILoggerFactory 的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Logging<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoggerFactory</span> <span class="token punctuation">:</span> IDisposable  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输入的名称是 Logger 的名称，输出的结果是一个 ILogger 的对象，代表日志记录器</span>    ILogger <span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token keyword">string</span> categoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个方法通常不会用到它，因为通常情况下注册容器提供程序会在 AddLogging 委托里面去注册，而不会用 AddProvider 方法</span>    <span class="token keyword">void</span> <span class="token function">AddProvider</span><span class="token punctuation">(</span>ILoggerProvider provider<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到 ILoggerFactory 之后就可以创建日志记录器</p><pre class="line-numbers language-csharp"><code class="language-csharp">ILogger alogger <span class="token operator">=</span> loggerFactory<span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token string">"alogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alogger<span class="token punctuation">.</span><span class="token function">LogDebug</span><span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">"aiya"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alogger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alogger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为配置文件中 alogger 的级别是 Trace</p><pre><code>"alogger": "Trace",</code></pre><p>所以这三行都会被打印出来</p><p>启动程序，输出如下：</p><pre><code>dbug: alogger[2001]      aiyainfo: alogger[0]      hellofail: alogger[0]      出错了System.Exception: 出错了</code></pre><p>方括号的内容是 EventID，也就是针对每一个记录的位置事件，可以为它分配一个事件 ID，代码中在 LogDebug 的时候定义了一个事件 ID 是2001</p><p>假如说把 alogger 的日志级别调整成 Information</p><pre><code>"alogger": "Information",</code></pre><p>那么 Debug 级别的信息没有输出的</p><pre><code>info: alogger[0]      hellofail: alogger[0]      出错了System.Exception: 出错了</code></pre><p>除了使用 CreateLogger 指定 logger 的名称，实际上还可以借助容器来构造 logger，通常情况下我们会定义自己的类</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> LoggingSimpleDemo<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span>    <span class="token punctuation">{</span>        ILogger<span class="token operator">&lt;</span>OrderService<span class="token operator">></span> _logger<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OrderService</span><span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span>OrderService<span class="token operator">></span> logger<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"Show Time{time}"</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，将 OrderService 注入到容器中</p><pre class="line-numbers language-csharp"><code class="language-csharp">serviceCollection<span class="token punctuation">.</span><span class="token generic-method function">AddTransient<span class="token punctuation">&lt;</span>OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IServiceProvider service <span class="token operator">=</span> serviceCollection<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> order <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>OrderService<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>order<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>日志级别设置为 Trace</p><pre><code>"LoggingSimpleDemo.OrderService": "Trace"</code></pre><p>启动程序，输出如下：</p><pre><code>info: LoggingSimpleDemo.OrderService[0]      Show Time03/06/2020 23:41:38</code></pre><p>这样做的意义是什么呢？</p><p>通常情况下并不会用 ILoggerFactory 来构造日志记录器，而是用强类型的这种依赖注入的方式来去管理我们的日志，也就是说用构造函数将泛型的 ILogger 注入进来的方式</p><p>这样的方式有个好处就是我们不需要去为 logger 定义名字，它会默认将我们类型的名称作为记录器的名字，命名空间加上类名 LoggingSimpleDemo.OrderService ，那也就是可以在配置文件里面设置日志级别</p><pre><code>"LoggingSimpleDemo.OrderService": "None"</code></pre><p>这样子就没有输出</p><p>这里面有一个小技巧，需要大家特别注意，就是当我们在记录日志的时候，尽量使用模板的方式</p><pre class="line-numbers language-csharp"><code class="language-csharp">_logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"Show Time{time}"</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下两种方式效果相同，但是字符串拼接的时机不同</p><pre class="line-numbers language-csharp"><code class="language-csharp">_logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"Show Time{time}"</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>_logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span>$<span class="token string">"Show Time{DateTime.Now}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一行代码是在我们决定要输出的时候，也就是在 LogInformation 内部 console 要输出的时候才做拼接的动作</p><p>第二行代码是指我们在字符串拼接好以后，输入给了 LogInformation</p><p>如果我们把日志级别关掉</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token string">"LoggingSimpleDemo.OrderService"</span><span class="token punctuation">:</span> <span class="token string">"None"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两行代码都不会有输出，但是第一行代码字符串拼接的动作不会执行，第二行代码已经执行了，第一行代码节省了运行资源</p><p>另外一个就是，在记录日志的时候，不要把敏感信息记录到日志中，记录日志的目的是为了调试或者定位问题</p><p>总结一下</p><ol><li>日志级别定义</li></ol><p>日志级别会从严重程度的低到高定义，可以决定输出的最低级别</p><ol start="2"><li>日志对象获取</li></ol><p>可以通过 ILoggerFactory 的方式获取日志对象，对它指定一个名字，也可以通过 ILogger 泛型的模式，从容器中获取日志对象，最推荐的就是强类型的泛型模式</p><ol start="3"><li>日志过滤的配置逻辑</li></ol><p>可以针对 logger 的名称来进行任意的配置，日志的开关以及日志的级别</p><ol start="4"><li>日志记录的方法</li></ol><p>LogInformation，LogDebug，还有一些小技巧，使用模板的方式记录日志，而不是提前拼接字符串输入给日志系统</p><ol start="5"><li>避免记录敏感信息，如密码、密钥，规避安全风险</li></ol><h2 id="19-日志作用域：解决不同请求之间的日志干扰"><a href="#19-日志作用域：解决不同请求之间的日志干扰" class="headerlink" title="19 | 日志作用域：解决不同请求之间的日志干扰"></a>19 | 日志作用域：解决不同请求之间的日志干扰</h2><p>开始之前先看一下上一节的代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 配置的框架</span><span class="token keyword">var</span> configBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configBuilder<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>configBuilder<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> configBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IServiceCollection serviceCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serviceCollection<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>IConfiguration<span class="token punctuation">></span></span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 日志的框架</span>serviceCollection<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    builder<span class="token punctuation">.</span><span class="token function">AddConfiguration</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"Logging"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注册 Logging 配置的 Section</span>    builder<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 先使用一个 Console 的日志输出提供程序</span>    builder<span class="token punctuation">.</span><span class="token function">AddDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以观察到配置的框架和日志的框架，它们的设计模式是很相似的</p><p>区别就是：</p><p>配置的框架是从不同的数据源读取数据并且供给我们结构化的数据可以读取</p><p>日志框架是用统一的记录方式，让我们可以把日志记录到不同的地方去，输出到不同的地方去</p><p>接下来演示一下关于日志的作用域的部分</p><p>日志作用域几个常用场景：</p><ol><li>一个事务包含多条操作时：比如说在一个事务里面去操作的时候，会需要记录多条日志，需要把多条日志串联在一起，而不是记录成一行</li><li>复杂流程的日志关联时：比如说工作流流程里面去进入这个日志</li><li>调用链追踪与请求处理过程对应时：如果在调用链追踪过程中记录了多条日志，希望把日志串联在一起的时候，作用域就发挥了作用</li></ol><p>主程序</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> LoggingScopeDemo<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> configBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            configBuilder<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            configBuilder<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> config <span class="token operator">=</span> configBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IServiceCollection serviceCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serviceCollection<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用工厂模式将配置对象注册到容器管理</span>            serviceCollection<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span>builder <span class="token operator">=</span><span class="token operator">></span>            <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">AddConfiguration</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"Logging"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">AddDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IServiceProvider service <span class="token operator">=</span> serviceCollection<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> logger <span class="token operator">=</span> service<span class="token punctuation">.</span>GetService<span class="token operator">&lt;</span>ILogger<span class="token operator">&lt;</span>Program<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 相当于记录了一条上下文串联的日志</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">BeginScope</span><span class="token punctuation">(</span><span class="token string">"ScopeId:{scopeId}"</span><span class="token punctuation">,</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"这是Info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"这是Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">LogTrace</span><span class="token punctuation">(</span><span class="token string">"这是Trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">{</span>  <span class="token string">"Logging"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"LogLevel"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"Default"</span><span class="token punctuation">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span>      <span class="token string">"Microsoft"</span><span class="token punctuation">:</span> <span class="token string">"Warning"</span><span class="token punctuation">,</span>      <span class="token string">"Microsoft.Hosting.Lifetime"</span><span class="token punctuation">:</span> <span class="token string">"Information"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"Console"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"IncludeScopes"</span><span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      <span class="token string">"LogLevel"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"Default"</span><span class="token punctuation">:</span> <span class="token string">"Information"</span><span class="token punctuation">,</span>        <span class="token string">"LoggingScopeDemo.Program"</span><span class="token punctuation">:</span> <span class="token string">"Trace"</span><span class="token punctuation">,</span>        <span class="token string">"alogger"</span><span class="token punctuation">:</span> <span class="token string">"Trace"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">info<span class="token punctuation">:</span> LoggingScopeDemo<span class="token punctuation">.</span>Program<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      这是Infofail<span class="token punctuation">:</span> LoggingScopeDemo<span class="token punctuation">.</span>Program<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      这是Errortrce<span class="token punctuation">:</span> LoggingScopeDemo<span class="token punctuation">.</span>Program<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      这是Trace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和之前一样的输出，接着修改配置文件</p><pre><code>"IncludeScopes": true,</code></pre><p>启动程序，输出如下：</p><pre><code>info: LoggingScopeDemo.Program[0]      =&gt; ScopeId:b8ef7682-6c6d-4f74-83c8-b9fd4613c623      这是Infofail: LoggingScopeDemo.Program[0]      =&gt; ScopeId:b8ef7682-6c6d-4f74-83c8-b9fd4613c623      这是Errortrce: LoggingScopeDemo.Program[0]      =&gt; ScopeId:b8ef7682-6c6d-4f74-83c8-b9fd4613c623      这是Trace</code></pre><p>可以看到，日志里面有 scope，并且三条日志都包含了相同的 ScopeId，这个是由我们决定 Scope 的内容是什么，一般推荐使用一个唯一标识，比如 HTTP 请求的 id，或者是 session 的 id，或者是事务的 id</p><p>接着修改为循环</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 只要输入不是 Esc 就循环执行</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Key <span class="token operator">!=</span> ConsoleKey<span class="token punctuation">.</span>Escape<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 相当于记录了一条上下文串联的日志</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">BeginScope</span><span class="token punctuation">(</span><span class="token string">"ScopeId:{scopeId}"</span><span class="token punctuation">,</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"这是Info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"这是Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">LogTrace</span><span class="token punctuation">(</span><span class="token string">"这是Trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"============分割线============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>info: LoggingScopeDemo.Program[0]      =&gt; ScopeId:cc25dd86-d3fe-41e8-b607-61912c65bde7      这是Info============分割线=============fail: LoggingScopeDemo.Program[0]      =&gt; ScopeId:cc25dd86-d3fe-41e8-b607-61912c65bde7      这是Errortrce: LoggingScopeDemo.Program[0]      =&gt; ScopeId:cc25dd86-d3fe-41e8-b607-61912c65bde7      这是Trace</code></pre><p>这里可以看到分割线有点错乱，这是因为 Console 的提供程序实际上内部是用异步的方式在记录，那也就是这里遇到并发的问题</p><p>调整一下代码，让主线程休息一下</p><pre class="line-numbers language-csharp"><code class="language-csharp">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"============分割线============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样子启动之后顺序就正确了</p><p>在程序启动的情况下，修改 Debug 目录下的配置文件</p><pre><code>"IncludeScopes": false,</code></pre><p>修改保存后在控制台输入回车，可以看到配置生效了，意味着可以使用配置热更新能力来动态修改配置的输出，调整配置输出的级别</p><p>比如将</p><pre><code>"LoggingScopeDemo.Program": "Trace",</code></pre><p>修改为</p><pre><code>"LoggingScopeDemo.Program": "Error",</code></pre><p>修改保存后在控制台输入回车，只会输出 Error 级别</p><p>这是在控制台里面的效果，接下来看一下在一个 ASP.NET Core Web 应用下面的日志是什么样子。</p><p>这是一个默认的工程，仅仅在应用程序里面加了两行代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>IEnumerable<span class="token operator">&lt;</span>WeatherForecast<span class="token operator">></span><span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"开始Get了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"Get睡醒了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> rng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>index <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">WeatherForecast</span>    <span class="token punctuation">{</span>        Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>        TemperatureC <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Summary <span class="token operator">=</span> Summaries<span class="token punctuation">[</span>rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>Summaries<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日志级别</p><pre><code>"Console": {      "IncludeScopes": true    }</code></pre><p>启动程序，输出如下：</p><pre><code>info: LoggingDemo.Controllers.WeatherForecastController[0]      =&gt; RequestPath:/weatherforecast RequestId:0HLU2MTQ99HO2:00000001, SpanId:|7bb9cb12-4a0fe499cae27707., TraceId:7bb9cb12-4a0fe499cae27707, ParentId: =&gt; LoggingDemo.Controllers.WeatherForecastController.Get (LoggingDemo)      开始Get了info: LoggingDemo.Controllers.WeatherForecastController[0]      =&gt; RequestPath:/weatherforecast RequestId:0HLU2MTQ99HO2:00000001, SpanId:|7bb9cb12-4a0fe499cae27707., TraceId:7bb9cb12-4a0fe499cae27707, ParentId: =&gt; LoggingDemo.Controllers.WeatherForecastController.Get (LoggingDemo)      Get睡醒了</code></pre><p>可以看到，记录的 开始Get了 以及 Get睡醒了，都包含了 RequestPath，RequestId，SpanId，TraceId 这些信息，这些信息是当前请求的上下文</p><p>也就意味着可以在记录日志的时候，用请求上下文把日志串联起来，多个请求的日志可以区分开来，无论记录了多条还是单条</p><p>也就意味着可以在事务处理的过程中，复杂的流程的过程中，或者调用链的处理过程中，当然还有其他的场景任意的需要将多条日志串联起来的场景，都可以用作用域来实现这个能力。</p><h2 id="20-结构化日志组件Serilog：记录对查询分析友好的日志"><a href="#20-结构化日志组件Serilog：记录对查询分析友好的日志" class="headerlink" title="20 | 结构化日志组件Serilog：记录对查询分析友好的日志"></a>20 | 结构化日志组件Serilog：记录对查询分析友好的日志</h2><p>之前讲解的日志框架，记录的日志都是文本，而且是非结构化的，这样一串串文本实际上不利于我们去做分析</p><p>结构化的日志它的好处就显而易见，它可以让我们更易于去检索，更易于与现有的分析系统进行结合</p><p>结构化日志的主要场景：</p><ol><li>实现日志告警</li><li>实现上下文的关联：可以在日志系统里面对一段业务逻辑输出的日志进行分析</li><li>实现与追踪系统集成：在调用链的系统里面看到有问题的情况下，可以追踪到调用链过程中间的所有的日志信息</li></ol><p>这里创建的依然是一个默认的 ASP.NET Core 的工程</p><p>引用包：Serilog.AspNetCore</p><p>这个包实际上依赖了 Serilog 很多的内置的包</p><p>比如核心的 Serilog (2.8.0)</p><p>配置 Serilog.Settings.Configuration (3.1.0)</p><p>Console 的输出 Serilog.Sinks.Console (3.1.1)</p><p>Debug 的输出 Serilog.Sinks.Debug (1.0.1)</p><p>File 的输出 Serilog.Sinks.File (4.0.0)</p><p>我们在 Program 这里提前读取一下配置，然后传递给 Serilog 的初始化过程，这里我们把 Main 函数进行了稍微的改造，以让 Serilog 可以接替整个默认的日志记录框架</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> LoggingSerilogDemo<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读取配置</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfiguration Configuration <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">SetBasePath</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> reloadOnChange<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span>$<span class="token string">"appsettings.{Environment.GetEnvironmentVariable("</span>ASPNETCORE_ENVIRONMENT<span class="token string">") ?? "</span>Production<span class="token string">"}.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">AddEnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将配置传递给 Serilog 的初始化过程</span>            Log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ReadFrom<span class="token punctuation">.</span><span class="token function">Configuration</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span>            <span class="token punctuation">.</span>MinimumLevel<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>Enrich<span class="token punctuation">.</span><span class="token function">FromLogContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Console</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RenderedCompactJsonFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">File</span><span class="token punctuation">(</span>formatter<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">CompactJsonFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"logs\\myapp.txt"</span><span class="token punctuation">,</span> rollingInterval<span class="token punctuation">:</span> RollingInterval<span class="token punctuation">.</span>Day<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">Information</span><span class="token punctuation">(</span><span class="token string">"Starting web host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">"Host terminated unexpectedly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">CloseAndFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>            Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>                <span class="token punctuation">{</span>                    webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">UseSerilog</span><span class="token punctuation">(</span>dispose<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// dispose 设置为 true，它就会在退出时帮我们释放我们的日志对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下:</p><pre><code>{"@t":"2020-03-08T15:47:40.2569100Z","@m":"Starting web host","@i":"4872fd06"}{"@t":"2020-03-08T15:47:44.1978171Z","@m":"Get 随机创建数据","@i":"6936e72c","SourceContext":"LoggingSerilogDemo.Controllers.WeatherForecastController","ActionId":"8d8ebb60-2211-4acb-bc91-a079be45a689","ActionName":"LoggingSerilogDemo.Controllers.WeatherForecastController.Get (LoggingSerilogDemo)","RequestId":"0HLU3F052RUUN:00000001","RequestPath":"/weatherforecast","SpanId":"|99917a4d-4ccf47636d09b066.","TraceId":"99917a4d-4ccf47636d09b066","ParentId":""}</code></pre><p>可以看到每一行都是一个 json，也就是将日志输出为 json 格式，这就意味着可以在整个日志系统里面以 json 的格式去检索数据，比如 SourceContext 就是 Logger 的 name</p><p>它还记录了请求上下文，并且输出了 RequestId，SpanId，TraceId，ParentId</p><p>RequestId 与 SpanId 的作用就是与追踪系统可以结合</p><p>我们记录的日志的方式实际上是与之前是一样的，Controller 里面还是注入了 ILogger，依然使用 ILogger 来记录日志</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> LoggingSerilogDemo<span class="token punctuation">.</span>Controllers<span class="token punctuation">{</span>    <span class="token punctuation">[</span>ApiController<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"[controller]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Summaries <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">{</span>            <span class="token string">"Freezing"</span><span class="token punctuation">,</span> <span class="token string">"Bracing"</span><span class="token punctuation">,</span> <span class="token string">"Chilly"</span><span class="token punctuation">,</span> <span class="token string">"Cool"</span><span class="token punctuation">,</span> <span class="token string">"Mild"</span><span class="token punctuation">,</span> <span class="token string">"Warm"</span><span class="token punctuation">,</span> <span class="token string">"Balmy"</span><span class="token punctuation">,</span> <span class="token string">"Hot"</span><span class="token punctuation">,</span> <span class="token string">"Sweltering"</span><span class="token punctuation">,</span> <span class="token string">"Scorching"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> ILogger<span class="token operator">&lt;</span>WeatherForecastController<span class="token operator">></span> _logger<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">WeatherForecastController</span><span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span>WeatherForecastController<span class="token operator">></span> logger<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>        <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>WeatherForecast<span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"Get 随机创建数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> rng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>index <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">WeatherForecast</span>            <span class="token punctuation">{</span>                Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>                TemperatureC <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Summary <span class="token operator">=</span> Summaries<span class="token punctuation">[</span>rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>Summaries<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说可以通过简单的配置和几行代码的设置就可以替换官方提供的日志框架，让我们具备记录结构化日志的能力</p><p>我们刚才看到日志输出到 Console，同时输出到文件，可以看到 logs 目录已经产生了一个 myapp20200308.txt 文件</p><pre><code>{"@t":"2020-03-08T15:47:40.2569100Z","@mt":"Starting web host"}{"@t":"2020-03-08T15:47:44.1978171Z","@mt":"Get 随机创建数据","SourceContext":"LoggingSerilogDemo.Controllers.WeatherForecastController","ActionId":"8d8ebb60-2211-4acb-bc91-a079be45a689","ActionName":"LoggingSerilogDemo.Controllers.WeatherForecastController.Get (LoggingSerilogDemo)","RequestId":"0HLU3F052RUUN:00000001","RequestPath":"/weatherforecast","SpanId":"|99917a4d-4ccf47636d09b066.","TraceId":"99917a4d-4ccf47636d09b066","ParentId":""}</code></pre><p>这个文件可以看到每一行是一条日志，每一条日志都是一个 json 对象，包括刚才我们记录的 Get 随机创建数据，已经输出出来了</p><p>我们可以调整日志级别，打开配置文件</p><pre><code>{  "Logging": {    "LogLevel": {      "Default": "Information",      "Microsoft": "Warning",      "Microsoft.Hosting.Lifetime": "Information"    }  },  "Serilog": {    "MinimumLevel": {      "Default": "Information",      "Override": {        "Microsoft": "Error",        "System": "Information"      }    }  },  "AllowedHosts": "*"}</code></pre><p>Serilog 需要单独配置，它与之前的配置方式略有不同，它需要配置最小的日志输出级别，默认是 Information</p><p>Override 是重载上面 Logging 定义的日志级别</p><p>设置 Microsoft 为 Error 之后会把 Microsoft 默认的日志输出级别过滤掉</p><p>也意味着整个的配置和输出的方式与之前是级别类似的，我们可以把日志输出到 Console，也可以把日志输出到文件，当然实际上 Serilog 还提供了很多的这种输出的提供程序，还可以与 EFK，ELK 这种日志的套件进行集成，把日志输出到分析系统里面</p><h2 id="21-中间件：掌控请求处理过程的关键"><a href="#21-中间件：掌控请求处理过程的关键" class="headerlink" title="21 | 中间件：掌控请求处理过程的关键"></a>21 | 中间件：掌控请求处理过程的关键</h2><p>这一节主要解释如何通过中间件来管理请求处理过程</p><p>中间件工作原理</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200310004233177-1820172818.jpg" alt=""></p><p>next 表示后面有一个委托，每一层每一层套下去可以在任意的中间件来决定在后面的中间件之前执行什么，或者说在所有中间件执行完之后执行什么</p><p>整个中间件的处理过程实际上有两个核心对象：</p><p>IApplicationBuilder</p><p>RequestDelegate：处理整个请求的委托</p><p>IApplicationBuilder</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Builder<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IApplicationBuilder</span>  <span class="token punctuation">{</span>    IServiceProvider ApplicationServices <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    IDictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">></span> Properties <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    IFeatureCollection ServerFeatures <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最终它会 Build 返回一个委托</span>    <span class="token comment" spellcheck="true">// 这个委托就是把所有的中间件串起来之后，合并成一个委托方法</span>    <span class="token comment" spellcheck="true">// 这个方法的入参可以看下方委托的定义</span>    RequestDelegate <span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IApplicationBuilder <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 它可以让我们去注册我们的中间件，把委托注册进去，每一个委托的入参也是一个委托</span>    <span class="token comment" spellcheck="true">// 这也就意味着可以把这些委托注册成一个链，就像上面的图显示的那样</span>    IApplicationBuilder <span class="token function">Use</span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>RequestDelegate<span class="token punctuation">,</span> RequestDelegate<span class="token operator">></span> middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>委托的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Http<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 委托的入参是 HttpContext，所有的注册中间件的委托实际上都是对 HttpContext 的处理</span>  <span class="token keyword">public</span> <span class="token keyword">delegate</span> Task <span class="token function">RequestDelegate</span><span class="token punctuation">(</span>HttpContext context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着让我们看一下应用程序里面是怎么让它工作的？</p><p>之前讲过 Configure 方法是用来注册中间件的</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseMyMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据刚才流程图表示的话，实际上中间件的执行顺序是跟注册顺序有关系的，最早注册的中间件它的权力是最大的，它可以越早的发生作用</p><p>中间件的注册实际上不仅仅是有上面展示的已有内置的中间件，实际上还可以用注册委托的方法来注册我们的逻辑</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为这个中间件注册最早，而且不对后续的 next 做任何操作，所以启动之后无论输入什么都会输出 Hello</p><p>如果需要后续的中间件执行，那就意味着需要调用 next，可以在中间件执行之后再次 Hello 一次</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"Hello2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序报错：</p><pre><code>System.InvalidOperationException: Headers are read-only, response has already started.</code></pre><p>意味着一旦应用程序已经对 Response 输出内容，我们就不能对 header 进行操作了，但是可以在 Response 后续继续写出信息</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//await context.Response.WriteAsync("Hello");</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"Hello2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上除了 Use 这种方式的话，还有 Map 的方式</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">"/abc"</span><span class="token punctuation">,</span> abcBuilder <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    abcBuilder<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//await context.Response.WriteAsync("Hello");</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"Hello2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序不会直接看到 Hello 输出，如果把地址改为 localhost:5001/abc，我们的输出就会变成 Hello2</p><p>也就是说当我们需要对特定的路径进行指定中间件的时候可以这样做</p><p>如果在 Map 的时候逻辑复杂一点，不仅仅判断它的 URL 地址，而且要做特殊的判断的话，可以这么做把判断逻辑变成一个委托</p><p>我们要判断当我们的请求地址包含 abc 的时候，输出 new abc</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">MapWhen</span><span class="token punctuation">(</span>context <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span>Keys<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> builder <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    builder<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> context <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"new abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，没有任何输出</p><p>当我们在默认启动地址后面输入 ?abc=1 的时候，可以看到输出了 new abc</p><p>这里用到了一个 Run 的方法，上一节用到的是 Use 方法</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">"/abc"</span><span class="token punctuation">,</span> abcBuilder <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    abcBuilder<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//await context.Response.WriteAsync("Hello");</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"Hello2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Run 和 Use 的区别是什么呢？</p><p>Use 是指我们可以像注册一个完整的中间件一样，将 next 注入进来，我们可以去决定是否执行后续的中间件</p><p>Run 的含义就表示我们这里就是中间件执行的末端，也就不在执行后面的中间件了，在这里将返回请求</p><p>那我们如何像 UseRouting UseEndpoints 一样来设计我们自己的中间件呢？</p><p>这里定义好了一个 MyMiddleware</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> MiddlewareDemo<span class="token punctuation">.</span>Middlewares<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MyMiddleware</span>    <span class="token punctuation">{</span>        RequestDelegate _next<span class="token punctuation">;</span>        ILogger _logger<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyMiddleware</span><span class="token punctuation">(</span>RequestDelegate next<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>MyMiddleware<span class="token operator">></span> logger<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _next <span class="token operator">=</span> next<span class="token punctuation">;</span>            _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">InvokeAsync</span><span class="token punctuation">(</span>HttpContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span>_logger<span class="token punctuation">.</span><span class="token function">BeginScope</span><span class="token punctuation">(</span><span class="token string">"TraceIdentifier:{TraceIdentifier}"</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>TraceIdentifier<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                _logger<span class="token punctuation">.</span><span class="token function">LogDebug</span><span class="token punctuation">(</span><span class="token string">"开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                _logger<span class="token punctuation">.</span><span class="token function">LogDebug</span><span class="token punctuation">(</span><span class="token string">"执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义中间件是用了一个约定的方式，中间件的类包含一个方法 Invoke 或者 InvokeAsync 这样一个方法，它的返回是一个 Task，入参是一个 HttpContext，实际上可以理解成与中间件的委托是一样的，只要我们的类包含这样一个方法，就可以把它作为一个中间件注册进去，并被框架识别到</p><p>这里还定义了一个 MyBuilderExtensions</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Builder<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyBuilderExtensions</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IApplicationBuilder <span class="token function">UseMyMiddleware</span><span class="token punctuation">(</span><span class="token keyword">this</span> IApplicationBuilder app<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> app<span class="token punctuation">.</span><span class="token generic-method function">UseMiddleware<span class="token punctuation">&lt;</span>MyMiddleware<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把我们的中间件注册进去，这个方法就是 UseMyMiddleware</p><p>通过这样的定义，我们就可以使用自己的中间件</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseMyMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动程序，输出如下：</p><p>控制台输出</p><pre><code>dbug: MiddlewareDemo.Middlewares.MyMiddleware[0]      =&gt; RequestPath:/weatherforecast RequestId:0HLU50UEM3M9F:00000001, SpanId:|77f92fe8-4a6d800968327989., TraceId:77f92fe8-4a6d800968327989, ParentId: =&gt; TraceIdentifier:0HLU50UEM3M9F:00000001      开始执行dbug: MiddlewareDemo.Middlewares.MyMiddleware[0]      =&gt; RequestPath:/weatherforecast RequestId:0HLU50UEM3M9F:00000001, SpanId:|77f92fe8-4a6d800968327989., TraceId:77f92fe8-4a6d800968327989, ParentId: =&gt; TraceIdentifier:0HLU50UEM3M9F:00000001      执行结束</code></pre><p>网页控制器输出</p><pre><code>[{"date":"2020-03-11T23:30:55.3411696+08:00","temperatureC":20,"temperatureF":67,"summary":"Warm"},{"date":"2020-03-12T23:30:55.3417863+08:00","temperatureC":52,"temperatureF":125,"summary":"Bracing"},{"date":"2020-03-13T23:30:55.3417916+08:00","temperatureC":-3,"temperatureF":27,"summary":"Mild"},{"date":"2020-03-14T23:30:55.341792+08:00","temperatureC":35,"temperatureF":94,"summary":"Balmy"},{"date":"2020-03-15T23:30:55.3417923+08:00","temperatureC":37,"temperatureF":98,"summary":"Sweltering"}]Hello2</code></pre><p>如果要实现一个断路器，就是不执行后续逻辑，注释掉一行</p><pre><code>_logger.LogDebug("开始执行");//await _next(context);_logger.LogDebug("执行结束");</code></pre><p>启动程序，页面不会输出任何内容，只会在控制台打印出中间件的执行过程，后续的控制器不会执行</p><p>这样就实现了一个断路器，也就意味着可以使用自己的中间件做请求的控制，而且时非常灵活的控制</p><p>在使用中间件的过程中，需要非常注意的是注册中间件的顺序，这些顺序就决定了中间件执行的时机，某些中间件会是断路器的作用，某些中间件会做一些请求内容的处理</p><p>还有一个比较关键的要点是指应用程序一旦开始向 Response write 的时候，后续的中间件就不能再去操作它的 header，这一点是需要注意的</p><p>可以通过 Context.Response.HasStarted 来判断是否已经开始向响应的 body 输出内容，一旦输出了内容，就不要再操作 header</p><h2 id="22-异常处理中间件：区分真异常与逻辑异常"><a href="#22-异常处理中间件：区分真异常与逻辑异常" class="headerlink" title="22 | 异常处理中间件：区分真异常与逻辑异常"></a>22 | 异常处理中间件：区分真异常与逻辑异常</h2><p>这一节我们来探讨一下错误处理的最佳实践</p><p>系统里面异常处理，ASP.NET Core 提供了四种方式</p><ol><li>异常处理页</li><li>异常处理匿名委托方法</li><li>IExceptionFilter</li><li>ExceptionFilterAttribute</li></ol><p>Startup 的 Configure 方法</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开发环境下的异常处理页</span>    app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制器抛出异常</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"报个错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动程序，可以看到一个错误页</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200311235228335-93227035.jpg" alt=""></p><p>这个错误页会输出我们当前请求的详细信息和错误的详细信息，这种页面是不适合给用户看到的，所以这样的错误页在生产环境是需要关闭的</p><p>以下是正常处理错误页的方式：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 第一种方式就是定义错误页的方式</span>app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">"/error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义一个接口 IKnownException</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ExceptionDemo<span class="token punctuation">.</span>Exceptions<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IKnownException</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Message <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ErrorCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ErrorData <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认实现 KnownException</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ExceptionDemo<span class="token punctuation">.</span>Exceptions<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KnownException</span> <span class="token punctuation">:</span> IKnownException    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Message <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ErrorCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ErrorData <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">static</span> IKnownException Unknown <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KnownException</span> <span class="token punctuation">{</span> Message <span class="token operator">=</span> <span class="token string">"未知错误"</span><span class="token punctuation">,</span> ErrorCode <span class="token operator">=</span> <span class="token number">9999</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IKnownException <span class="token function">FromKnownException</span><span class="token punctuation">(</span>IKnownException exception<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KnownException</span> <span class="token punctuation">{</span> Message <span class="token operator">=</span> exception<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> ErrorCode <span class="token operator">=</span> exception<span class="token punctuation">.</span>ErrorCode<span class="token punctuation">,</span> ErrorData <span class="token operator">=</span> exception<span class="token punctuation">.</span>ErrorData <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么需要定义这样一个类型呢？</p><p>因为通常情况下我们系统里面的异常和我们业务逻辑的异常是不同的，业务逻辑上面的判断异常，比如说输入的参数，订单的状态不符合条件，当前账户余额不足，这样子的信息我们有两种处理方式：</p><p>一种处理方式就是对不同的逻辑输出不同的业务对象</p><p>还有一种方式就是对于异常的这种业务逻辑，输出一个异常，用异常来承载逻辑的特殊分支，这个时候就需要识别出来哪些是业务的异常，哪些是不确定的未知的异常，比如说网络的请求出现了异常，MySql 的连接闪断了，Redis 的连接出现了异常</p><p>接着通过定义一个错误页来承载错误信息，比如我们的 ErrorController，它只有一个页面，它的作用就是输出错误信息</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ExceptionDemo<span class="token punctuation">.</span>Controllers<span class="token punctuation">{</span>    <span class="token punctuation">[</span>AllowAnonymous<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorController</span> <span class="token punctuation">:</span> Controller    <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"/error"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">public</span> IActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取当前上下文里面报出的异常信息</span>            <span class="token keyword">var</span> exceptionHandlerPathFeature <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Features<span class="token punctuation">.</span><span class="token generic-method function">Get<span class="token punctuation">&lt;</span>IExceptionHandlerPathFeature<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> ex <span class="token operator">=</span> exceptionHandlerPathFeature<span class="token operator">?</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 特殊处理，尝试转换为 IKnownException</span>            <span class="token keyword">var</span> knownException <span class="token operator">=</span> ex <span class="token keyword">as</span> IKnownException<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对于未知异常，我们并不应该把错误异常完整地输出给客户端，而是应该定义一个特殊的信息 Unknown 传递给用户</span>            <span class="token comment" spellcheck="true">// Unknown 其实也是一个 IKnownException 的实现，它的 Message = "未知错误", ErrorCode = 9999</span>            <span class="token comment" spellcheck="true">// 也就是说我们在控制器 throw new Exception("报个错"); 就会看到错误信息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>knownException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> logger <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span>GetService<span class="token operator">&lt;</span>ILogger<span class="token operator">&lt;</span>MyExceptionFilterAttribute<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 我们看到的信息是未知错误，但是在我们的日志系统里面，我们还是记录的原有的异常信息</span>                logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                knownException <span class="token operator">=</span> KnownException<span class="token punctuation">.</span>Unknown<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token comment" spellcheck="true">// 当识别到异常是已知的业务异常时，输出已知的异常，包括异常消息，错误状态码和错误信息，就是在 IKnownException 中的定义</span>            <span class="token punctuation">{</span>                knownException <span class="token operator">=</span> KnownException<span class="token punctuation">.</span><span class="token function">FromKnownException</span><span class="token punctuation">(</span>knownException<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span>knownException<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>View</p><pre class="line-numbers language-html"><code class="language-html">@model ExceptionDemo.Exceptions.IKnownException@{    ViewData["Title"] = "Index";}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>错误信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Message:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>@Model.Message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>ErrorCode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>@Model.ErrorCode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序之后可以看到自定义的错误页已经成功渲染出来了</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200311235252348-1169360247.jpg" alt=""></p><p>这就是第一种处理错误的方式</p><p>接下来介绍使用代理方法的方式，也就是说把 ErrorController 整段逻辑直接定义在注册的地方，使用一个匿名委托来处理，这里的逻辑与之前的逻辑是相同的</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span>errApp <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    errApp<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> context <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在 Features 里面获取异常</span>        <span class="token keyword">var</span> exceptionHandlerPathFeature <span class="token operator">=</span> context<span class="token punctuation">.</span>Features<span class="token punctuation">.</span><span class="token generic-method function">Get<span class="token punctuation">&lt;</span>IExceptionHandlerPathFeature<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 识别异常是否为 IKnownException</span>        IKnownException knownException <span class="token operator">=</span> exceptionHandlerPathFeature<span class="token punctuation">.</span>Error <span class="token keyword">as</span> IKnownException<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>knownException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果不是则记录并且把错误的响应码响应成 Http 500</span>            <span class="token keyword">var</span> logger <span class="token operator">=</span> context<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span>GetService<span class="token operator">&lt;</span>ILogger<span class="token operator">&lt;</span>MyExceptionFilterAttribute<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>exceptionHandlerPathFeature<span class="token punctuation">.</span>Error<span class="token punctuation">,</span> exceptionHandlerPathFeature<span class="token punctuation">.</span>Error<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            knownException <span class="token operator">=</span> KnownException<span class="token punctuation">.</span>Unknown<span class="token punctuation">;</span>            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status500InternalServerError<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果捕获到的是一个业务逻辑的异常，Http 响应码应该给是 200</span>            knownException <span class="token operator">=</span> KnownException<span class="token punctuation">.</span><span class="token function">FromKnownException</span><span class="token punctuation">(</span>knownException<span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status200OK<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 然后再把响应信息通过 json 的方式输出出去</span>        <span class="token keyword">var</span> jsonOptions <span class="token operator">=</span> context<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span>GetService<span class="token operator">&lt;</span>IOptions<span class="token operator">&lt;</span>JsonOptions<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>knownException<span class="token punctuation">,</span> jsonOptions<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>JsonSerializerOptions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么对于未知的异常要输出 Http 500，而对于业务逻辑的异常，建议输出 Http 200？</p><p>因为监控系统实际上会对 Http 的响应码进行识别，当监控系统识别到 Http 响应是 500 的比例比较高的情况下，会认为系统的可用性有问题，这个时候告警系统就会发出警告</p><p>对于已知的业务逻辑的这种正常的识别的话，用正常的 Http 200 来处理是一个正常的行为，这样就可以让监控系统更好的工作，正确的识别出系统的一些未知的错误信息，错误的告警，让告警系统更加的灵敏，也避免了业务逻辑的异常干扰告警系统</p><p>接下来看一下第三种，通过异常过滤器的方式</p><p>这种方式实际上是作用在 MVC 的整个框架的体系下面的，它并不是在中间件的最早期发生作用的，它是在 MVC 的整个生命周期里面发生作用，也就是说它只能工作在 MVC Web API 的请求周期里面</p><p>首先自定义一个 MyExceptionFilter</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ExceptionDemo<span class="token punctuation">.</span>Exceptions<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionFilter</span> <span class="token punctuation">:</span> IExceptionFilter    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnException</span><span class="token punctuation">(</span>ExceptionContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            IKnownException knownException <span class="token operator">=</span> context<span class="token punctuation">.</span>Exception <span class="token keyword">as</span> IKnownException<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>knownException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> logger <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span>GetService<span class="token operator">&lt;</span>ILogger<span class="token operator">&lt;</span>MyExceptionFilterAttribute<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Exception<span class="token punctuation">,</span> context<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                knownException <span class="token operator">=</span> KnownException<span class="token punctuation">.</span>Unknown<span class="token punctuation">;</span>                context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status500InternalServerError<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                knownException <span class="token operator">=</span> KnownException<span class="token punctuation">.</span><span class="token function">FromKnownException</span><span class="token punctuation">(</span>knownException<span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status200OK<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>knownException<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ContentType <span class="token operator">=</span> <span class="token string">"application/json; charset=utf-8"</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理逻辑与之前的相同</p><p>接着注册 Filters</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span>mvcOptions <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    mvcOptions<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token generic-method function">Add<span class="token punctuation">&lt;</span>MyExceptionFilter<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJsonOptions</span><span class="token punctuation">(</span>jsonoptions <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    jsonoptions<span class="token punctuation">.</span>JsonSerializerOptions<span class="token punctuation">.</span>Encoder <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encodings<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>JavaScriptEncoder<span class="token punctuation">.</span>UnsafeRelaxedJsonEscaping<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输出如下：</p><pre><code>{"message":"未知错误","errorCode":9999,"errorData":null}</code></pre><p>输出与之前的一致，因为这是在 Controller 里面输出了错误</p><p>如果在 MVC 的中间件之前输出错误的话，它是没办法处理的</p><p>这个场景一般情况下是指需要对 Controller 进行特殊的异常处理，而对于中间件整体来讲的话，又要用另一种特殊的逻辑来处理的时候，可以用 ExceptionFilter 的方式处理</p><p>这种方式还可以通过 Attribute 的方式</p><p>自定义一个 MyExceptionFilterAttribute</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> ExceptionDemo<span class="token punctuation">.</span>Exceptions<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionFilterAttribute</span> <span class="token punctuation">:</span> ExceptionFilterAttribute    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnException</span><span class="token punctuation">(</span>ExceptionContext context<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            IKnownException knownException <span class="token operator">=</span> context<span class="token punctuation">.</span>Exception <span class="token keyword">as</span> IKnownException<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>knownException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> logger <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span>GetService<span class="token operator">&lt;</span>ILogger<span class="token operator">&lt;</span>MyExceptionFilterAttribute<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Exception<span class="token punctuation">,</span> context<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                knownException <span class="token operator">=</span> KnownException<span class="token punctuation">.</span>Unknown<span class="token punctuation">;</span>                context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status500InternalServerError<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                knownException <span class="token operator">=</span> KnownException<span class="token punctuation">.</span><span class="token function">FromKnownException</span><span class="token punctuation">(</span>knownException<span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status200OK<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>knownException<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ContentType <span class="token operator">=</span> <span class="token string">"application/json; charset=utf-8"</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Controller 上面标注 MyExceptionFilter</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>MyExceptionFilter<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动运行之后效果相同</p><p>这两种方式的效果是对等的，区别在于说可以更细粒度的对异常处理进行控制，可以指定部分的 Controller 或者 Exception，来决定我们的异常处理，也可以在全局注册 ExceptionFilter</p><p>当然因为 ExceptionFilterAttribute 也实现了 IExceptionFilter，所以它也可以注册到全局，也可以把它当作全局异常处理的过滤器来使用，Controller 上面也就不需要标记了</p><p>注册 Filters</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span>mvcOptions <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//mvcOptions.Filters.Add&lt;MyExceptionFilter>();</span>    mvcOptions<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token generic-method function">Add<span class="token punctuation">&lt;</span>MyExceptionFilterAttribute<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJsonOptions</span><span class="token punctuation">(</span>jsonoptions <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    jsonoptions<span class="token punctuation">.</span>JsonSerializerOptions<span class="token punctuation">.</span>Encoder <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encodings<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>JavaScriptEncoder<span class="token punctuation">.</span>UnsafeRelaxedJsonEscaping<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Controller 上面取消标注 MyExceptionFilter</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//[MyExceptionFilter]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> ControllerBase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动程序，输出结果一致</p><p>这个场景对于我们定义一些 API，然后对 API 进行定义我们的异常处理的约定是很有帮助的</p><p><strong>总结一下</strong></p><ol><li><p>首先我们需要定义特定的异常类或者接口，我们可以定义抽象类，也可以用接口的方式，例子中是通过接口的方式表示业务逻辑的异常</p></li><li><p>对于业务逻辑的异常，实际上需要定义全局的错误码</p></li><li><p>对于未知的异常，应该输出特定的输出信息和错误码，然后记录完整的日志，我们不应该把系统内部的一些比如说异常堆栈这些信息输出给用户</p></li><li><p>对于已知的业务逻辑的异常，用 Http 200 的方式，对于未知的异常，用 Http 500 的方式，这样可以让监控系统更好的工作</p></li><li><p>另外一个建议就是尽量记录所有的异常的详细信息，以供后续对日志进行分析，也供监控系统做一些特定的监控警告</p></li></ol><h2 id="23-静态文件中间件：前后端分离开发合并部署骚操作"><a href="#23-静态文件中间件：前后端分离开发合并部署骚操作" class="headerlink" title="23 | 静态文件中间件：前后端分离开发合并部署骚操作"></a>23 | 静态文件中间件：前后端分离开发合并部署骚操作</h2><p>我们先来看一下静态文件中间件有哪些能力</p><ol><li><p>支持指定相对路径</p></li><li><p>支持目录的浏览</p></li><li><p>支持设置默认文档</p></li><li><p>支持多目录映射</p></li></ol><p>首先使用静态文件中间件</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 通过这一行代码就可以访问到静态配置文件</span>app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就可以将 wwwroot 目录映射出来，这是一个默认的配置，也就是说，当我们需要使用中间件静态文件输出的时候，首选就是应该把静态文件放在 wwwroot 下面</p><p>我们在这个目录下面放了几个文件：index.html，app.js，a 目录下面也有一个 index.html 和一个 a.js，这两个 index.html 的内容是不一样的</p><p>a/index.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>/a/index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是/a/index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>静态首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是静态首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，由于我们没有指定相对路径，所以说我们的根目录是/，就代表访问到了 wwwroot，输入 index.html，可以看到 javaScript 执行</p><pre><code>https://localhost:5001/index.html</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200313235013142-304736164.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200313235020959-1360760602.jpg" alt=""></p><p>如果把地址换一下，会得到另一个页面</p><pre><code>https://localhost:5001/a/index.html</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200313235058542-458749199.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200313235105447-1275734374.jpg" alt=""></p><p>如果默认情况下都是访问 index.html，怎么做呢？</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseDefaultFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个方法还有一个重载</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Builder<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultFilesExtensions</span>  <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IApplicationBuilder <span class="token function">UseDefaultFiles</span><span class="token punctuation">(</span>      <span class="token keyword">this</span> IApplicationBuilder app<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IApplicationBuilder <span class="token function">UseDefaultFiles</span><span class="token punctuation">(</span>      <span class="token keyword">this</span> IApplicationBuilder app<span class="token punctuation">,</span>      DefaultFilesOptions options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IApplicationBuilder <span class="token function">UseDefaultFiles</span><span class="token punctuation">(</span>      <span class="token keyword">this</span> IApplicationBuilder app<span class="token punctuation">,</span>      <span class="token keyword">string</span> requestPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DefaultFilesOptions</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Builder<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultFilesOptions</span> <span class="token punctuation">:</span> SharedOptionsBase  <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">DefaultFilesOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DefaultFilesOptions</span><span class="token punctuation">(</span>SharedOptions sharedOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> IList<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> DefaultFileNames <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以设置 DefaultFileNames，默认 index.html 是在里面的，所以这里可以不输入任何参数</p><p>启动程序，访问根目录的时候，应该输出首页的 index</p><pre><code>https://localhost:5001/</code></pre><p>访问 a 目录会输出 a 的 index</p><p>还有一种场景就是我们需要浏览我们的目录</p><p>在 ConfigureServices 注册 AddDirectoryBrowser</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    services<span class="token punctuation">.</span><span class="token function">AddDirectoryBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 Configure 里面启用</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseDirectoryBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动程序，访问根目录</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200313235125777-1228639546.jpg" alt=""></p><p>可以看到浏览器上面显示了目录的文件，当我们点击其中的一个文件的时候，实际上是访问这个文件，我们还可以浏览它的子目录</p><p>这是我们在使用 wwwroot 的情况下，实际上我们还可以使用其他的目录，把其他的目录也注册进来</p><p>我们在应用程序的 file 目录下面另外添加了一个 page.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也期望可以访问到这个文件，我们就可以这样去做</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticFileOptions</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注入我们的物理文件提供程序，把我们的当前目录加 file，就是 file 目录，赋值给我们的提供程序</span>    <span class="token comment" spellcheck="true">// 这样子的效果就是我们的 wwwroot 会优先去寻找我们的文件，如果没有的话就会执行下一个中间件</span>    <span class="token comment" spellcheck="true">// 然后在这个中间件里面再找我们的文件是否存在，如果没有的话，它会去执行后面的路由和 MVC 的 Web API 的 Controller</span>    FileProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhysicalFileProvider</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为这里我们入参并没有设置相对路径，也就是说我们根目录对应的也是 file 这个目录，我们这里可以输出 page.html</p><pre><code>https://localhost:5001/page.html</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200314000345050-2945666.jpg" alt=""></p><p>我们的 page.html 就可以访问到了</p><p>还有一种情况是我们希望把我们的静态目录映射为某一个特定的 URL 地址目录下面，我们可以这样去做</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticFileOptions</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们希望把我们的静态目录映射为某一个特定的 URL 地址目录下面</span>    RequestPath <span class="token operator">=</span> <span class="token string">"/files"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 注入我们的物理文件提供程序，把我们的当前目录加 file，就是 file 目录，赋值给我们的提供程序</span>    <span class="token comment" spellcheck="true">// 这样子的效果就是我们的 wwwroot 会优先去寻找我们的文件，如果没有的话就会执行下一个中间件</span>    <span class="token comment" spellcheck="true">// 然后在这个中间件里面再找我们的文件是否存在，如果没有的话，它会去执行后面的路由和 MVC 的 Web API 的 Controller</span>    FileProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhysicalFileProvider</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问以下路径就可以看到我们的静态文件页面</p><pre><code>https://localhost:5001/files/page.html</code></pre><p>也就是说我们可以把任意的文件目录映射为任意的 URL 地址</p><p>这里还有一个比较特殊的用法</p><p>一般情况下，我们前后端分离的架构，前端会编译成一个 index.html 文件和若干个 CSS 文件和 JavaScript 和图片文件</p><p>CSS 文件和 JavaScript 和图片文件一般会部署在 CDN 服务器上，这个 index 文件就需要我们建立一个宿主来 host 它</p><p>并且前端的一般路由的话，我们现在都会用 HTML5 的 History 的路由模式</p><p>这个时候前端就会对后端有一个特殊的诉求，除了 API 的请求以外，其他的请求的响应都应该是 index.html 这个静态文件</p><p>要达到这个目的，我们可以借助我们的中间件的执行原理来实现</p><p>首先假设我们的 index.html 就是我们前端编译好的静态文件，我们放置在 wwwroot 下面，前端编译的任何文件都放在 wwwroot 下面</p><p>然后我们再做一件事件就是 UseStaticFiles，我们把目录访问整个去掉</p><pre><code>//services.AddDirectoryBrowser();</code></pre><p>首先映射静态文件</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>静态文件映射出来之后实际上还有一个诉求，就是当我们访问其他特殊的页面地址的时候，比如说 /order/get 这样子的页面的时候，也应该响应我们的静态文件</p><p>这个时候我们可以把这样一段逻辑加入进来</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 判断我们当前的请求是否满足条件</span>app<span class="token punctuation">.</span><span class="token function">MapWhen</span><span class="token punctuation">(</span>context <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果我们的请求不是以 API 开头的请求</span>    <span class="token keyword">return</span> <span class="token operator">!</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> appBuilder <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果满足条件，我就走我下面这一段中间件的逻辑</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RewriteOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重写为 /index.html</span>    option<span class="token punctuation">.</span><span class="token function">AddRewrite</span><span class="token punctuation">(</span><span class="token string">".*"</span><span class="token punctuation">,</span> <span class="token string">"/index.html"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    appBuilder<span class="token punctuation">.</span><span class="token function">UseRewriter</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重写完之后再使用我们的静态文件中间件</span>    appBuilder<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子可以达到一个效果就是我们访问任意的非 API 目录的时候，我们都可以得到 index.html</p><p>启动程序</p><pre><code>https://localhost:5001/api/weatherforecast</code></pre><p>可以正常访问</p><p>API 的请求我们都是让它通过的，不是 API 的时候才会拦截</p><p>这个时候如果访问</p><pre><code>https://localhost:5001/order</code></pre><p>会发现获得的是静态文件</p><p>如果说静态文件是存在的，这个时候实际上会响应原有的静态文件，比如说访问</p><pre><code>https://localhost:5001/a/index.html</code></pre><p>这样子就可以发现我们能让静态文件的目录正常工作，并且能将其他的我们需要的地址都重定向到 index.html</p><p>当然这里还有另外一种写法，就是不用 UseRewriter 的方式，而是用 Run 的方式，也是就用断路器的方式</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 判断我们当前的请求是否满足条件</span>app<span class="token punctuation">.</span><span class="token function">MapWhen</span><span class="token punctuation">(</span>context <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果我们的请求不是以 API 开头的请求</span>    <span class="token keyword">return</span> <span class="token operator">!</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> appBuilder <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//// 如果满足条件，我就走我下面这一段中间件的逻辑</span>    <span class="token comment" spellcheck="true">//var option = new RewriteOptions();</span>    <span class="token comment" spellcheck="true">//// 重写为 /index.html</span>    <span class="token comment" spellcheck="true">//option.AddRewrite(".*", "/index.html", true);</span>    <span class="token comment" spellcheck="true">//appBuilder.UseRewriter(option);</span>    <span class="token comment" spellcheck="true">//// 重写完之后再使用我们的静态文件中间件</span>    <span class="token comment" spellcheck="true">//appBuilder.UseStaticFiles();</span>    appBuilder<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> c <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读取静态文件，并且输出给我们的 Response</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> env<span class="token punctuation">.</span>WebRootFileProvider<span class="token punctuation">.</span><span class="token function">GetFileInfo</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"text/html"</span><span class="token punctuation">;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>PhysicalPath<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">await</span> StreamCopyOperation<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> BufferSize<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestAborted<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法有一个缺点就是，没办法像静态文件中间件那样，输出正确的 Http 请求头</p><p>对比一下两种方式的输出的请求头的不同</p><p>启动程序，访问</p><pre><code>https://localhost:5001/order</code></pre><p>打开调试工具，可以看到对 order 的我们的响应头就只有 4 个</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200315001215172-405775898.jpg" alt=""></p><p>其他的静态文件，响应头会多出来 etag，data，last-modified</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200315001225473-1810727767.png" alt=""></p><p>这些的话就是我们关于 HTTP 缓存可以用到的头，所以说我们还是推荐使用上面这种方式，静态中间件的方式，而不是自己输出文件的方式</p><h2 id="24-文件提供程序：让你可以将文件放在任何地方"><a href="#24-文件提供程序：让你可以将文件放在任何地方" class="headerlink" title="24 | 文件提供程序：让你可以将文件放在任何地方"></a>24 | 文件提供程序：让你可以将文件放在任何地方</h2><p>文件提供程序核心类型：</p><ol><li><p>IFileProvider</p></li><li><p>IFileInfo</p></li><li><p>IDirectoryContents</p></li></ol><p>IFileProvider 是访问各种各样文件提供程序的接口</p><p>通过这样子抽象的定义，让我们与具体的抽象文件的读取的代码进行了隔离</p><p>这样的好处是我们可以从不同的地方去读取文件，不仅仅是我们的物理文件，也可以是嵌入式文件，甚至可以说是云端上面的其他 API 提供的文件</p><p>内置的提供程序有三种：</p><p>（1）PhysicalFileProvider：物理文件的提供程序</p><p>（2）EmbeddedFileProvider：嵌入式的提供程序</p><p>（3）CompositeFileProvider：组合文件的提供程序</p><p>组合文件的提供程序是指当我们有多种文件数据来源的时候，可以将这些源合并为一个目录一样，让我们像在使用同一个目录一样使用我们的文件系统</p><p>首先我们可以看一下 IFileProvider 的定义</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>FileProviders<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFileProvider</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输入是一个相对的路径</span>    IFileInfo <span class="token function">GetFileInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> subpath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取指定目录下的目录信息</span>    IDirectoryContents <span class="token function">GetDirectoryContents</span><span class="token punctuation">(</span><span class="token keyword">string</span> subpath<span class="token punctuation">)</span><span class="token punctuation">;</span>    IChangeToken <span class="token function">Watch</span><span class="token punctuation">(</span><span class="token keyword">string</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IDirectoryContents</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>FileProviders<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDirectoryContents</span> <span class="token punctuation">:</span> IEnumerable<span class="token operator">&lt;</span>IFileInfo<span class="token operator">></span><span class="token punctuation">,</span> IEnumerable  <span class="token punctuation">{</span>    <span class="token keyword">bool</span> Exists <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个接口实际上就是 IFileInfo 的一个集合，还有一个属性是否存在，表示当前目录是否存在，如果存在的话，我们可以从它内部枚举到我们的所有文件</p><p>IFileInfo</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>FileProviders<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFileInfo</span>  <span class="token punctuation">{</span>    <span class="token keyword">bool</span> Exists <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">long</span> Length <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">string</span> PhysicalPath <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    DateTimeOffset LastModified <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">bool</span> IsDirectory <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    Stream <span class="token function">CreateReadStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IFileInfo 有几个属性：是否存在，文件长度，物理地址，文件名，最后修改时间，是否是一个目录（有可能获取到的文件并不是一个真实的文件，它可能是一个目录，那也就是用 IFileInfo 来代替的），读取文件流</p><p>接下来通过代码看一下</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 定义一个物理文件的提供程序，把我们当前应用程序的根目录映射出来</span>IFileProvider provider1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhysicalFileProvider</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取到这个目录下面的所有内容</span><span class="token keyword">var</span> contents <span class="token operator">=</span> provider1<span class="token punctuation">.</span><span class="token function">GetDirectoryContents</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> contents<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打印文件名</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序可以看到控制台输出了编译目录下面的文件</p><pre><code>FileProviderDemo.deps.jsonFileProviderDemo.dllFileProviderDemo.exeFileProviderDemo.pdbFileProviderDemo.runtimeconfig.dev.jsonFileProviderDemo.runtimeconfig.jsonMicrosoft.Extensions.FileProviders.Abstractions.dllMicrosoft.Extensions.FileProviders.Composite.dllMicrosoft.Extensions.FileProviders.Embedded.dllMicrosoft.Extensions.FileProviders.Physical.dllMicrosoft.Extensions.FileSystemGlobbing.dllMicrosoft.Extensions.Primitives.dll</code></pre><p>如果我们要读文件流的话，可以通过 CreateReadStream</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> contents<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 读取文件流</span>    <span class="token keyword">var</span> stream <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">CreateReadStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印文件名</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看一下嵌入式的提供程序，它是指编译时把文件嵌入到程序集内部，就像源文件一样，但是与通常的资源文件不同的是，我们可以像读取目录一样读取我们的文件</p><pre class="line-numbers language-csharp"><code class="language-csharp">IFileProvider provider2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedFileProvider</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我们创建了一个 emb.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把它的属性设置为嵌入的资源，而不是内容</p><p>这样的设置的话，我们可以看一下对工程文件有什么影响</p><p>编辑项目可以看到我们把这个文件定义为嵌入式资源</p><pre class="line-numbers language-csharp"><code class="language-csharp">  <span class="token operator">&lt;</span>ItemGroup<span class="token operator">></span>    <span class="token operator">&lt;</span>EmbeddedResource Include<span class="token operator">=</span><span class="token string">"emb.html"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次读取这个文件</p><pre class="line-numbers language-csharp"><code class="language-csharp">IFileProvider provider2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedFileProvider</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> html <span class="token operator">=</span> provider2<span class="token punctuation">.</span><span class="token function">GetFileInfo</span><span class="token punctuation">(</span><span class="token string">"emb.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>断点调试查看文件信息</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200316000118155-1345658313.png" alt=""></p><p>可以看到 html 这个文件是否存在，是否目录，最后修改时间，长度，名字，物理路径</p><p>这就是可以通过嵌入式的文件提供程序来读取编译时构建到程序集里面的资源</p><p>最后一个就是组合文件提供程序，它的作用就是将各种提供程序组合成一个目录，让我们可以访问它</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 传入前面的两种文件提供程序到组合提供程序里面，它可以传入多个文件提供程序</span>IFileProvider provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeFileProvider</span><span class="token punctuation">(</span>provider1<span class="token punctuation">,</span> provider2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> contents <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">GetDirectoryContents</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> contents<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序可以看到，不仅输出了程序集，编译构建出来的文件，同时还输出资源文件 emb.html</p><pre><code>FileProviderDemo.deps.jsonFileProviderDemo.dllFileProviderDemo.exeFileProviderDemo.pdbFileProviderDemo.runtimeconfig.dev.jsonFileProviderDemo.runtimeconfig.jsonMicrosoft.Extensions.FileProviders.Abstractions.dllMicrosoft.Extensions.FileProviders.Composite.dllMicrosoft.Extensions.FileProviders.Embedded.dllMicrosoft.Extensions.FileProviders.Physical.dllMicrosoft.Extensions.FileSystemGlobbing.dllMicrosoft.Extensions.Primitives.dllemb.html</code></pre><p>这就说明可以像在访问同一个目录一样，访问不同的文件提供程序目录，这就意味着实际上是可以通过实现简单的 IFileProvider 和 IFileInfo 就可以实现自己的文件提供程序</p><p>这些文件提供程序举一个场景比如说可以通过 OSS 的这种远程存储的方式将文件读取出来并且提供给应用程序，但是应用程序并不需要做特殊的配置，只需要把 OSS 提供的程序注入到系统里面，只需要按照 IFileProvider 提供的接口来读取文件，就可以做到像在读取本地文件一样，也就是说可以借助这套框架读取任意位置的文件</p><h2 id="25-路由与终结点：如何规划好你的Web-API"><a href="#25-路由与终结点：如何规划好你的Web-API" class="headerlink" title="25 | 路由与终结点：如何规划好你的Web API"></a>25 | 路由与终结点：如何规划好你的Web API</h2><p>路由系统在 ASP.NET MVC 框架里面就已经存在了，在 ASP.NET Core 框架里面进行了改进</p><p>路由系统的核心作用是指 URL 和 应用程序 Controller 的对应关系的一种映射</p><p><strong>这个映射关系实际上有两种作用：</strong></p><ol><li><p>把 URL 映射到对应的 Controller 对应的 action 上面去</p></li><li><p>根据 Controller 和 action 的名字来生产 URL</p></li></ol><p><strong>.NET Core 提供了两种路由注册的方式：</strong></p><ol><li><p>路由模板的方式</p></li><li><p>RouteAttribute 方式</p></li></ol><p>这两种方式分别适用于的场景是不一样的</p><p>路由模板的方式是之前传统的方式，可以用来作为 MVC 的页面 Web 配置</p><p>现在用的比较多的前后端分离的架构，定义 Web API 的时候使用 RouteAttribute 方式去做</p><p>在定义路由，注册路由的过程中间，有一个重要的特性就是路由约束，是指路由如何匹配</p><p>有以下简单的几种约束：</p><ol><li>类型约束</li><li>范围约束</li><li>正则表达式</li><li>是否必选</li><li>自定义 IRouteConstraint</li></ol><p>另外路由系统提供了两个关键的类，用来反向根据路由的信息生产 URL 地址</p><ol><li>LinkGenerator</li><li>IUrlHelper</li></ol><p>IUrlHelper 与 MVC 框架里面的 MVCHelper 很像</p><p>而 LinkGenerator 是全新提供的一个链接生成的对象，可以从容器里面，在任意的位置都可以获取到这个对象，然后根据需要生成 URL 地址</p><p>为了方便演示，这里先注册了一组 Swagger 的代码，将 Web API 通过 Swagger 的可视化界面输出出来</p><p>引入 Swagger 对应 ASP.NET Core 的包</p><pre><code>Swashbuckle.AspNetCore</code></pre><p>将代码文档 XML 文档注入给 Swagger</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">"v1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OpenApiInfo</span> <span class="token punctuation">{</span> Title <span class="token operator">=</span> <span class="token string">"My API"</span><span class="token punctuation">,</span> Version <span class="token operator">=</span> <span class="token string">"v1"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> xmlFile <span class="token operator">=</span> $<span class="token string">"{Assembly.GetExecutingAssembly().GetName().Name}.xml"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> xmlPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppContext<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">,</span> xmlFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在中间件里面注册 Swagger</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">SwaggerEndpoint</span><span class="token punctuation">(</span><span class="token string">"/swagger/v1/swagger.json"</span><span class="token punctuation">,</span> <span class="token string">"My API V1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子就可以在界面上看到 Swagger 的界面，并且浏览我们定义的 API</p><p>接着是路由的定义 OrderController</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> RoutingDemo<span class="token punctuation">.</span>Controllers<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"api/[controller]/[action]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// RouteAttribute 的方式</span>    <span class="token punctuation">[</span>ApiController<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">:</span> ControllerBase    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// </span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="id">必须可以转为long&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{id:MyRouteConstraint}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 这里使用了自定义的约束</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">OrderExist</span><span class="token punctuation">(</span><span class="token keyword">object</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// </span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="id">最大20&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{id:max(20)}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 这里使用了 Max 的约束</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// </span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ss">必填&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{name:required}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 必填约束</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">Reque</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// </span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="number">以三个数字开始&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{number:regex(^\\d{{3}}$)}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 正则表达式约束</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">string</span> number<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面用到了自定义约束 MyRouteConstraint</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> RoutingDemo<span class="token punctuation">.</span>Constraints<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRouteConstraint</span> <span class="token punctuation">:</span> IRouteConstraint    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">Match</span><span class="token punctuation">(</span>HttpContext httpContext<span class="token punctuation">,</span> IRouter route<span class="token punctuation">,</span> <span class="token keyword">string</span> routeKey<span class="token punctuation">,</span> RouteValueDictionary values<span class="token punctuation">,</span> RouteDirection routeDirection<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>RouteDirection<span class="token punctuation">.</span>IncomingRequest <span class="token operator">==</span> routeDirection<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> v <span class="token operator">=</span> values<span class="token punctuation">[</span>routeKey<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册 MyRouteConstraint</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddRouting</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    options<span class="token punctuation">.</span>ConstraintMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"MyRouteConstraint"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>MyRouteConstraint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>让它生效之前，需要在中间件注册的位置注入 UseEndpoints，然后对 UseEndpoints 使用 MapControllers</p><pre class="line-numbers language-csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 RouteAttribute</span>    endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这样子的方式把 OrderController 的路由注入进来</p><p>启动程序，可以看到一共有五个接口</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200317001713757-1265321257.jpg" alt=""></p><p>第一个接口是我们实现的自定义约束，点击 try it out 后输入参数</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200317001729042-1464811470.jpg" alt=""></p><p>第二个接口约束最大为20</p><p>输入5，执行</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200317001738633-2115884875.jpg" alt=""></p><p>可以看到响应码是 200</p><p>输入25，执行</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200317001747690-246658702.jpg" alt=""></p><p>可以看到响应码是 404，也就说路由匹配失败了</p><p>第三个接口因为参数是必须的，所以没办法输入空值，有一个前端的验证</p><p>第四个接口以三个数字开始，输入 234，符合正则表达式，响应码 200</p><p>自定义约束实现了路由约束接口，它只有一个 Match 方法，这个方法传入了 Http 当前的 httpContext，route，routeKey</p><p>这个 routeKey 就是我们要验证的 key 值</p><p>后面两个参数 RouteValueDictionary 就是当前可以获取到的这个 routeKey 对应的传入的值是什么值，这样就可以验证我们传入的信息</p><p>routeDirection 这个枚举的作用是当前验证是用来验证 URL 请求进来，验证是否路由匹配，还是用来生成 URL，是进还是出的这样一个定义，在不同的场景下面可能响应的逻辑是不一样的</p><p>下面的逻辑是如果路由是进来的，也就是通过 URL 配置 action 的情况，就做一个判断，根据 routeKey 取到当前输入的这个值，然后判断它是否可以转成 long，这个其实模拟了类型验证，比如说 long 型验证的方式</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> RoutingDemo<span class="token punctuation">.</span>Constraints<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRouteConstraint</span> <span class="token punctuation">:</span> IRouteConstraint    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">Match</span><span class="token punctuation">(</span>HttpContext httpContext<span class="token punctuation">,</span> IRouter route<span class="token punctuation">,</span> <span class="token keyword">string</span> routeKey<span class="token punctuation">,</span> RouteValueDictionary values<span class="token punctuation">,</span> RouteDirection routeDirection<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>RouteDirection<span class="token punctuation">.</span>IncomingRequest <span class="token operator">==</span> routeDirection<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> v <span class="token operator">=</span> values<span class="token punctuation">[</span>routeKey<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RouteDirection</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Routing<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> RouteDirection    <span class="token punctuation">{</span>        IncomingRequest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        UrlGeneration <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看一下约束是如何注入到我们系统里生效的</p><p>可以给我们的约束起一个名字 isLong，这个名字就是用来 Attribute 上面标识约束的</p><pre class="line-numbers language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddRouting</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//options.ConstraintMap.Add("MyRouteConstraint", typeof(MyRouteConstraint));</span>    options<span class="token punctuation">.</span>ConstraintMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"isLong"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>MyRouteConstraint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OrderController 里面也修改为 isLong</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// </span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="id">必须可以转为long&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token comment" spellcheck="true">//[HttpGet("{id:MyRouteConstraint}")]// 这里使用了自定义的约束</span><span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{id:isLong}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//public bool OrderExist(object id)</span><span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">OrderExist</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromRoute<span class="token punctuation">]</span> <span class="token keyword">string</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，输入34，返回响应码200，输入abc，返回响应码404，也就是自定义约束生效了</p><p>接下来讲一下链接生成的过程</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// </span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="id">最大20&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;param name="linkGenerator">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{id:max(20)}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 这里使用了 Max 的约束</span><span class="token comment" spellcheck="true">//public bool Max(long id)</span><span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromRoute<span class="token punctuation">]</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token punctuation">[</span>FromServices<span class="token punctuation">]</span>LinkGenerator linkGenerator<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这两行就是分别获取完整 Uri 和 path 的代码</span>    <span class="token comment" spellcheck="true">// 它还有不同的重载，可以根据需要传入不同的路由的值</span>    <span class="token keyword">var</span> path <span class="token operator">=</span> linkGenerator<span class="token punctuation">.</span><span class="token function">GetPathByAction</span><span class="token punctuation">(</span>HttpContext<span class="token punctuation">,</span>        action<span class="token punctuation">:</span> <span class="token string">"Reque"</span><span class="token punctuation">,</span>        controller<span class="token punctuation">:</span> <span class="token string">"Order"</span><span class="token punctuation">,</span>        values<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">"abc"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为下面对 name 有一个必填的约束，所以这里需要传值</span>    <span class="token keyword">var</span> uri <span class="token operator">=</span> linkGenerator<span class="token punctuation">.</span><span class="token function">GetUriByAction</span><span class="token punctuation">(</span>HttpContext<span class="token punctuation">,</span>        action<span class="token punctuation">:</span> <span class="token string">"Reque"</span><span class="token punctuation">,</span>        controller<span class="token punctuation">:</span> <span class="token string">"Order"</span><span class="token punctuation">,</span>        values<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">"abc"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// </span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="ss">必填&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{name:required}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 必填约束</span><span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">Reque</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，端点调试，输入1，点击执行，可以看到</p><p>path 的值为</p><pre><code>/api/Order/Reque/abc</code></pre><p>uri 的值为</p><pre><code>https://localhost:5001/api/Order/Reque/abc</code></pre><p>在定义 Controller 的时候，实际上还会做一些接口废弃的过程，通过 [Obsolete]</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// </span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="ss">必填&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">"{name:required}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 必填约束</span><span class="token punctuation">[</span>Obsolete<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">Reque</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们不必直接删除我们的接口，它还可以正常工作，但是我们可以把它标记为已废弃，在 Swagger 上面会有体现</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img2020.cnblogs.com/blog/1412316/202003/1412316-20200317233508400-149310093.jpg" alt=""></p><p>可以看到这个接口已经被标记为废弃的，但是它的调用还是可以工作的</p><p>总结一下</p><ol><li><p>Restful 不是必须的，只要约束好 Http 方法以及 URL 地址，还有 Http 响应码，响应的 Json 格式，这些约定只要适合团队的协作习惯就可以了，也就是说需要定义好 API 的表达契约</p></li><li><p>建议是把 API 都约束在特定的目录下面，与其他功能性页面进行隔离，比如说 /api /api 加版本号这样子的方式</p></li><li><p>在废弃 API 的过程中间，应该是间隔版本的方式废弃，也就是说先将即将废弃的 API 标记为已废弃，但是它还是可以工作，间隔几个版本之后将代码删除掉</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NetCore 开发实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-3-3-NetCoreSourceCode</title>
      <link href="/2020/04/06/dotnet-advanced-series-3-3-netcoresourcecode/"/>
      <url>/2020/04/06/dotnet-advanced-series-3-3-netcoresourcecode/</url>
      
        <content type="html"><![CDATA[<h2 id="编译的目的"><a href="#编译的目的" class="headerlink" title="编译的目的"></a>编译的目的</h2><p>debug版本的运行时，调试源码，一行不差。</p><h2 id="NET-Core-源码编译"><a href="#NET-Core-源码编译" class="headerlink" title=".NET Core 源码编译"></a>.NET Core 源码编译</h2><p><a href="https://github.com/dotnet" target="_blank" rel="noopener">https://github.com/dotnet</a> 这是一个合并过后的仓库，包括四个项目：</p><ul><li><a href="https://github.com/dotnet/runtime/tree/master/src/coreclr" title="coreclr" target="_blank" rel="noopener">coreclr</a></li><li><a href="https://github.com/dotnet/runtime/tree/master/src/installer" title="installer" target="_blank" rel="noopener">installer</a></li><li><a href="https://github.com/dotnet/runtime/tree/master/src/libraries" title="libraries" target="_blank" rel="noopener">libraries</a> </li><li><a href="https://github.com/dotnet/runtime/tree/master/src/mono" title="mono" target="_blank" rel="noopener">mono</a></li></ul><p>重点关注<strong>Runtime</strong>这个仓库：<br>git clone <a href="https://github.com/dotnet/runtime.git" target="_blank" rel="noopener">https://github.com/dotnet/runtime.git</a></p><h3 id="Windows环境："><a href="#Windows环境：" class="headerlink" title="Windows环境："></a>Windows环境：</h3><p>Win 10 专业版 1903</p><p>第一步：<strong>长路径：</strong></p><ul><li>组策略(gpedit.msc) &gt; 计算机配置 &gt; 管理模板 &gt; 系统 &gt; 文件系统 &gt; 启用 Win32 长路径</li><li>管理员终端：git config –system core.longpaths true</li></ul><p>第二步：<strong>VS 安装组件</strong></p><ol><li>工作负载： .NET桌面开发、 C++桌面开发</li><li>使用源码中的.vsconfig，在installer中导入即可。</li></ol><p>第三步：<strong>CMake</strong>（最低3.15.5）<a href="http://www.cmake.org/download" target="_blank" rel="noopener">http://www.cmake.org/download</a> </p><p>第四步：<strong>Python</strong> (最低3.7.4)</p><ul><li>.\build -subsetCategory CoreClr <strong>编译分类CoreClr</strong></li></ul><h3 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h3><ol><li><p>安装以下软件包</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get updatesudo apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取签名密钥</p><pre class="line-numbers language-shell"><code class="language-shell">wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将kitware存储库添加到源列表并进行更新</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/bionic main'sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装 kitware 密钥更新包</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install kitware-archive-keyringsudo apt-key --keyring /etc/apt/trusted.gpg del C1F34CDD40CD72DA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装所有的依赖包</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install locales cmake llvm-9 clang-9 autoconf automake libtool build-essential python curl git lldb-6.0 liblldb-6.0-dev libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libssl-dev libnuma-dev libkrb5-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p><strong>编译项目</strong></p><ul><li>./build.sh -subsetCategory CoreClr</li><li>./build.sh -subsetCategory Libraries</li><li>./build.sh -subsetCategory Installers</li></ul><p><strong>安装运行时，注意目录问题</strong></p><pre class="line-numbers language-shell"><code class="language-shell">tar zxf /home/runtime/artifacts/packages/Debug/Shipping/dotnet-runtime-5.0.0-dev-linux-x64.tar.gz -C  /usr/share/dotnetln -s  /usr/share/dotnet/dotnet /usr/local/bin/dotnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>dev 运行时安装包的路径：runtime/artifacts/packages/Debug/Shipping</p><p>使用开发版运行时调试的项目配置(csproj)</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span>Project Sdk<span class="token operator">=</span><span class="token string">"Microsoft.NET.Sdk"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>PropertyGroup<span class="token operator">></span>    <span class="token operator">&lt;</span>OutputType<span class="token operator">></span>Exe<span class="token operator">&lt;</span><span class="token operator">/</span>OutputType<span class="token operator">></span>    <span class="token operator">&lt;</span>TargetFramework<span class="token operator">></span>netcoreapp5<span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>TargetFramework<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>添加下面两行<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>UseAppHost<span class="token operator">></span><span class="token keyword">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>UseAppHost<span class="token operator">></span>    <span class="token operator">&lt;</span>RuntimeFrameworkVersion<span class="token operator">></span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>dev<span class="token operator">&lt;</span><span class="token operator">/</span>RuntimeFrameworkVersion<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>PropertyGroup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Project<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Linux 5.0预览版 SDK安装：<br><strong>创建安装目录</strong><br>mkdir /home/dotnet_install<br><strong>转到安装目录</strong><br>cd /home/dotnet_install<br><strong>下载安装脚本，我们这里是从微软官方下载的5.0预览版</strong><br>curl -L <a href="https://aka.ms/install-dotnet-preview" target="_blank" rel="noopener">https://aka.ms/install-dotnet-preview</a> -o install-dotnet-preview.sh<br><strong>执行脚本进行安装</strong><br>bash ./install-dotnet-preview.sh</p><p><strong>5.0 开发版运行时：</strong></p><ul><li>dotnet-apphost-pack-5.0.0-dev-win-x64.exe</li><li>dotnet-runtime-5.0.0-dev-win-x64.msi</li></ul><p><strong>5.0 开发版符号表：</strong></p><ul><li>dotnet-runtime-symbols-5.0.0-dev-win-x64.zip</li></ul><p><strong>最新版CMake for win：</strong><br>cmake-3.17.0-win64-x64</p><p>CoreCLR的源码更适合搞C++的人去研究；</p><ul><li>作为底层架构师，那实际上是另一个领域，也叫底层技术；</li><li>上层（应用）架构师可能更加关注Core FX，应用层面的底层；</li></ul><p>Core FX(Library)相对于CoreCLR算是上层；</p><ul><li>Core FX(Library)相对于整个Net Core来说，那就是底层；</li><li>所以研究Core FX(Library)对于C#开发者来说，可能更加实际和有用；</li></ul><p>一开始框架开发；然后自己搭框架，业务底层；最后造轮子；研究Core FX;<br>最后的最后，才会开始另外一门语言和技术，去研究CoreCLR.<br>可以这么说，CoreCLR属于最底层，底层地狱级别的。</p><p>正因如此，架构师也分为系统架构师和应用架构师。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> .Net Core Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-3-2-CommandLine</title>
      <link href="/2020/04/04/dotnet-advanced-series-3-2-commandline/"/>
      <url>/2020/04/04/dotnet-advanced-series-3-2-commandline/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容："><a href="#主要内容：" class="headerlink" title="主要内容："></a>主要内容：</h2><ul><li>dotnet new 命令，创建项目</li><li>dotnet sln  命令 ，管理解决方案</li><li>dotnet reference 管理项目间引用</li><li>dotnet package 管理项目引用包</li><li>dotnet build 项目构建</li><li>dotnet publish 项目发布</li></ul><h2 id="CLI开篇"><a href="#CLI开篇" class="headerlink" title="CLI开篇"></a>CLI开篇</h2><p>CLI命令行，唯一的用户界面 .NET Core。<br><a href="https://github.com/dotnet/cli" target="_blank" rel="noopener">https://github.com/dotnet/cli</a> 这是net 5之前的CLI; 现在已经被合并到<a href="https://github.com/dotnet/sdk" target="_blank" rel="noopener">https://github.com/dotnet/sdk</a>这个仓库了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/CLIResp1.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/CLIResp2.png" alt=""></p><p>这是一个工具，跟着SDK一起安装的，运行时也会有CLI，不一样。<br>SDK 里的是完整的CLI, 运行时只有run等简单命令。</p><p><strong>dotnet –info</strong> 可以显示安装的SDK和运行时；<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dontnet--info.png" alt=""><br><strong>dotnet –version</strong> 显示当前目录下使用的SDK版本，默认按照最新的；<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnet--version.png" alt=""><br>那么如何切换版本呢？<br>在目录下有一个Global.json，会自动读取SDK版本号。例如我们可以在这个目录下创建一个Global.json来切换版本。</p><p><strong>dotnet new global.json –sdk-version 2.2.402</strong><br>当前目录，然后向上级目录搜索，直到找到这个global.json，使用这个文件中的SDK版本号，如果没找到的话就是使用最新的。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/globaljson.png" alt=""></p><p>VS，学的.NET Core 跨平台，就应该有点跨平台开发的样子。<br>CLI这个就是跨平台的工具，在Linux下也是一样的命令。</p><pre><code>dotnet new &lt;TEMPLATE&gt; [-l|--list] [--type]dotnet new &lt;TEMPLATE&gt; [-lang|--language] [-n|--mena]                      [-o|--output] [Template options] [--force]                                          [-i|--install] [-u|--uninstall]                                            [--update-apply] [--update-check]</code></pre><p>&lt;&gt;这个代表是必填参数，[]代表是可选参数，-代表是简写，–代表是写全</p><p>例如可以快速查找需要创建的模板名字，通过type和list组合即可：<br><strong>dotnet new –list –type project</strong> 查找项目模板<br><strong>dotnet new –list –type item</strong> 查找子项模板<br><strong>dotnet new –list –type other</strong> 查找其他模板<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetnew.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetnewListType.png" alt=""></p><p>创建一个console项目，使用 <strong>dotnet new console –name Helloworld</strong>，默认创建一个Helloword的目录，当然也可以使用<strong>dotnet new console -n Helloworld -o Demo</strong>指定输出目录，name是指项目名字。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/CreateHelloWorld.png" alt=""></p><p><strong>补全dotnet命令可以这么操作：</strong></p><ul><li><strong>Step1:</strong> 在powershell中执行下面命令，创建<code>Microsoft.PowerShell_profile.ps1</code>这个文件；</li></ul><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>Path <span class="token variable">$PROFILE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">New-Item</span> <span class="token operator">-</span>ItemType File <span class="token operator">-</span>Path <span class="token variable">$PROFILE</span> <span class="token operator">-</span>Force<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>Step2:</strong> 用记事本打开这个文件<code>notepad $PROFILE</code>，并在记事本中贴上下面的命令行，保存；</li></ul><pre class="line-numbers language-powershell"><code class="language-powershell">Register<span class="token operator">-</span>ArgumentCompleter <span class="token operator">-</span>Native <span class="token operator">-</span>CommandName dotnet <span class="token operator">-</span>ScriptBlock <span class="token punctuation">{</span> <span class="token keyword">param</span><span class="token punctuation">(</span><span class="token variable">$commandName</span><span class="token punctuation">,</span> <span class="token variable">$wordToComplete</span><span class="token punctuation">,</span> <span class="token variable">$cursorPosition</span><span class="token punctuation">)</span> dotnet complete <span class="token operator">--</span>position <span class="token variable">$cursorPosition</span> <span class="token string">"<span class="token variable">$wordToComplete</span>"</span> <span class="token punctuation">|</span> <span class="token function">ForEach-Object</span> <span class="token punctuation">{</span>   <span class="token namespace">[System.Management.Automation.CompletionResult]</span>::new<span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">,</span> <span class="token variable">$_</span><span class="token punctuation">,</span> <span class="token string">'ParameterValue'</span><span class="token punctuation">,</span> <span class="token variable">$_</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Step3:</strong> 在powershell中执行<code>set-ExecutionPolicy RemoteSigned</code>这个命令进行注册。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetTab.png" alt=""></p><h2 id="如何来创建解决方案？"><a href="#如何来创建解决方案？" class="headerlink" title="如何来创建解决方案？"></a>如何来创建解决方案？</h2><ul><li><strong>dotnet sln [<solution_file>] [command] [-h|–help]</solution_file></strong></li></ul><p><strong>第一步</strong>，<code>dotnet new sln -o Demo</code> 创建一个解决方案文件demo.sln<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetslndemo1.png" alt=""><br><strong>第二步</strong>，然后需要<strong>cd到这个Demo目录</strong>创建项目：</p><ul><li>dotnet new console -o Demo.Main</li><li>dotnet new classlib -o Demo.Core</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetslndemo2.png" alt=""><br><strong>第三步</strong>，将创建的项目添加到解决方案下面，并查看sln下面有多少项目，删除项目也是一样：</p><ul><li>dotnet sln add Demo.Main Demo.Core</li><li>dotnet sln list</li><li>dotnet sln remove Demo.Main Demo.Core</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetslndemo3.png" alt=""></p><p><strong>第四步</strong>，直接用<code>code Demo</code>命令通过VSCode打开这个解决方案。</p><p><strong>第五步</strong>，添加引用关系，例如Main要引用Core这个项目。还可以查看，删除引用等。<br><code>dotnet &lt;add|list|remove&gt; [&lt;PROJECT&gt;] reference &lt;PROJECT_REFERENCES&gt;</code></p><ul><li>dotnet add .\Demo.Main reference .\Demo.Core</li><li>dotnet list .\Demo.Main reference .\Demo.Core</li><li>dotnet remove .\Demo.Main reference .\Demo.Core</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetReference.png" alt=""></p><p><strong>第六步</strong>，添加nuget packages. 相应的，查看和删除也是一样的</p><ul><li>dotnet add .\Demo.Main package NLog</li><li>dotnet list .\Demo.Main package NLog</li><li>dotnet remove .\Demo.Main package NLog</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetPackages.png" alt=""></p><h2 id="如何构建项目？MSBuild"><a href="#如何构建项目？MSBuild" class="headerlink" title="如何构建项目？MSBuild"></a>如何构建项目？MSBuild</h2><p><strong>dotnet build [-h|–help]</strong><br>MSBuild调用了Roslyn，生成二进制。Roslyn只是负责生成中间语言，从中间语言到二进制是需要MSBuild这个工具来实现的。</p><p>dotnet build [<project>|<solution>]<br>                  [-o|–output] <strong>输出目录</strong><br>                  [-f|–framework] <strong>以哪个目标框架生成</strong><br>                  [-c|–configuration] <strong>Debug/Release</strong><br>                  [-r|–runtime]  RID=[os].[version]-[arch] <strong>[osx.10.11-x64]</strong><br>                  [–no-incremental] <strong>全量 默认增量</strong><br>                  [–no-dependencies]<br>                  [-v|–verbosity] <strong>基本很多命令都有这个参数，输出日志 d详细，q静默，最少</strong></solution></project></p><h2 id="如何发布项目？"><a href="#如何发布项目？" class="headerlink" title="如何发布项目？"></a>如何发布项目？</h2><p><code>dotnet publish</code>执行时会先判断当前目录是否在上一个构建之后有改动。没有改动的话直接打包。<br>代码编译后的中间语言输出结果。<br>SDK(开发工具包，CLI) 包含Runtime（安装包）。</p><ul><li><p><strong>独立发布</strong>：自带运行时，针对系统进行发布，文件会大一些，多一些。<br>系统里的运行时版本变量额，但是你的应用用了某个版本的API。</p></li><li><p><strong>依赖发布</strong>：不带运行时，跨平台，SDK是开发用的，默认就是依赖发布</p></li></ul><p>dotnet publish [<project>|<solution>]<br>                         [-o|–output] [-f|–framework] [-c|–configuration]<br>                         [-r|–runtime] [–no-incremental] [–no-dependencies]<br>                         [-v|–verbosity] [–self-contained] [–no-self-contained]</solution></project></p><ul><li>dotnet publish -r win10-x64 –self-contained 这个就是独立发布，包含了运行时，文件较多。</li><li>dotnet publish 这是依赖运行时的发布，可以看到文件比较少。</li></ul><h2 id="如何运行项目？"><a href="#如何运行项目？" class="headerlink" title="如何运行项目？"></a>如何运行项目？</h2><ul><li>dotnet run 针对的是项目，要在项目文件夹；</li><li>dotnet Demo.Main.dll 针对的是dll文件；</li></ul><h2 id="如何发布Nuget包？"><a href="#如何发布Nuget包？" class="headerlink" title="如何发布Nuget包？"></a>如何发布Nuget包？</h2><p>dotnet nuget push [<root>] [-s|–source] [-ss|–symbol-source] [-t|–timeout]<br>                           [-k|–api-key] [-sk|–symbol-api-key]</root></p><ul><li><strong>Step1</strong>: 创建一个库，<code>dotnet new classlib -n ZhengChaoqiang.Helloworld -o Packages</code></li><li><strong>Step2</strong>: 打包成nupkg格式的包，<code>dotnet pack -o nupkgs</code></li><li><strong>Step3</strong>: 推送到Nuget服务器，<code>dotnet nuget push nupkgs\ZhengChaoqiang.Helloworld.1.0.0.nupkg -k oy2dl7wy6yifgnogmkyasy6ybl7b5nleljo6lnvxfpg6se -s https://api.nuget.org/v3/index.json</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/02NetCoreCommandLine/dotnetNugetPush.png" alt=""></p><p>其中的-k 是nuget的api key, 需要自己在nuget服务器上申请。<br>另外，官方nuget上的包，你删不了，只能设置成不被删除。</p><p><strong>查看本地包缓存：</strong> <code>dotnet nuget locals all -l</code>查看本地包缓存，还可以清除这些缓存，释放空间，可以使用这个命令<code>dotnet nuget locals all -clear</code></p><h2 id="CLI实践一下"><a href="#CLI实践一下" class="headerlink" title="CLI实践一下"></a>CLI实践一下</h2><p><strong>使用CLI创建一个解决方案和项目实战</strong></p><ul><li>dotnet new sln -o eShop  </li><li>cd .\eShop\</li><li>dotnet new classlib -o eShop.Logic</li><li>dotnet new mvc -o eShop.Web</li><li>dotnet new webapi-o eShop.Service</li><li>dotnet sln add eShop.Logic eShop.Web eShop.Service 加入到解决方案</li><li>dotnet add eShop.Web reference eShop.Logic 添加项目引用</li><li>dotnet add eShop.Service reference eShop.Logic 添加项目引用</li><li>code .</li><li>dotnet add eShop.Logic package Nlog –version 4.7.0 添加Nuget引用</li><li>dotnet new xunit -o eShop.Logic.tests 添加测试项目</li><li>dotnet sln add eShop.Logic.tests</li><li>dotnet add eShop.Logic.tests reference eShop.Logic 在test中添加引用</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> .Net Core Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-3-1-BasicTheory</title>
      <link href="/2020/04/04/dotnet-advanced-series-3-1-basictheory/"/>
      <url>/2020/04/04/dotnet-advanced-series-3-1-basictheory/</url>
      
        <content type="html"><![CDATA[<p><strong>.NET Core 到底是什么？</strong><br>.NET Core 是小型的、高效的、可以通过文件复制直接部署的跨平台框架。</p><p><strong>备受大家关注？</strong></p><ol><li>.NET Core 自身开源，而且鼓励更多的 .NET 项目开源</li><li>.NET Core 支持跨平台特性，可以在Windows、Linux、macOS等系统上运行</li><li>.NET Core 的性能不仅比 .NET Framework 更加优秀，也比其它同级开源框架高效</li></ol><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>开源对传统的.NET开发人员，但也不是什么熟悉的东西。</p><p>时代的变迁有多么巨大，2000年代初期的时候，微软的高管们是怎么评价开源的：<strong>严重破坏</strong>。</p><p>你看看现在的微软。GITHUB都给收了，这种变化与.NET基金会有很大的关系。</p><p>.NET 基金会由微软牵头组建，其重要资产主要是  .NET Core 的源代码以及.NET Core周边的一些开源项目。</p><p>.NET 基金会的开源项目基本上都遵循 MIT 许可协议。</p><p>2014微软牵头组建，创始人有6个，都不是微软的员工。</p><p>2019年.NET基金会改选了一次，才有了一名微软 的员工。</p><p>MVP，很多知名公司（亚马逊、谷歌、三星）</p><p>.NET Core的源码以及.NET Core周边的一些开源项目，都是这个基金会的重要资产。</p><p>开源项目基本上遵循MIT许可协议，极大的开放性和移植性。</p><p><strong>四种开源协议</strong> GPL\Apache\BSD\MIT</p><p>目的是为了保护和尊重作者的知识产权，即便是开源，也不说明源代码可以随意使用！！<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/01NetCoreBasicTheory/OpenSourceProtocol.jpg" alt=""></p><h3 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h3><p><strong>GPL</strong>对开源软件的使用限制最严格的，具有极高的传染性。</p><p><strong>核心思想</strong>：让全世界上的软件都开源！甚至是它的衍生，也必须用GPL。</p><p>这对商业软件构成了很大的挑战。</p><p>GPL发展的并不好，变体LGPL仅仅是引用LGPL许可协议下的软件，那么无需开源。</p><p>曾经中国发生的一件侵权的事件，其他的开发者偶然发现，告诉了被引用的原作者。。</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>Apache 广泛的存在于Apache的软件。</p><p>鼓励开源软件的使用者充分尊重软件的原作者：</p><p>注明你用了，以及作者信息。</p><p>你对阿帕奇协议的项目有了修改，发布时，对你继续进行的修改说明。</p><p>他不强制要求你开源。</p><h3 id="BSD和MIT"><a href="#BSD和MIT" class="headerlink" title="BSD和MIT"></a>BSD和MIT</h3><p>最宽松的协议，自由的使用，自由的修改，自由的发布。</p><p>这两者差不多！！</p><p><strong>BSD额外有一个规定</strong>：如果你对BSD协议下的软件的源码进行了修改再发布，那么你不能借用该项目原作者的名义进行宣传。</p><p>没什么坏处！</p><p>.NET CORE全系列的开源项目都采用MIT协议。无限制的修改、移植、打包、发布。这是net core最大的驱动力。</p><h2 id="NET-Core的重要组件"><a href="#NET-Core的重要组件" class="headerlink" title=".NET Core的重要组件"></a>.NET Core的重要组件</h2><p>.NET CORE 并不是一个单独的开源项目，很多个开源项目所构成的一个项目集合。</p><p>核心是由四个支柱项目构成：<strong>CoreCLR</strong>、<strong>CoreFx</strong>、<strong>CLI</strong>、<strong>Rolsyn</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/01NetCoreBasicTheory/CoreComponent.jpg" alt=""></p><h3 id="CoreCLR"><a href="#CoreCLR" class="headerlink" title="CoreCLR"></a>CoreCLR</h3><p><strong>CORE CLR</strong>，.NET Core的公共语言运行时，C++编写实现的。</p><p>.NET FW 的CLR发展而来的。结构上与CLR是一致的。</p><p>CLR的第一职责就是执行.NET程序，.NET程序和C\C++这些语言编译出来的程序很大区别。</p><p>原生程序：特定硬件架构的机器码，调用特定系统的接口，只能在某一个特定平台运行。</p><p>.NET 程序：中间代码，不依赖平台，不同的平台运行。</p><p>解析中间代码，翻译成目标平的机器码，生成元数据（类型信息、GC信息、异常信息）</p><p>把已经编译过的IL加载内存中的部分是Class Loader。</p><p>翻译代码的是<strong>JIT</strong>，是CLR的一部分。</p><p>目前代码的执行路径、操作系统、硬件情况，最适合当前计算机执行的高效的汇编代码。</p><p>JIT是IL（中间语言，MSIL）的编译器，并不是C#的编译器。</p><p>CLR为了保证类型安全，类型安全指的是.NET程序保证对象类型一定正确。</p><p>C语言中，int* void*，传递其他地方，他是无法判断这个指针的真实类型是int还是long，错误的把void转成long，也不会发生异常。</p><p>string类型object，传递到其它地方，通过GetType这个方法判断这个对象的真实类型。</p><p>为了实现类型安全，CLR每个引用类型的对象中保存类型信息，由CLR管理的对象就被称作<strong>托管对象</strong>。</p><p>CLR提供了异常处理机制。传统的机制使用函数返回值通知和处理错误，实现起来很有难度。也是在CLR处理。</p><p>线程机制，CLR对原生的线程以及同步对象进行了包装，使用相同的方式，在不同的平台进行多线程处理。</p><p>自动内存管理，<strong>垃圾回收机制</strong>（GC），也在CLR。</p><p>如果不能及时回收，内存不足。</p><p>GC会一直关注内存的变化，在适当的时候启动并对内存中无效的对象执行销毁操作，进行内存的回收和管理。。</p><p>GC只能自动销毁CLR托管的对象；非托管对象，文件句柄，非托管的资源，都是用了托管代码包装。<br>而这些是托管释放的，封装过了。这就不是GC干的。</p><h3 id="Core-FX"><a href="#Core-FX" class="headerlink" title="Core FX"></a>Core FX</h3><p>Core FX是.NET Core的基础类型。完全由C#语言编写，库函数项目。</p><p>System.DateTime类型，到了.NET 5，项目的名字变了，Libraries = CoreFx</p><p><strong>基础类库</strong>：减少.NET开发人员的工作量；可以让不同模块之间的数据交互更加容易。</p><p>两个类库使用不同的时间类型，内置的类型越丰富，各个模块共同使用的类型就越多。</p><p>Core FX大多数代码都是从<strong>.NET FW的BCL</strong>里移植过来的。</p><p>多个操作系统，大量的使用了<strong>parial</strong>关键字，部分类。</p><p>多平台功用的代码放在一个源代码文件中，具体某个操作系统相关的代码放在另一个与平台相关的源代码文件中。</p><p>不同的CLR，跨平台，不同的平台有不同的CLR，还有Framework、Mono</p><p>功能是有差异，所以又提出了<strong>.Net Standard</strong></p><p>.NET Standard</p><p>是一种.NET 标准。</p><p>框架类库中划分了一部分最基础的功能，被不同的CLR实现，.NET 标准版本越高，要求支持的功能越多。。</p><p>.NET FW 4.6.1 和.NET Core 2.0 都支持.NET 标准 2.0.</p><p>.NET FW 4.6 不支持 .NET 标准 2.0，支持.NET 标准1.3 .</p><p>为了兼容.NET 标准，迁移的时候。</p><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>CLI, <strong>Common Language Infrastructure</strong>，通用中间语言<br>CLI, <strong>Command Line Interface</strong> 命令行接口<br>如果站在整个微软的生态来说CLI,那么我们是在说通用中间语言；如果在net core里面说CLI，那么就是在说命令行接口。</p><p>特性一：<strong>跨平台</strong><br>公开的技术标准，定义了一个不依赖于具体操作系统与硬件架构的中间语言（IL），以及执行这个语言所需的运行环境。</p><p>C语言的标准int类型的长度最少为2个字节，实际多少是不确定的，32位4个字节，64位8个字节。</p><p>int类型永远是4！</p><p>特性一：<strong>跨语言</strong><br>我们通常不会直接编写IL，先编写高级语言再使用工具（Roslyn）转换到中间语言。</p><p>标准里面一些定义：有哪些类型int\long\string、指令的种类、方法的结构、模块的结构，二进制文件的格式。。</p><p>高级语言（C#\F#）都可以转换成同一种IL语言，</p><p>.NET Core 里说CLI</p><p>说的是这个CLI，Command Line Interface 命令行接口。</p><p>以前.NET FW只支持win，WIN32 GUI工具，不支持Linux的文件系统，可执行文件格式。</p><p>.NET Core <strong>目标就是跨平台</strong>，推倒重来。设计一款多平台统一、高效，便于使用的.NET Core 工具，很不容易的事情。</p><p>CLI是一个独立的项目，</p><p>很有难度的问题：.NET Core 编译生成的二进制，到底是针对不同的操作系统生成不同的文件格式，还是统一的文件格式？</p><p>.NET Core 跨平台开发，无论是win还是linux，<strong>NET Core编译出来的二进制文件都是dll，还都是PE格式</strong>。</p><p>.NET Core必须提供一个<strong>容器</strong>，来保证所有操作系统平台都可以加载<strong>PE格式的DLL文件</strong>。</p><p>CLI工具，.NET Core 2.0 才固定下来的。</p><p>整个CLI项目不同的语言开发的多个工具组成，现在用一个工具<strong>dotnet</strong>，项目管理、项目构建、代码运行、包管理。</p><h3 id="Rolsyn"><a href="#Rolsyn" class="headerlink" title="Rolsyn"></a>Rolsyn</h3><p>.NET上的高级语言编译器，可以编译C#、VB.NET\F#。</p><p>确切的来说，Rolsyn被微软定义为下一代<strong>编译平台</strong>，而不仅仅是编译器。</p><p>代码编译外，提供了<strong>代码分析服务</strong>，<strong>丰富的API</strong>。</p><p>相对于之前的C#的编译器csc，Rolsyn生成IL更加高效、编译时间也大大缩短。</p><p>从VS2017开始，代码编辑的时候，Roslyn提供的动态编译功能。有没有敲错，不需要编译就能知道，还有类上面提示被引用了多少次等信息。</p><h2 id="NET-Core源码"><a href="#NET-Core源码" class="headerlink" title=".NET Core源码"></a>.NET Core源码</h2><ul><li>.NET Core 源码：<a href="http://www.github.com/dotnet" target="_blank" rel="noopener">http://www.github.com/dotnet</a></li><li>ASP.NET Core 源码：<a href="http://www.github.com/aspnet" target="_blank" rel="noopener">http://www.github.com/aspnet</a></li><li>以前这四个开源项目都是独立的四个仓库。</li></ul><p>ASP.NET Core它并不绝对依赖哪个.NET 框架。</p><p>.NET基金会还没有决定把.NET Core 开源的时候，ASP.NET MVC就已经开源了。</p><p>ASP.NET Core和.NET Core是两个相对独立的技术栈。</p><p><strong>.NET 标准</strong><br>.NET 标准是纯文本内容。</p><p>.NET 经过很多年的发展，客户端Unity游戏引擎C#语言，手机游戏。</p><p>用来开发客户端的Xamarin，Linux macOS IOS Android。</p><p>发展到了离散化的趋势，</p><p>这些差异对于.NET最初提出来的 <strong>一次编译、随处运行</strong> 是相悖的。</p><p>.NET 基金会 对.NET 开发框架规范，要求最大可能地保证.NET应用程序的通用性和移植性。</p><p>.NET标准是<strong>一堆规范文本</strong>，不是程序，不是类库，纯文本编写函数声明信息，<strong>用来规范相同的类型和函数在不同的.NET开发框架中具有的不同的形态</strong>。</p><p>无缝的在各种开发框架之间进行迁移，所有支持.NET标准的开发框架都有义务按照.NET标准规范实现相应的函数声明。</p><p>.NET 标准 2.1 ,</p><p>1.x版本和2.x版本，任务是<strong>规范现在函数的生命和调用</strong></p><p>未来！！.NET 标准 3.x 将会<strong>主导.NET的发展</strong>，<strong>标准先行</strong>，其他的框架都来实现</p><p>ASP.NET Core 是一个上层开发框架，没有了底层框架，啥也干不了。net core 和 mono就是底层框架。</p><p>运行时 .netcore mono</p><h2 id="重要工具"><a href="#重要工具" class="headerlink" title="重要工具"></a>重要工具</h2><p>Mac版的VS</p><p>是不是觉得不好用，觉得超级难用，为什么难用？</p><p>Mac版的VS前身不是VS，是Xamarin Studio，MonoDevelop衍生来的。</p><p>VS CODE，Rider 也觉得不好用。</p><p>下面有两个问题：</p><ul><li>从.NET FW迁移到.NET Core 怎么做？</li><li>升级.NET Core的版本，哪里不兼容？</li></ul><p><strong>1.针对项目源代码看能否迁移</strong><br><strong>.NET Portability Analyzer</strong><br>可以在扩展里面安装。</p><p>.NET迁移分析工具，分析项目的源代码，并且生成分析报告。<br>帮我们去找到不谦容的API。</p><p><strong>2.针对Nuget引用看能否迁移</strong><br><a href="https://icanhasdot.net/" target="_blank" rel="noopener">https://icanhasdot.net/</a><br>第三方引用 NUGET，不是项目上传，csproj上传，这个文件就可以。</p><p><strong>反编译：</strong></p><ul><li>Dnspy</li><li>Ilspy</li></ul><h2 id="几个常见问题"><a href="#几个常见问题" class="headerlink" title="几个常见问题"></a>几个常见问题</h2><p>1.<strong>.NET 标准不是程序 和.NET Core有什么区别？</strong><br>.NET Core是可以执行托管的运行时平台，.NET 标准是一堆文本.</p><p>2.<strong>什么情况下使用.NET 标准编写应用程序？</strong><br>编写是一个exe，可执行的，不需要用.NET 标准。<br>如果编写的是通用的类库，既可以给framwork用，也可以给net core用，那就要用.NET 标准。</p><p>3.<strong>.NET Core能不用使用.NET 标准的类库</strong><br>肯定可以。<br>反过来，.NET 标准是不是可以用Net Core的类库呢？<br>也可以，但是你要注意版本问题，就不那么通用。。</p><p>4.<strong>有些已经被纳入.NET 标准的API，会不会出现问题。</strong><br>异常 NotSupportedExcepotion<br>有一些API在某几个.NET框架中支持，在另外的一种 不支持，<strong>仍然有可能</strong>被集成到.NET标准。</p><p>例如： <strong>AppDomain.CreateDomain</strong>在linux里是不支持的。</p><p>5.<strong>Net Core 3.1可用任何版本的.NET 标准</strong></p><p>6.<strong>.NET Core和.NET FW的性能差距？</strong><br>确实很巨大，.NET Core 做了很多改进，简化内部的指令数量，降低性能开销。<br>两个项目，就用最基本的集合。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/13NetCore/01NetCoreBasicTheory/FWvsCorePerformance.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> .Net Core Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-5-2-MicroService</title>
      <link href="/2020/03/16/dotnet-advanced-series-5-2-microservice/"/>
      <url>/2020/03/16/dotnet-advanced-series-5-2-microservice/</url>
      
        <content type="html"><![CDATA[<h2 id="1-主要内容概要"><a href="#1-主要内容概要" class="headerlink" title="1. 主要内容概要"></a>1. 主要内容概要</h2><p>①微服务架构解析，优缺点、挑战与转变<br>②MicroService全组件解析<br>③Consul注册，心跳检测，服务发现</p><h2 id="2-架构演进"><a href="#2-架构演进" class="headerlink" title="2. 架构演进"></a>2. 架构演进</h2><h3 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h3><p><strong>单体应用时代：应用程序就是一个项目，在一个进程里面运行。</strong></p><ul><li>开发简单，集中管理，没有分布式的损耗</li><li>不好维护，升级困难，无法快捷迭代，稳定性也差</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Monolithic.png" alt="Monolithic"></p><h3 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h3><ul><li>垂直拆分，独立部署和维护，分而治之！</li><li>拆分越多，存储越复杂，系统间重复的东西也越多。</li><li>垂直拆分后，还是单体模式-单体思维</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/SplitVertically.png" alt="SplitVertically"></p><h3 id="分布式服务—微服务架构"><a href="#分布式服务—微服务架构" class="headerlink" title="分布式服务—微服务架构"></a>分布式服务—微服务架构</h3><ul><li>一系列服务组装成系统</li><li>独立部署，独立运行</li><li>独立开发和维护</li><li>分布式管理</li><li>强调隔离性</li></ul><p>单体时，是调用方法 BLL—DAL；分布式，是调用服务；<br>随着分布式技术的成熟，设计系统架构时就以服务分拆为手段，这种风格就是微服务架构。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/MicroService.png" alt="MicroService"></p><p><strong>微服务架构（Microservice Architecture）是一种架构概念，旨在通过将功能分解到各个离散的服务中以实现对解决方案的解耦。</strong></p><ul><li><strong>概念</strong>：把一个大型的单个应用程序和服务拆分为数个甚至数十个的支持微服务，它可扩展单个组件而不是整个的应用程序堆栈，从而满足服务等级协议。</li><li><strong>定义</strong>：围绕业务领域组件来创建应用，这些应用可独立地进行开发、管理和迭代。在分散的组件中使用云架构和平台式部署、管理和服务功能，使产品交付变得更加简单。</li><li><strong>本质</strong>：用一些功能比较明确、业务比较精练的服务去解决更大、更实际的问题。</li></ul><h3 id="SOA面向服务架构"><a href="#SOA面向服务架构" class="headerlink" title="SOA面向服务架构"></a>SOA面向服务架构</h3><p><strong>SOA（Service-OrientedArchitecture）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和协议联系起来。</strong></p><p>接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构件在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。信息孤岛—数据总线，SOA把服务集成，定好规范，做重构。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/SOA.png" alt="SOA"></p><h3 id="SOA-vs-Micro-Service"><a href="#SOA-vs-Micro-Service" class="headerlink" title="SOA vs Micro Service"></a>SOA vs Micro Service</h3><ol><li>SOA是为重用，微服务架构是为了重写（SOA是为了整合原有服务，微服务通常是重写，独立部署，独立维护）</li><li>SOA更水平，微服务是垂直的（SOA: 业务逻辑层-数据访问层-横向的,微服务是垂直的—是一个具体功能点-从上往下）</li><li>SOA自上而下，微服务自下而上</li></ol><h2 id="3-践行微服务"><a href="#3-践行微服务" class="headerlink" title="3. 践行微服务"></a>3. 践行微服务</h2><h3 id="服务通信1"><a href="#服务通信1" class="headerlink" title="服务通信1"></a>服务通信1</h3><p>Redis/DB/Queue/硬盘文件</p><ol><li>被动式通信</li><li>门槛低</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Communication1.png" alt=""></p><h3 id="服务通信2"><a href="#服务通信2" class="headerlink" title="服务通信2"></a>服务通信2</h3><p>WebService/WCF/WebApi/甚至ashx，aspx</p><ol><li>主动触发</li><li>数据序列化传递</li><li>跨平台</li><li>跨语言</li><li>http穿透防火墙</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Communication2.png" alt=""></p><h3 id="服务通信3"><a href="#服务通信3" class="headerlink" title="服务通信3"></a>服务通信3</h3><p>RPC-Remote Procedure Call</p><ul><li>.Net Remoting：.Net平台独有的，不支持跨平台</li><li>gRPC：高性能、开源和通用的 RPC 框架，面向服务端和移动端，基于 HTTP/2 设计。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Communication3.png" alt=""></p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li>可以屏蔽服务实例细节</li><li>单纯是负载均衡</li><li>被动获取实例，有变化是不知道<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Nginx.jpg" alt=""></li></ul><h3 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Consul.png" alt=""></p><ol><li>负载均衡</li><li>服务注册与发现</li><li>健康检查</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Register.png" alt=""></p><blockquote><p><a href="https://www.consul.io/" target="_blank" rel="noopener">https://www.consul.io/</a>  官网</p></blockquote><p><strong>命令行启动：</strong></p><ul><li><strong>consul_1.6.2.exe agent –dev</strong></li></ul><p><a href="http://localhost:8500/" target="_blank" rel="noopener">浏览器访问：</a><a href="http://localhost:8500/" target="_blank" rel="noopener"></a><br><a href="http://localhost:8500/" target="_blank" rel="noopener">http://localhost:8500</a></p><p><strong>实例：</strong>建立一个webDemo和一个API项目，demo里面调用API，但是这个API是多个实例的，用consul来做注册于发现。</p><ul><li>Step1: 启动consul, <code>consul_1.6.2.exe agent –dev</code></li><li>Step2: 改造API， 用命令启动API： <code>dotnet WebApi.dll --urls="http://*:5726" --ip="127.0.0.1" --port=5726</code></li></ul><p>引入Consul的Nuget包，在API注册的地方可以这么写，注册只需要一次，通常在configure组件管道时候注册：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ConsulRegist</span><span class="token punctuation">(</span><span class="token keyword">this</span> IConfiguration configuration<span class="token punctuation">)</span><span class="token punctuation">{</span>  ConsulClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsulClient</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    c<span class="token punctuation">.</span>Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8500/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span>Datacenter <span class="token operator">=</span> <span class="token string">"dc1"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">string</span> ip <span class="token operator">=</span> configuration<span class="token punctuation">[</span><span class="token string">"ip"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>configuration<span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//命令行参数必须传入</span>  <span class="token comment" spellcheck="true">//int weight = string.IsNullOrWhiteSpace(configuration["weight"]) ? 1 : int.Parse(configuration["weight"]);//命令行参数必须传入</span>  client<span class="token punctuation">.</span>Agent<span class="token punctuation">.</span><span class="token function">ServiceRegister</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AgentServiceRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ID <span class="token operator">=</span> <span class="token string">"service"</span> <span class="token operator">+</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//唯一的</span>    Name <span class="token operator">=</span> <span class="token string">"UserService"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//组名称-Group</span>    Address <span class="token operator">=</span> ip<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//其实应该写ip地址</span>    Port <span class="token operator">=</span> port<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不同实例</span>    <span class="token comment" spellcheck="true">//Tags = new string[] { weight.ToString() },//标签</span>    Check <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AgentServiceCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置心跳检查的</span>    <span class="token punctuation">{</span>      Interval <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      HTTP <span class="token operator">=</span> $<span class="token string">"http://{ip}:{port}/Api/Health/Index"</span><span class="token punctuation">,</span>      Timeout <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      DeregisterCriticalServiceAfter <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"http://{ip}:{port}完成注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HealthCheck的实现是依赖于<code>/Api/Health/Index</code>这个方法，我们在API中去实现这个方法，直接返回OK就可以。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"api/[controller]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ApiController<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HealthController</span> <span class="token punctuation">:</span> ControllerBase<span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> ILogger<span class="token operator">&lt;</span>HealthController<span class="token operator">></span> _logger<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> IConfiguration _iConfiguration<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">HealthController</span><span class="token punctuation">(</span>ILogger<span class="token operator">&lt;</span>HealthController<span class="token operator">></span> logger<span class="token punctuation">,</span> IConfiguration configuration<span class="token punctuation">)</span><span class="token punctuation">{</span>_logger <span class="token operator">=</span> logger<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_iConfiguration <span class="token operator">=</span> configuration<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"Index"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//拼接到控制器上的route</span><span class="token keyword">public</span> IActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span>$<span class="token string">"This is HealthController {this._iConfiguration["</span>Port<span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HttpStatusCode--200</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Step3: 客户端demo通过consul调用API实例的方法</li></ul><p>引入Consul的Nuget包，然后去<strong>发现</strong>已经向Consul注册了的API，实现如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token punctuation">(</span>ConsulClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsulClient</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  c<span class="token punctuation">.</span>Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8500/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  c<span class="token punctuation">.</span>Datacenter <span class="token operator">=</span> <span class="token string">"dc1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> kvPair <span class="token operator">=</span> client<span class="token punctuation">.</span>KV<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"zcq"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>kvPair<span class="token punctuation">.</span>Response <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> kvPair<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token operator">=</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>kvPair<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> kvPair<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">DeserializeObject</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> dictionary <span class="token operator">=</span> client<span class="token punctuation">.</span>Agent<span class="token punctuation">.</span><span class="token function">Services</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">.</span>Response<span class="token punctuation">;</span>  <span class="token keyword">string</span> message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> keyValuePair <span class="token keyword">in</span> dictionary<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    AgentService agentService <span class="token operator">=</span> keyValuePair<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span>$<span class="token string">"{agentService.Address}:{agentService.Port} {agentService.ID} {agentService.Service}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找的是全部服务 全部实例  其实可以通过ServiceName筛选</span>    message <span class="token operator">+</span><span class="token operator">=</span> $<span class="token string">"{agentService.Address}:{agentService.Port};"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//获取当前consul的全部服务</span>  <span class="token keyword">base</span><span class="token punctuation">.</span>ViewBag<span class="token punctuation">.</span>Message <span class="token operator">=</span> message<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是调用其中一个API实例：<br>获取到一个KeyValuePair类型的List,然后根据不同的负载均衡策略去取实例：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Step1 获取所有列表</span><span class="token keyword">var</span> dictionary <span class="token operator">=</span> client<span class="token punctuation">.</span>Agent<span class="token punctuation">.</span><span class="token function">Services</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">.</span>Response<span class="token punctuation">;</span><span class="token keyword">var</span> list <span class="token operator">=</span> dictionary<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token operator">></span> k<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Service<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>groupName<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取consul上全部对应服务实例</span>KeyValuePair<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AgentService<span class="token operator">></span> keyValuePair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyValuePair</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AgentService<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Step2 负载均衡策略</span><span class="token punctuation">{</span>  keyValuePair <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接拿的第一个</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> iSeed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没考虑溢出问题</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//随机策略---平均策略</span>  keyValuePair <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span>iSeed<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//轮询策略---平均策略</span>  keyValuePair <span class="token operator">=</span> array<span class="token punctuation">[</span>iSeed<span class="token operator">++</span> <span class="token operator">%</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//权重---注册服务时指定权重，分配时获取权重并以此为依据</span>  <span class="token comment" spellcheck="true">//通过Tags来实现</span>  List<span class="token operator">&lt;</span>KeyValuePair<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AgentService<span class="token operator">></span><span class="token operator">></span> pairsList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>KeyValuePair<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AgentService<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> pair <span class="token keyword">in</span> list<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Tags<span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      pairsList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  keyValuePair <span class="token operator">=</span> pairsList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span>iSeed<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pairsList<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Step3 根据获取到的实例地址 来访问API</span>resultUrl <span class="token operator">=</span> $<span class="token string">"{uri.Scheme}://{keyValuePair.Value.Address}:{keyValuePair.Value.Port}{uri.PathAndQuery}"</span><span class="token punctuation">;</span><span class="token keyword">string</span> result <span class="token operator">=</span> WebApiHelperExtend<span class="token punctuation">.</span><span class="token function">InvokeApi</span><span class="token punctuation">(</span>resultUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>userList <span class="token operator">=</span> Newtonsoft<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>JsonConvert<span class="token punctuation">.</span>DeserializeObject<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Users<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h3><p><strong>为什么需要网关？</strong><br>有了Consul，使用服务名即可访问。但手机、web端等外部访问者仍然需要和N多服务器交互，需要记忆他们的服务器地址、端口号等。一旦内部发生修改，很麻烦，而且有时候内部服务器是不希望外界直接访问的—需要路由功能！</p><ul><li>客户端该如何访问服务？这么多服务地址。</li><li>单个服务下线/升级/更新</li><li>Authentication/ Authorization</li></ul><p><strong>好处：</strong></p><ol><li>各个业务系统轻松独立维护服务器；</li><li>复用权限校验；</li><li>限流、熔断、降级、收费等</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Gateway.png" alt=""><br><strong>Gateway:</strong></p><ol><li>提供统一服务入口，让微服务对前台透明</li><li>聚合后台的服务，节省流量，提升性能</li><li>提供安全，过滤，流控等API管理功能</li></ol><p><strong>Ocelot</strong><br>Ocelot就是一个提供了请求路由、安全验证等功能的API网关微服务</p><p><strong>搭建网关Gateway</strong></p><ul><li>Step1: 新建一个API的项目，充当网关。引用Nuget包: <strong>Ocelot</strong>  和<strong>Ocelot.Provider.Consul</strong>和<strong>Ocelot.Provide.Polly</strong>这三个。</li><li>Step2: 构建管道，只有Ocelot管道，其他都不要。</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>  services<span class="token punctuation">.</span><span class="token function">AddOcelot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddConsul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddPolly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>  app<span class="token punctuation">.</span><span class="token function">UseOcelot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Step3: 添加配置文件, 在start中引用oelot的定制配置文件，</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"configuration.json"</span><span class="token punctuation">,</span> optional<span class="token punctuation">:</span>  <span class="token keyword">false</span><span class="token punctuation">,</span>     reloadOnChange<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">{</span>        webBuilder<span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ocelot的配置文件可以根据不同的情况进行配置：</p><h4 id="情况一：-单地址"><a href="#情况一：-单地址" class="headerlink" title="情况一： 单地址"></a>情况一： 单地址</h4><p>解读一下这个配置文件，上游有任何到<code>/T5726/{url}</code>这个地址的请求，都会被Ocelot进行待请求到<code>localhost:5726//api/{url}</code>这个地址上去，这里不是转发，其实是代请求。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ReRoutes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"DownstreamPathTemplate"</span><span class="token operator">:</span> <span class="token string">"/api/{url}"</span><span class="token punctuation">,</span> //服务地址--url变量      <span class="token property">"DownstreamScheme"</span><span class="token operator">:</span> <span class="token string">"http"</span><span class="token punctuation">,</span>      <span class="token property">"DownstreamHostAndPorts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"Host"</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>          <span class="token property">"Port"</span><span class="token operator">:</span> <span class="token number">5726</span> //服务端口        <span class="token punctuation">}</span> //可以多个，自行负载均衡      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"UpstreamPathTemplate"</span><span class="token operator">:</span> <span class="token string">"/T5726/{url}"</span><span class="token punctuation">,</span> //网关地址--url变量   //冲突的还可以加权重Priority      <span class="token property">"UpstreamHttpMethod"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"Get"</span><span class="token punctuation">,</span> <span class="token string">"Post"</span> <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="情况二：-多地址多实例"><a href="#情况二：-多地址多实例" class="headerlink" title="情况二： 多地址多实例"></a>情况二： 多地址多实例</h4><p>其实是对情况一的拓展，现在支持多种上游路径的代请求了，例如<code>/T5726/{url}</code>和<code>/T5727/{url}</code>和<code>/T5728/{url}</code></p><pre><code>{  "ReRoutes": [    {      "DownstreamPathTemplate": "/api/{url}", //服务地址--url变量      "DownstreamScheme": "http",      "DownstreamHostAndPorts": [        {          "Host": "localhost",          "Port": 5726 //服务端口        } //可以多个，自行负载均衡      ],      "UpstreamPathTemplate": "/T5726/{url}", //网关地址--url变量   //冲突的还可以加权重Priority      "UpstreamHttpMethod": [ "Get", "Post" ]    },    {      "DownstreamPathTemplate": "/api/{url}", //服务地址--url变量      "DownstreamScheme": "http",      "DownstreamHostAndPorts": [        {          "Host": "localhost",          "Port": 5727 //服务端口        }      ],      "UpstreamPathTemplate": "/T5727/{url}", //网关地址--url变量      "UpstreamHttpMethod": [ "Get", "Post" ]    },        {      "DownstreamPathTemplate": "/api/{url}", //服务地址--url变量      "DownstreamScheme": "http",      "DownstreamHostAndPorts": [        {          "Host": "localhost",          "Port": 5728 //服务端口        }      ],      "UpstreamPathTemplate": "/T5728/{url}", //网关地址--url变量      "UpstreamHttpMethod": [ "Get", "Post" ]    }  ]}</code></pre><h4 id="情况三：-单地址多实例负载均衡（没有结合consul）"><a href="#情况三：-单地址多实例负载均衡（没有结合consul）" class="headerlink" title="情况三： 单地址多实例负载均衡（没有结合consul）"></a>情况三： 单地址多实例负载均衡（没有结合consul）</h4><p>配置多个下游的Host和Port，做负载均衡。这并没有结合服务注册与发现，不便于排查，维保。</p><pre><code>{  "ReRoutes": [    {      "DownstreamPathTemplate": "/api/{url}", //服务地址--url变量      "DownstreamScheme": "http",      "DownstreamHostAndPorts": [        {          "Host": "localhost",          "Port": 5726 //服务端口        } //可以多个，自行负载均衡        ,        {          "Host": "localhost",          "Port": 5727 //服务端口        },        {          "Host": "localhost",          "Port": 5728 //服务端口        }      ],      "UpstreamPathTemplate": "/T5/{url}", //网关地址--url变量   //冲突的还可以加权重Priority      "UpstreamHttpMethod": [ "Get", "Post" ],      "LoadBalancerOptions": {        "Type": "RoundRobin" //轮询      LeastConnection-最少连接数的服务器   NoLoadBalance不负载均衡      }    }  ]}</code></pre><h4 id="情况三：-单地址多实例负载均衡（结合consul）"><a href="#情况三：-单地址多实例负载均衡（结合consul）" class="headerlink" title="情况三： 单地址多实例负载均衡（结合consul）"></a>情况三： 单地址多实例负载均衡（结合consul）</h4><p>首先，如果访问<code>/TConsul/{url}</code>, 那么就代请求去到<code>/api/{url}</code>,但是这个时候呢，没有写死API服务实例，而是通过consul来查找一个实例，完成请求。需要提供ServiceName来获取服务列表，会用到Ocelot.Provider.Consul这个包。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>  services<span class="token punctuation">.</span><span class="token function">AddOcelot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddConsul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{  "ReRoutes": [    {      "DownstreamPathTemplate": "/api/{url}", //服务地址--url变量      "DownstreamScheme": "http",      "UpstreamPathTemplate": "/TConsul/{url}", //网关地址--url变量      "UpstreamHttpMethod": [ "Get", "Post" ],      "ServiceName": "UserService", //consul服务名称      "LoadBalancerOptions": {        "Type": "RoundRobin" //轮询      LeastConnection-最少连接数的服务器   NoLoadBalance不负载均衡      },      "UseServiceDiscovery": true    }  ],  "GlobalConfiguration": {    "BaseUrl": "http://127.0.0.1:6299", //网关对外地址    "ServiceDiscoveryProvider": {      "Host": "localhost",      "Port": 8500,      "Type": "Consul" //由Consul提供服务发现    }  }}</code></pre><p><strong>Ocelot：</strong>实现了客户端和服务实例的隔绝—保护—节约IP—提高效率，Consul—完成了集群管理，发现—健康检查—下线。</p><ol><li>路由—核心功能</li><li>集群负载均衡</li></ol><p>假如不是微服务，那么以前就是要具体发哦方法；现在微服务之后，就是靠记录地址。<br>服务实例也不会暴露，某个服务实例下线了，能自动屏蔽。<br>Gateway还能缓存，可能很多服务都需要用户服务的数据，那么在gateway级别就可以做缓存，下面会涉及。</p><h3 id="Polly"><a href="#Polly" class="headerlink" title="Polly"></a>Polly</h3><p>Polly是一种.NET弹性和瞬态故障处理库，允许我们以非常顺畅和线程安全的方式来执诸如行重试，断路，超时，故障恢复等策略。</p><h4 id="情况四：-单地址多实例负载均衡-Consul-Polly"><a href="#情况四：-单地址多实例负载均衡-Consul-Polly" class="headerlink" title="情况四： 单地址多实例负载均衡+Consul+Polly"></a>情况四： 单地址多实例负载均衡+Consul+Polly</h4><p>可以接着上面的实践，继续配置一下Startup,改一下Ocelot的配置文件即可。这里会用到Nuget包<code>Ocelot.Provide.Polly</code>。</p><pre class="line-numbers language-csharp"><code class="language-csharp">```csharp<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>  services<span class="token punctuation">.</span><span class="token function">AddOcelot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddConsul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddPolly<span class="token punctuation">;</span>  services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解读一下配置文件：</p><ul><li><code>FileCacheOptions</code>这个是配置缓存，10秒的缓存，可以减少服务实例的压力。</li><li><code>RateLimitOptions</code>这个是限流配置，限制单位时间内的访问量（失败一部分比垮掉强），限流的时候通过<code>RateLimitOptions</code>这个返回自定义状态码和消息。5min之内只允许访问五次，但是触发限流5秒之后可以继续访问，不是绝对的。</li><li><code>QoSOptions</code>这个是熔断，类似于保险丝，单位时间内多次失败，就直接不请求。会检测Exception发生的次数。</li></ul><pre><code>{  "ReRoutes": [    {      "DownstreamPathTemplate": "/api/{url}", //服务地址--url变量      "DownstreamScheme": "http",      "UpstreamPathTemplate": "/consul/{url}", //网关地址--url变量      "UpstreamHttpMethod": [ "Get", "Post" ],      "ServiceName": "ZhaoxiUserService", //consul服务名称      "LoadBalancerOptions": {        "Type": "RoundRobin" //轮询      LeastConnection-最少连接数的服务器   NoLoadBalance不负载均衡      },      "UseServiceDiscovery": true,      "QoSOptions": {        "ExceptionsAllowedBeforeBreaking": 3, //允许多少个异常请求        "DurationOfBreak": 10000, // 熔断的时间，单位为ms        "TimeoutValue": 10000 //如果下游请求的处理时间超过多少则自如将请求设置为超时 默认90秒      }      //"RateLimitOptions": {      //  "ClientWhitelist": [], //白名单      //  "EnableRateLimiting": true,      //  "Period": "5m", //1s, 5m, 1h, 1d  jeffzhang      //  "PeriodTimespan": 5, //多少秒之后客户端可以重试      //  "Limit": 5 //统计时间段内允许的最大请求数量      //},      //"FileCacheOptions": {      //  "TtlSeconds": 10      //} //"缓存"    }  ],  "GlobalConfiguration": {    "BaseUrl": "http://127.0.0.1:6299", //网关对外地址    "ServiceDiscoveryProvider": {      "Host": "localhost",      "Port": 8500,      "Type": "Consul" //由Consul提供服务发现    },    //"RateLimitOptions": {    //  "QuotaExceededMessage": "Too many requests, maybe later? 11", // 当请求过载被截断时返回的消息    //  "HttpStatusCode": 666 // 当请求过载被截断时返回的http status    //}  }}</code></pre><h3 id="鉴权-amp-授权"><a href="#鉴权-amp-授权" class="headerlink" title="鉴权&amp;授权"></a>鉴权&amp;授权</h3><h4 id="传统的用户识别"><a href="#传统的用户识别" class="headerlink" title="传统的用户识别"></a>传统的用户识别</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/session.jpg" alt=""></p><ul><li>基于cookie-session</li><li>是把用户信息保存在服务器，每次请求带上标识匹配资源</li><li>没有分布式架构，无法支持横向扩展。</li></ul><h4 id="基于token的安全验证体系。"><a href="#基于token的安全验证体系。" class="headerlink" title="基于token的安全验证体系。"></a>基于token的安全验证体系。</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Id4.png" alt=""><br><strong>鉴权授权：</strong></p><ul><li>鉴权中心—根据账号密码颁发token</li><li>带着Token就可以访问API，API认可token，不需要去鉴权中心校验</li><li>第三方API也认可Token</li><li>SSO： Single Sign On</li><li>防止抵赖-防止篡改-信息传递</li></ul><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><p><strong>JWT:</strong><br>官网：<a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p><ol><li><strong>授权：</strong>这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，允许用户访问该令牌允许的路由，服务和资源。Single Sign On是一种现在广泛使用JWT的功能，因为它的开销很小，并且能够在不同的域中轻松使用。</li><li><strong>信息交换：</strong>JSON Web令牌是在各方之间安全传输信息的好方法。因为JWT可以签名 - 例如，使用公钥/私钥对 - 您可以确定发件人是他们所说的人。此外，由于使用标头和有效负载计算签名，您还可以验证内容是否未被篡改。</li></ol><p><strong>JWT令牌结构</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/JWTStructure.png" alt="JWTStructure"></p><ol><li><strong>Header</strong>　头</li></ol><p>{ “alg”: “HS256”, “typ”: “JWT”}</p><ol start="2"><li><strong>Payload</strong>　有效载荷</li></ol><p>JWT 默认是不加密的，任何人都可以读到</p><ol start="3"><li><strong>Signature</strong>　签名–防止抵赖-防止篡改</li></ol><p>=HMACSHA256( base64UrlEncode(header) + “.” + base64UrlEncode(payload), secret)<br>xxxxx.yyyyy.zzzzz<br>私钥加密，只有对应的公钥才能解密</p><p>*<em>JWT令牌示例  *</em><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/JWTExample.png" alt=""></p><p><strong>JWT实例</strong></p><ul><li>Step1: 首先改造一下API，给API加上身份认证。需要加上<code>[Microsoft.AspNetCore.Authorization.Authorize]</code> 这个特性，并在管道里面配置 <code>Authentication</code>的中间件。</li></ul><p><strong>身份认证特性标签:</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"api/[controller]/[action]"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ApiController<span class="token punctuation">]</span><span class="token punctuation">[</span>Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorize<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsersNewController</span> <span class="token punctuation">:</span> ControllerBase<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// GET api/Users</span>  <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>  <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> _userList<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// GET api/Users/5</span>  <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>  <span class="token punctuation">[</span>Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>AllowAnonymous<span class="token punctuation">]</span>  <span class="token keyword">public</span> Users <span class="token function">GetUserByID</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//允许跨域</span>    <span class="token comment" spellcheck="true">//throw new Exception("1234567");</span>    <span class="token keyword">string</span> idParam <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> user <span class="token operator">=</span> _userList<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>users <span class="token operator">=</span><span class="token operator">></span> users<span class="token punctuation">.</span>UserID <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponseException</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置管道，注意一下身份认证管道的顺序。</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token preprocessor property">#<span class="token directive keyword">region</span> jwt校验</span>  services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    options<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenValidationParameters</span>    <span class="token punctuation">{</span>      ValidateIssuer <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证Issuer</span>      ValidateAudience <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证Audience</span>      ValidateLifetime <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证失效时间</span>      ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否验证SecurityKey</span>      ValidAudience <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">"audience"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Audience</span>      ValidIssuer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">"issuer"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Issuer，这两项和前面签发jwt的设置一致</span>      IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">"SecurityKey"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//拿到SecurityKey</span>      <span class="token comment" spellcheck="true">//AudienceValidator = (m, n, z) =></span>      <span class="token comment" spellcheck="true">//{</span>        <span class="token comment" spellcheck="true">//    return m != null &amp;&amp; m.FirstOrDefault().Equals(this.Configuration["audience"]);</span>      <span class="token comment" spellcheck="true">//},//自定义校验规则，可以新登录后将之前的无效</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span><span class="token punctuation">{</span>  app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token preprocessor property">#<span class="token directive keyword">region</span> jwt</span>  app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意添加这一句，启用验证 身份认证</span>  <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>  app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">"ip"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//实例启动时执行，且只执行一次</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">ConsulRegist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其中的配置文件参考示例如下：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token string">"audience"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:5726"</span><span class="token punctuation">,</span><span class="token string">"issuer"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:5726"</span><span class="token punctuation">,</span><span class="token string">"SecurityKey"</span><span class="token punctuation">:</span> <span class="token string">"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDI2a2EJ7m872v0afyoSDJT2o1+SitIeJSWtLJU8/Wz2m7gStexajkeD+Lka6DSTy8gt9UwfgVQo6uKjVLG5Ex7PiGOODVqAEghBuS7JzIYU5RvI543nNDAPfnJsas96mSA7L/mD7RTE2drj6hf3oZjJpMPZUQI/B1Qjb5H3K3PNwIDAQAB"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Step2: 创建鉴权中心，再创建webAPI项目，专门用于产生token。登录时访问认证中心的login方法，来产生一个token.</li></ul><p><strong>颁发token的API：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"LoginName"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//应该数据库</span>  <span class="token punctuation">{</span>    <span class="token keyword">string</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_iJWTService<span class="token punctuation">.</span><span class="token function">GetToken</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      token    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span>    <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      token <span class="token operator">=</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体产生token的服务：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IJWTService</span><span class="token punctuation">{</span>  <span class="token keyword">string</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token keyword">string</span> UserName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTService</span> <span class="token punctuation">:</span> IJWTService<span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">readonly</span> IConfiguration _configuration<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">JWTService</span><span class="token punctuation">(</span>IConfiguration configuration<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    _configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token keyword">string</span> UserName<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> claims <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> UserName<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"NickName"</span><span class="token punctuation">,</span><span class="token string">"zhengchaoqiang"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"Role"</span><span class="token punctuation">,</span><span class="token string">"Administrator"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//传递其他信息  </span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>_configuration<span class="token punctuation">[</span><span class="token string">"SecurityKey"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> creds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SigningCredentials</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>HmacSha256<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityToken</span><span class="token punctuation">(</span>    issuer<span class="token punctuation">:</span> _configuration<span class="token punctuation">[</span><span class="token string">"issuer"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    audience<span class="token punctuation">:</span> _configuration<span class="token punctuation">[</span><span class="token string">"audience"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    claims<span class="token punctuation">:</span> claims<span class="token punctuation">,</span>    expires<span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//5分钟有效期</span>    signingCredentials<span class="token punctuation">:</span> creds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> returnToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtSecurityTokenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> returnToken<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其中配置文件信息如下：</strong></p><pre class="line-numbers language-chsarp"><code class="language-chsarp">"AllowedHosts": "*","audience": "http://localhost:5726","issuer": "http://localhost:5726","SecurityKey": "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDI2a2EJ7m872v0afyoSDJT2o1+SitIeJSWtLJU8/Wz2m7gStexajkeD+Lka6DSTy8gt9UwfgVQo6uKjVLG5Ex7PiGOODVqAEghBuS7JzIYU5RvI543nNDAPfnJsas96mSA7L/mD7RTE2drj6hf3oZjJpMPZUQI/B1Qjb5H3K3PNwIDAQAB"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>Claims (Payload)<br>  Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段，除了规定的字段外，可以包含其他任何 JSON 兼容的字段。</li></ol><pre><code>iss: The issuer of the token，token 是给谁的sub: The subject of the token，token 主题exp: Expiration Time。 token 过期时间，Unix 时间戳格式iat: Issued At。 token 创建时间， Unix 时间戳格式jti: JWT ID。针对当前 token 的唯一标识</code></pre><ol start="2"><li>代码演示的是对称加密，所以只有一个key，在返回的信息里面是没有的。非对称的加密的话，那样是把解密key公开的，前面是后台用私钥加密的。可以保证别人解密后，拿到的数据，跟前面2部分hash后的结果一致，保证没有篡改。</li></ol><ul><li><p>Step3: 客户端将token放入请求的头里面，这样可以请求API了，不会有401错误了。<br>在API端接收客户端的请求时，可以拿到这些Claim信息的，在context中。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>Users<span class="token operator">></span> <span class="token function">GetUserByName</span><span class="token punctuation">(</span><span class="token keyword">string</span> userName<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> nickName <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"NickName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"This is GetUserByName 校验 {nickName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> role <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"This is role 校验 {role}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> userNameParam <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">[</span><span class="token string">"userName"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> _userList<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>UserName<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>关于Identity Server的详细解析，后面计划专门来写一写。这里仅仅对JWT做了一些解析。</p></blockquote><h3 id="分布式事务-CAP定理"><a href="#分布式事务-CAP定理" class="headerlink" title="分布式事务-CAP定理"></a>分布式事务-CAP定理</h3><ul><li>Consistency 一致性</li><li>Availability 可用性</li><li>Partition tolerance 分区容错</li></ul><p>分布式系统下，网络出错是必然存在的—也就是不可靠的。<br>在分区容错一定出现的情况，C和A是不能同时满足的。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/CAP.jpg" alt=""></p><h4 id="强一致性——2PC"><a href="#强一致性——2PC" class="headerlink" title="强一致性——2PC"></a>强一致性——2PC</h4><p>2PC(two-phase commit protocol)<br>强一致性，但是没有可用性。<br>这种方式在分布式系统靠谱吗？微服务时能靠谱吗？多个节点，这样卡顿，是无法可用的。<br>0.99 来个10个节点。<br>只是解决小范围，或者强制要求一致性。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Consistant.png" alt=""></p><p>*<em>CA *</em><br>其实就是单体应用，可以保证一致性和可用性。</p><h4 id="Base理论："><a href="#Base理论：" class="headerlink" title="Base理论："></a><strong>Base理论：</strong></h4><ol><li>Basically Available(基本可用)</li><li>（最终一致性）来回确认</li><li>Soft state（软状态）</li><li>Eventually consistent</li></ol><p>微服务架构里面，可用性是最重要的；<br>思想是最重要，指引方向；</p><h4 id="TCC-Try-Confirm-Cancel"><a href="#TCC-Try-Confirm-Cancel" class="headerlink" title="TCC(Try-Confirm-Cancel)"></a>TCC(Try-Confirm-Cancel)</h4><p>把一个动作分成三步，保证最终一致性。放新数据之前会先把旧的数据备份好。<br>编程量很大，数据稳定，银行和政府部门会用这种。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/TCC.png" alt=""></p><h4 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h4><p>MQ分布式事务–本地消息表–基于消息的一致性。这种方式比较常用，尤其是互联网行业。</p><ol><li>上游投递消息</li><li>下游获取消息</li><li>上游投递稳定性</li><li>下游接受稳定性</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/MQ.png" alt=""></p><h4 id="Saga"><a href="#Saga" class="headerlink" title="Saga"></a>Saga</h4><p>来自于华为，拆分成小事务。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/12MicroServices/Saga.png" alt=""></p><h3 id="分布式追踪"><a href="#分布式追踪" class="headerlink" title="分布式追踪"></a>分布式追踪</h3><p>分布式追踪和APM的Server端，它将包含Collector，Storage，独立的Web UI，并使用Open Tracing规范来设计追踪数据。<br><strong>Skywalking</strong><br>例如：业务延迟很大，怎么定位问题？</p><h3 id="日志收集分析"><a href="#日志收集分析" class="headerlink" title="日志收集分析"></a>日志收集分析</h3><p><strong>Exceptionless：</strong>开源的日志收集和分析框架，能为应用程序提供实时错误、特性和日志报告。</p><h3 id="配置忠心"><a href="#配置忠心" class="headerlink" title="配置忠心"></a>配置忠心</h3><p><strong>Apollo配置中心：</strong><br>微服务架构环境中，项目中配置文件比较繁杂，而且不同环境的不同配置修改相对频繁，每次发布都需要对应修改配置，如果配置出现错误，需要重新打包发布，时间成本较高，<br>因此需要做统一的配置中心，能做到自动更新配置文件信息</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>容器化快速部署。</p><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><p>容器编排。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> .Net Core Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
            <tag> MicroService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (11)</title>
      <link href="/2020/03/14/typescript-learning-series-11/"/>
      <url>/2020/03/14/typescript-learning-series-11/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器:装饰器是一种特殊类型的声明，它能够被附加到类声明，方法，属性或参数上，可以修改类的行为。<br>通俗的讲装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。<br>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器<br>装饰器的写法：普通装饰器（无法传参） 、 装饰器工厂（可传参）<br>装饰器是过去几年中js最大的成就之一，已是Es7的标准特性之一</p><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>类装饰器：类装饰器在类声明之前被声明（紧靠着类声明）。 类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。 传入一个参数</p><h4 id="1-1-类装饰器-普通装饰器（无法传参）"><a href="#1-1-类装饰器-普通装饰器（无法传参）" class="headerlink" title="1.1 类装饰器:普通装饰器（无法传参）"></a>1.1 类装饰器:普通装饰器（无法传参）</h4><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// params 就是当前类</span>  params<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apiUrl<span class="token operator">=</span><span class="token string">'动态扩展的属性'</span><span class="token punctuation">;</span>  params<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是一个run方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>@logClass<span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> http<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-类装饰器-装饰器工厂（可传参）"><a href="#1-2-类装饰器-装饰器工厂（可传参）" class="headerlink" title="1.2 类装饰器:装饰器工厂（可传参）"></a>1.2 类装饰器:装饰器工厂（可传参）</h4><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apiUrl<span class="token operator">=</span>params<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token function">logClass</span><span class="token punctuation">(</span><span class="token string">'http://www.itying.com/api'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> http<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-类装饰器"><a href="#1-类装饰器" class="headerlink" title="1.类装饰器"></a>1.类装饰器</h3><p>下面是一个重载构造函数的例子。<br>类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数。<br>如果类装饰器返回一个值，它会使用提供的构造函数来替换类的声明。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> target<span class="token punctuation">{</span>  apiUrl<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token operator">=</span><span class="token string">'我是修改后的数据'</span><span class="token punctuation">;</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token operator">+</span><span class="token string">'----'</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>@logClass<span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> apiUrl<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token operator">=</span><span class="token string">'我是构造函数里面的apiUrl'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> http<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-属性装饰器"><a href="#2-属性装饰器" class="headerlink" title="2.属性装饰器"></a>2.属性装饰器</h3><p>属性装饰器表达式会在运行时当作函数被调用，传入下列2个参数：<br>1.对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>2.成员的名字。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//类装饰器</span>    <span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(target);</span>            <span class="token comment" spellcheck="true">// console.log(params);       </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//属性装饰器</span><span class="token keyword">function</span> <span class="token function">logProperty</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attr<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类的原型对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性名称</span>    target<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">=</span>params<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token function">logClass</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>  @<span class="token function">logProperty</span><span class="token punctuation">(</span><span class="token string">'http://itying.com'</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> url<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">|</span>undefined<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> http<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-方法装饰器"><a href="#3-方法装饰器" class="headerlink" title="3.方法装饰器"></a>3.方法装饰器</h3><p>它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。<br>方法装饰会在运行时传入下列3个参数：</p><ol><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>成员的名字。</li><li>成员的属性描述符。</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//方法装饰器一</span><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>methodName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">.</span>apiUrl<span class="token operator">=</span><span class="token string">'xxxx'</span><span class="token punctuation">;</span>    target<span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">|</span>undefined<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  @<span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.itying,com'</span><span class="token punctuation">)</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> http<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//方法装饰器二  方法装饰器 可以修改方法 修改方法的参数</span><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>methodName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//修改装饰器的方法  把装饰器方法里面传入的所有参数改为string类型</span>    <span class="token comment" spellcheck="true">//1、保存当前的方法</span>    <span class="token keyword">var</span> oMethod<span class="token operator">=</span>desc<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    desc<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        args<span class="token operator">=</span>args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      oMethod<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">|</span>undefined<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  @<span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.itying,com'</span><span class="token punctuation">)</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是getData里面的方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> http<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-方法参数装饰器"><a href="#4-方法参数装饰器" class="headerlink" title="4.方法参数装饰器"></a>4.方法参数装饰器</h3><p>方法参数装饰器 用的不是特别多<br>参数装饰器表达式会在运行时当作函数被调用，可以使用参数装饰器为类的原型增加一些元素数据 ，传入下列3个参数：</p><ol><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>方法的名字。</li><li>参数在函数参数列表中的索引。</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">logParams</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>methodName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>paramsIndex<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paramsIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span>apiUrl<span class="token operator">=</span>params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">|</span>undefined<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>             <span class="token function">getData</span><span class="token punctuation">(</span>@<span class="token function">logParams</span><span class="token punctuation">(</span><span class="token string">'xxxxx'</span><span class="token punctuation">)</span> uuid<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> http<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> http<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="装饰器执行顺序"><a href="#装饰器执行顺序" class="headerlink" title="装饰器执行顺序"></a>装饰器执行顺序</h3><p><strong>属性》方法》方法参数》类</strong><br>如果有多个同样的装饰器，它会先执行后面的</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">logClass1</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'类装饰器1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logClass2</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'类装饰器2'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logAttribute1</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attrName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'属性装饰器1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logAttribute2</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attrName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'属性装饰器2'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logMethod1</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attrName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'方法装饰器1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logMethod2</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attrName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'方法装饰器2'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logParams1</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attrName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'方法参数装饰器1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logParams2</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attrName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'方法参数装饰器2'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token function">logClass1</span><span class="token punctuation">(</span><span class="token string">'http://www.itying.com/api'</span><span class="token punctuation">)</span>@<span class="token function">logClass2</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    @<span class="token function">logAttribute1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    @<span class="token function">logAttribute2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> apiUrl<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    @<span class="token function">logMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setData</span><span class="token punctuation">(</span>@<span class="token function">logParams1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> attr1<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>@<span class="token function">logParams2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> attr2<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> http<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (10)</title>
      <link href="/2020/03/14/typescript-learning-series-10/"/>
      <url>/2020/03/14/typescript-learning-series-10/</url>
      
        <content type="html"><![CDATA[<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p><strong>命名空间:</strong><br>在代码量较大的情况下，为了避免各种变量命名相冲突，可将相似功能的函数、类、接口等放置到命名空间内<br>同Java的包、.Net的命名空间一样，TypeScript的命名空间可以将代码包裹起来，只对外暴露需要在外部访问的对象。命名空间内的对象通过export关键字对外暴露。</p><p><strong>命名空间和模块的区别：</strong></p><ul><li>命名空间：内部模块，主要用于组织代码，避免命名冲突。</li><li>模    块：ts的外部模块的简称，侧重代码的复用，一个模块里可能会有多个命名空间。</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript">namespace A<span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 在吃狗粮。`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 吃猫粮。`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>namespace B<span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 在吃狗粮。`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 在吃猫粮。`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B<span class="token punctuation">.</span>Cat</span><span class="token punctuation">(</span><span class="token string">'小花'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (9)</title>
      <link href="/2020/03/14/typescript-learning-series-09/"/>
      <url>/2020/03/14/typescript-learning-series-09/</url>
      
        <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><strong>模块的的概念（官方）:</strong></p><ul><li>关于术语的一点说明: 请务必注意一点，TypeScript 1.5里术语名已经发生了变化。 “内部模块”现在称做“命名空间”。</li><li>“外部模块”现在则简称为“模块” 模块在其自身的作用域里执行，而不是在全局作用域里；</li><li>这意味着定义在一个模块里的变量，函数，类等等在模块外部是不可见的，除非你明确地使用export形式之一导出它们。 </li><li>相反，如果想使用其它模块导出的变量，函数，类，接口等的时候，你必须要导入它们，可以使用 import形式之一。</li></ul><p><strong>模块的概念（自己理解）：</strong></p><ul><li>我们可以把一些公共的功能单独抽离成一个文件作为一个模块。</li><li>模块里面的变量 函数 类等默认是私有的，如果我们要在外部访问模块里面的数据（变量、函数、类），</li><li>我们需要通过export暴露模块里面的数据（变量、函数、类…）。</li><li>暴露后我们通过 import 引入模块就可以使用模块里面暴露的数据（变量、函数、类…）。</li></ul><h3 id="Demo01"><a href="#Demo01" class="headerlink" title="Demo01"></a>Demo01</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> getData<span class="token punctuation">,</span>save <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./modules/db'</span><span class="token punctuation">;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> dbUrl<span class="token operator">=</span><span class="token string">'xxxxxx'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据库的数据111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'121312'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'121312'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存数据成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Demo02"><a href="#Demo02" class="headerlink" title="Demo02"></a>Demo02</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> dbUrl<span class="token punctuation">,</span>getData as <span class="token keyword">get</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./modules/db'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dbUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> dbUrl<span class="token operator">=</span><span class="token string">'xxxxxx'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据库的数据111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'121312'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'121312'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存数据成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>dbUrl<span class="token punctuation">,</span>getData<span class="token punctuation">,</span>save<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Demo03"><a href="#Demo03" class="headerlink" title="Demo03"></a>Demo03</h3><ul><li>export default    默认导出</li><li>每个模块都可以有一个default导出。 默认导出使用 default关键字标记；并且一个模块只能够有一个default导出。 需要使用一种特殊的导入形式来导入 default导出。</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> getData <span class="token keyword">from</span> <span class="token string">'./modules/db'</span><span class="token punctuation">;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> dbUrl<span class="token operator">=</span><span class="token string">'xxxxxx'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据库的数据111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'121312'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'121312'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存数据成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// export {getData};</span><span class="token keyword">export</span> <span class="token keyword">default</span> getData<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Demo04"><a href="#Demo04" class="headerlink" title="Demo04"></a>Demo04</h3><ul><li>功能：定义一个操作数据库的库  支持 Mysql Mssql  MongoDb</li><li>要求1：Mysql MsSql  MongoDb功能一样  都有 add  update  delete  get方法    </li><li>注意：约束统一的规范、以及代码重用</li><li>解决方案：需要约束规范所以要定义接口 ，需要代码重用所以用到泛型</li></ul><p>1.接口：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范<br>2.泛型: 通俗理解：泛型就是解决 类 接口 方法的复用性</p><p>操作用户表   定义一个User类和数据表做映射</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>MsSqlDb<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./modules/db'</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    password<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'张三2222'</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token keyword">var</span> oMssql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MsSqlDb</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oMssql<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">DBI</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">;</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个操作mysql数据库的类       注意：要实现泛型接口 这个类也应该是一个泛型类</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MysqlDb</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">DBI</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库建立连接'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">update</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> T<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> list<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">'xxxxxxxxxx'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">'xxxxxxxxxx'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个操作mssql数据库的类</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MsSqlDb</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">DBI</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库建立连接'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">update</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> T<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> list<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">'xxxxxxxxxx'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">'xxxxxxxxxx'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Demo05"><a href="#Demo05" class="headerlink" title="Demo05"></a>Demo05</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>UserClass<span class="token punctuation">,</span>UserModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./model/user'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>ArticleClass<span class="token punctuation">,</span>ArticleModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./model/article'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加数据</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token string">'12345655654757'</span><span class="token punctuation">;</span>UserModel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取user表数据</span><span class="token keyword">var</span> res<span class="token operator">=</span>UserModel<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取文章表的数据</span><span class="token keyword">var</span> aRes<span class="token operator">=</span>ArticleModel<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aRes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>model 01</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>MsSqlDb<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../modules/db'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义数据库的映射</span><span class="token keyword">class</span> <span class="token class-name">ArticleClass</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> ArticleModel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MsSqlDb</span><span class="token operator">&lt;</span>ArticleClass<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    ArticleClass<span class="token punctuation">,</span>ArticleModel<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>model 02</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>MsSqlDb<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../modules/db'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义数据库的映射</span><span class="token keyword">class</span> <span class="token class-name">UserClass</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    password<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> UserModel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MsSqlDb</span><span class="token operator">&lt;</span>UserClass<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    UserClass<span class="token punctuation">,</span>UserModel<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Module</li></ul><pre class="line-numbers language-typescripts"><code class="language-typescripts">interface DBI<T>{    add(info:T):boolean;    update(info:T,id:number):boolean;    delete(id:number):boolean;    get(id:number):any[];}//定义一个操作mysql数据库的类       注意：要实现泛型接口 这个类也应该是一个泛型类export class MysqlDb<T> implements DBI<T>{    constructor(){        console.log('数据库建立连接');    }    add(info: T): boolean {        console.log(info);        return true;    }        update(info: T, id: number): boolean {        throw new Error("Method not implemented.");    }    delete(id: number): boolean {        throw new Error("Method not implemented.");    }    get(id: number): any[] {        var list=[            {                title:'xxxx',                desc:'xxxxxxxxxx'            },            {                title:'xxxx',                desc:'xxxxxxxxxx'            }        ]        return list;    }}//定义一个操作mssql数据库的类  export class MsSqlDb<T> implements DBI<T>{    constructor(){        console.log('数据库建立连接');    }    add(info: T): boolean {        console.log(info);        return true;    }        update(info: T, id: number): boolean {        throw new Error("Method not implemented.");    }    delete(id: number): boolean {        throw new Error("Method not implemented.");    }    get(id: number): any[] {        var list=[            {                title:'xxxx',                desc:'xxxxxxxxxx'            },            {                title:'xxxx',                desc:'xxxxxxxxxx'            }        ]        return list;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Crash Tutorial</title>
      <link href="/2020/03/12/angular-crash-tutorial/"/>
      <url>/2020/03/12/angular-crash-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Angular-快速入门"><a href="#1-Angular-快速入门" class="headerlink" title="1.Angular 快速入门"></a>1.Angular 快速入门</h2><p>这是一个非常基础的快速入门教程，比较注重概念模型的构建。掌握这门框架的精髓，可以这门理解：</p><ul><li>当有人提到 Spring 的时候，你的大脑里面第一个想到的一定是 DI、IoC、AOP 这些核心概念；</li><li>当有人提到 Hibernate、MyBatis、JPA 的时候，你的大脑里面立即会浮现出 ORM 的概念；</li><li>当有人提到 React 的时候，你想到的应该是 VDOM、JSX；</li><li>当有人提到 jQuery 的时候，你首先想到的应该是 $，对吧？</li></ul><p>因此，可以看到，任何一个成功的框架都有自己独创的“概念模型”，或者叫“核心价值”也可以，这是框架本身存在的价值，这些核心概念是你掌握这门框架应该紧扣的主线，而不是上来就陷入到茫茫多的技术细节里面去。</p><h3 id="1-1-Angular-的核心概念模型"><a href="#1-1-Angular-的核心概念模型" class="headerlink" title="1.1 Angular 的核心概念模型"></a>1.1 Angular 的核心概念模型</h3><p>既然如此，问题就来了，新版本的 Angular 的核心概念是什么呢？<br>非常简单，一切都是围绕着“组件”（Component）的概念展开的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/86a9de10-e25f-11e8-aea1-e3c6bbbc3251" alt="Component"></p><ul><li>Component（组件）是整个框架的核心，也是终极目标。“组件化”的意义有 2 个：第一是分治，因为有了组件之后，我们可以把各种逻辑封装在组件内部，避免混在一起；第二是复用，封装成组件之后不仅可以在项目内部复用，而且可以沉淀下来跨项目复用。</li><li>NgModule（模块）是组织业务代码的利器，按照你自己的业务场景，把组件、服务、路由打包到模块里面，形成一个个的积木块，然后再用这些积木块来搭建出高楼大厦。</li><li>Router（路由）的角色也非常重要，它有 3 个重要的作用：第一是封装浏览器的 History 操作；第二是负责异步模块的加载；第三是管理组件的生命周期。</li></ul><p>所以，在这个系列的文章里面，Component、NgModule、Router 加起来会占据绝大部分篇幅，而一些琐碎的小特性会被忽略掉。我相信，你只要紧扣“组件化”这个主线，就能站在一个很高的角度统摄全局，从而掌握到这门框架的精髓。</p><h3 id="1-2-一些常见的问题"><a href="#1-2-一些常见的问题" class="headerlink" title="1.2 一些常见的问题"></a>1.2 一些常见的问题</h3><h4 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h4><p>关于 Angular 的浏览器兼容性，请看下图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/b11ec620-ac61-11e9-b99d-87fbe4d2a696" alt=""></p><p>有一些国内的开发者会来争论兼容 IE 的问题，下面展示一些事实：</p><ul><li>第一个事实是：天猫已经于 2016 年 4 月宣布放弃支持 IE6、7、8。而根据百度流量研究院的统计，截止到 2019 年 5 月，IE8 以下的浏览器在国内也只有 5.69% 的份额了：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/ed6a4280-ac61-11e9-add6-13ebc1d14b27" alt=""></p><p><a href="http://tongji.baidu.com/data/browser" target="_blank" rel="noopener">数据来源</a>，不值得为了这么少的市场份额付出那么多的研发和维护成本。</p><ul><li>第二个事实是：截至 2019 年 5 月底，Chrome 的全球市场份额已经高达 61.06%，加上 Safari 、Firefox 的份额，所有这些能完美支持 Web 标准的浏览器加起来，份额已经远远超过 80%。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/0df7b1e0-ac62-11e9-9941-c769c68ebd94" alt=""></p><p><a href="http://gs.statcounter.com/browser-market-share" target="_blank" rel="noopener">数据来源</a>。</p><ul><li>第三个事实是：微软 2018 年底宣布，后续新的浏览器会采用 Chromium 内核，并且已经与 2019 年初给出了预览版。如果有兴趣，<a href="https://www.microsoftedgeinsider.com/en-us/" target="_blank" rel="noopener">可以到微软的官方网站来下载</a>。这就意味着，到 2019 年底的时候，基于 Chrome 内核的浏览器全球市场份额将会达到 85% 左右。因此，请不要再花那么多钱和时间来解决“浏览器兼容性问题”了，后面根本就不存在这个问题！</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/78934280-ac62-11e9-b243-f31642e7dba4" alt=""></p><p>你完全可以用以上事实去说服你的客户。</p><h4 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h4><p>老版本使用 AngularJS 指代，所有新版本都叫做 Angular。原因很好理解，因为老版本是用 JS 开发的，所以带一个 JS 后缀，而新版本是基于 TypeScript 的，带 JS 后缀不合适。</p><h4 id="关于TypeScript"><a href="#关于TypeScript" class="headerlink" title="关于TypeScript"></a>关于TypeScript</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d4fc0750-ac62-11e9-9941-c769c68ebd94" alt=""></p><p>这个系列的文章不会单独讲 TypeScript，TypeScript 不难，JavaScript 才难。<br>TypeScript 不该成为学习Angular的障碍。相反，一旦写熟练了之后，TypeScript 可以非常有效地提升编码效率和程序可读性。</p><h4 id="关于-Angular-的版本"><a href="#关于-Angular-的版本" class="headerlink" title="关于 Angular 的版本"></a>关于 Angular 的版本</h4><p>官方的版本发布计划是：</p><ul><li>每 6 个月发布一个主版本（第一位版本号，主版本）</li><li>每个主版本发布 1 到 3 个小版本（第二位版本号，feature 版本号）</li><li>每周发布一个补丁版本（第三位版本号，hotfix 版本号）</li></ul><p>根据官方的解释，Angular 2.0 之后会保证向下兼容，只有升级主版本的时候才会做一些 breaking change。所以这个系列文章里面不再强调版本号，涉及到的所有实例代码都已经升级到了当前最新的 8.0 版本（2019-07）。</p><h3 id="1-3-内容结构"><a href="#1-3-内容结构" class="headerlink" title="1.3 内容结构"></a>1.3 内容结构</h3><p>本专栏共分 3 大部分：</p><ul><li>第一部分：从第 1 篇到第 10 篇，围绕组件、模块、路由三大概念，兼顾服务、RxJS、表单、i18n 等小工具，全面解释 Angular 的基本用法。</li><li>第二部分：第 11 篇，专门解释依赖注入，这是 Angular 比较有特色的内容，这部分内容比较有深度，虽然在日常开发中使用不多，但是理解它能够更加深入理解 Angular。</li><li>第三部分：从第 12 篇到第 16 篇，介绍产品级案例项目 OpenWMS、PWA 案例、一些参考资源以及三个新版本特性附录</li></ul><h2 id="2-快速搭建开发环境"><a href="#2-快速搭建开发环境" class="headerlink" title="2.快速搭建开发环境"></a>2.快速搭建开发环境</h2><h3 id="2-1-Node-js"><a href="#2-1-Node-js" class="headerlink" title="2.1 Node.js"></a>2.1 Node.js</h3><p>2009 年，Node.js 发布了第一个版本，标志着前端开发正式告别了刀耕火种的原始状态，开始进入工业化时代。</p><p>在 Node.js 出现之前，前端开发领域有很多事情我们是做不到的，比如：</p><ul><li>JS 代码的合并、压缩、混淆</li><li>CSS 预处理</li><li>前端自动化测试</li></ul><p>而这一切在 Node.js 出现之后都得到了很好的解决。</p><ul><li>对 JS 代码的预处理经历了 Grunt、Gulp 的短暂辉煌之后，终于在 Webpack 这里形成了事实标准的局面。</li><li>CSS 的预处理也从 LESS 发展到了 SASS 等。</li><li>自动化测试一直是前端开发中的一个巨大痛点，由于前端在运行时严重依赖浏览器环境，导致我们一直无法像测试后端代码那样可以去编写测试用例。在有了 Node.js 之后，我们终于有了 Karma + Jasmine 这样的单元测试组合，也有了基于 WebDriverJS 这样的可以和浏览器进行通讯的集成测试神器。</li></ul><p>就前端开发目前整体的状态来说，无论你使用什么框架，Node.js、Webpack、SASS、Karma + Jasmine、WebDriverJS 这个组合是无论如何绕不过去的。如果你用过其他前端框架的话，就知道手动配置这些东西有多痛苦了，那一坨配置文件没有半天功夫是搞不定的。</p><h3 id="2-2-angular-cli"><a href="#2-2-angular-cli" class="headerlink" title="2.2 @angular/cli"></a>2.2 @angular/cli</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/4b1f3900-e3c5-11e8-a1c4-731a3e37324c" alt=""></p><p>在开发 Angular 应用的时候，当然也离不开大量基于 Node.js 的工具，我们需要 TypeScript compiler、Webpack、Karma、Jasmine、Protracter 等模块。</p><p>有相关经验的开发者都知道，自己从头开始去搭建一套基于 webpack 的开发环境是一件非常麻烦的事情。很多初学者在搭建环境这一步上面消耗了过多的精力，导致学习热情受到了沉重的打击。</p><p>当团队规模比较大的时候，在每个人的机器上配置环境需要消耗大量的时间。有一些团队为了避开这个坑，利用 Docker 来做开发环境的同步和版本升级，看起来也是一个非常不错的方案。</p><p>Angular 项目组从一开始就注意到了这个问题，因此有了 @angular/cli 这个神器，它的底层基于 webpack，集成了以上提到的所有 Node.js 组件。你只要装好 @angular/cli 就够了，而不需要自己从头一步一步安装那些 Node.js 插件。</p><p>当然，在安装 @angular/cli 之前需要先把 Node.js 安装好，<a href="https://nodejs.org/" target="_blank" rel="noopener">请到官方网站下载安装包</a> ，安装过程和普通软件没有区别。装好 Node.js 之后就可以安装 @angular/cli 了，由于 npm 会自动访问海外的服务器，因而强烈推荐使用 cnpm 进行安装：</p><pre><code>npm i -g cnpm --registry=https://registry.npm.taobao.orgcnpm i -g @angular/cli</code></pre><p>cnpm 是淘宝发布的一款工具，会自动把 npm 上面的所有包定时同步到国内的服务器上来（目前大约 10 分钟全量同步一次），cnpm 本身也是一款 Node.js 模块。由于 cnpm 的服务器在国内，因而中文开发者用它装东西比较快。除了定时同步 npm 模块之外，cnpm 还做了一些其他的事情，比如把某些包预先编译好了缓存在服务器上，这样就不用拉源码到你本地进行编译了。有人抱怨使用 cnpm 安装的目录结构和 npm 不同，包括还有其他一些小坑，如果你非常在意这些，可以使用 nrm 来管理多个 registry。nrm 本身也是一个 Node.js 模块，你可以这样安装：</p><pre class="line-numbers language-typescript"><code class="language-typescript">npm i <span class="token operator">-</span>g nrm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你就可以用 nrm 来随时切换 registry 了，比如：</p><pre><code>nrm use cnpm</code></pre><p>这样就不用每次都用 cnpm 进行安装了，直接使用 npm 即可。</p><p>@angular/cli 安装成功之后你的终端里面将会多出一个名叫 ng 的命令，敲下 ng，将会显示完整的帮助文档：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3ec779e0-ac67-11e9-add6-13ebc1d14b27" alt=""></p><p>官方文档里面列出了所有这些命令的含义和示例，<a href="https://angular.io/cli/" target="_blank" rel="noopener">链接在这里</a>。<strong>但是请注意，官方提供的 cli 文档过于简单，有非常多的细节都没有提到，所以你懂的，请跟着我的 demo 走。</strong></p><h3 id="2-3-创建第一个项目"><a href="#2-3-创建第一个项目" class="headerlink" title="2.3 创建第一个项目"></a>2.3 创建第一个项目</h3><p>我们来创建第一个入门项目 HelloAngular，请在你的终端里面运行：</p><pre><code>ng new HelloAngular</code></pre><p>@angular/cli 将会自动帮你把目录结构创建好，并且会自动生成一些模板化的文件，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/6bb0ab20-ac67-11e9-add6-13ebc1d14b27" alt=""></p><p><strong>请特别注意：</strong> @angular/cli 在自动生成好项目骨架之后，会立即自动使用 npm 来安装所依赖的 Node 模块，因此这里我们要 Ctrl+C 终止掉，然后自己进入项目的根目录，使用 cnpm 来进行安装。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/9d8181b0-ac67-11e9-add6-13ebc1d14b27" alt="enter image description here"></p><p>安装完成之后，使用 ng serve 命令启动项目：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/ab185ba0-ac67-11e9-b243-f31642e7dba4" alt="enter image description here"></p><p>打开你的浏览器，访问默认的 4200 端口，看到以下界面说明环境 OK 了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/b76836a0-ac67-11e9-b99d-87fbe4d2a696" alt=""></p><p>请注意以下几点。</p><ul><li><strong>这里是 serve，不是 server，serve 是服务，动词；server 是服务器，名词。</strong>，我看到一些初学者经常坑在这个地方。</li><li>如果你需要修改端口号，可以用 ng serve –port **** 来进行指定。</li><li>ng serve –open 可以自动打开你默认的浏览器。</li><li>如果你想让编译的包更小一些，可以使用 ng serve –prod，@angular/cli 会启用 TreeShaking 特性，加了参数之后编译的过程也会慢很多。因此，在正常的开发过程里面请不要加 –prod 参数。</li><li>ng serve 是在内存里面生成项目，如果你想看到项目编译之后的产物，请运行 ng build。构建最终产品版本可以加参数，ng build –prod。</li></ul><p>ng 提供了很多非常好用的工具，除了可以利用 ng new 来自动创建项目骨架之外，它还可以帮助我们创建 Angular 里面所涉及到的很多模块，最常用的几个如下。</p><ul><li>自动创建组件：<strong>ng generate component MyComponent</strong>，可以简写成<strong>ng g c MyComponent</strong>。创建组件的时候也可以带路径，如 <strong>ng generate component mydir/MyComponent</strong></li><li>自动创建指令：ng g d MyDirective</li><li>自动创建服务：ng g s MyService</li><li>构建项目：ng build，如果你想构建最终的产品版本，可以用 ng build –prod</li></ul><p>更多的命令和参数请在终端里面敲 ng g –help 仔细查看，尽快熟悉这些工具可以非常显著地提升你的编码效率。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3870ef20-ad13-11e9-8f3f-792c82c0addc" alt=""></p><h3 id="2-4-一些常见的坑"><a href="#2-4-一些常见的坑" class="headerlink" title="2.4 一些常见的坑"></a>2.4 一些常见的坑</h3><p>@angular/cli 这种“全家桶”式的设计带来了很大的方便，同时也有一些人不太喜欢，因为很多底层的东西被屏蔽掉了，开发者不能天马行空地自由发挥。比如，@angular/cli 把底层 webpack 的配置文件屏蔽掉了，很多喜欢自己手动配 webpack 的开发者就感到很不爽。</p><p>对于国内的开发者来说，上面这些其实不是最重要的，国内开发者碰到的坑主要是由两点引起的：</p><ul><li>第一点是网络问题，比如 node-sass 这个模块你很有可能就安装不上，原因你懂的；</li><li>第二点是开发环境导致的问题，国内使用 Windows 平台的开发者比例依然巨大，而 @angular/cli 在 Windows 平台上有一些非常恶心的依赖，比如它需要依赖 Python 环境、Visual Studio 环境，这是因为某些 Node.js 的模块需要下载到你的本地进行源码编译。</li></ul><p>因此，如果你的开发平台是 Windows，请特别注意：</p><ul><li>如果你知道如何给 npm 配置代理，也知道如何翻墙，请首选 npm 来安装@angular/cli 。</li><li>否则，请使用 cnpm 来安装 @angular/cli，原因有三：<br>（1）cnpm 的缓存服务器在国内，你装东西的速度会快很多；<br>（2）用 cnpm 可以帮你避开某些模块装不上的问题，因为它在服务器上面做了缓存；<br>（3）cnpm 还把一些包都预编译好了缓存在服务端，比如 node-sass。使用 cnpm 不需要在你本地进行源码编译，因此你的机器上可以没有那一大堆麻烦的环境。</li><li>推荐装一个 nrm 来自动切换 registry：npm i -g nrm。</li><li>如果 cli 安装失败，请手动把 node_modules 目录删掉重试一遍，全局的 @angular/cli 也需要删掉重装，cnpm uninstall -g @angular/cli。</li><li>如果 node_modules 删不掉，爆出路径过长之类的错误，请尝试用一些文件粉碎机之类的工具强行删除。这是 npm 的锅，与 Angular 无关。</li><li>最新版本的 @angular/cli 经常会有 bug，尤其是在 Windows 平台上面，因此请不要追新版本追太紧。如果你发现了莫名其妙的问题，请尝试降低一个主版本试试。这一点非常重要，很多初学者会非常困惑，代码什么都没改，就升级了一下环境，然后就各种编译报错。如果你愿意，<a href="https://github.com/angular/angular-cli/issues" target="_blank" rel="noopener">去官方提 issue 是个很不错的办法</a>。</li><li>对于 MAC 用户或者 *nix 用户，请特别注意权限问题，命令前面最好加上 sudo，保证有 root 权限。</li><li>无论你用什么开发环境，安装的过程中请仔细看 log。很多朋友没有看 log 的习惯，报错的时候直接懵掉，根本不知道发生了什么。</li></ul><h3 id="2-5-VS-Code"><a href="#2-5-VS-Code" class="headerlink" title="2.5 VS Code"></a>2.5 VS Code</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/03569c70-ad1f-11e9-a760-01c165706a91" alt=""></p><p>如你所知，一直以来，前端开发领域并没有一款特别好用的开发和调试工具。</p><ul><li>WebStorm 很强大，但是吃资源很严重。</li><li>Sublime Text 插件很多，可惜要收费，而国内的企业还没有养成花钱购买开发工具的习惯。</li><li>Chrome 的开发者工具很好用，但是要直接调试 TypeScript 很麻烦。</li></ul><p>因此，Visual Studio Code（简称 VS Code）才会呈现出爆炸性增长的趋势。它是微软开发的一款<a href="https://github.com/Microsoft/vscode" target="_blank" rel="noopener">前端编辑器</a>，完全开源免费。VS Code 底层是 Electron，界面本身是用 TypeScript 开发的。对于 Angular 开发者来说，当然要强烈推荐 VS Code。最值得一提的是，从 1.14 开始，可以直接在 VS Code 里面调试 TypeScript 代码。</p><h4 id="第一步：环境配置"><a href="#第一步：环境配置" class="headerlink" title="第一步：环境配置"></a>第一步：环境配置</h4><ul><li>确保 Chrome 安装在默认位置。</li><li>确保 VS Code 里面安装了 Debugger for Chrome 这个插件。</li><li>把 @angular/cli 安装到全局空间 npm install -g @angular/cli，国内用户请使用 cnpm 进行安装。注意，你最好升级到最新版本的 @angular/cli，避免版本兼容问题。</li><li>用 @angular/cli 创建新项目 ng new my-app，本来就已经用 @angular/cli 创建的项目请忽略这一步，继续往下走，因为只要是 cli 创建的项目，后面的步骤都是有效的。</li><li>用 VS Code 打开项目，进入项目根目录。</li></ul><h4 id="第二步：配置-launch-json"><a href="#第二步：配置-launch-json" class="headerlink" title="第二步：配置 launch.json"></a>第二步：配置 launch.json</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/cf1397f0-ad1f-11e9-b1a9-0994986ea855" alt="enter image description here"> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitbook.cn/gitchat/column/undefined/topic/5d4bbc6c7c00c637972766ce" alt=""></p><p>请参照以上步骤打开 launch.json 配置文件。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/e1549900-ad1f-11e9-b015-0198f673a736" alt="enter image description here"></p><p>请把你本地 launch.json 文件里面的内容改成这样：</p><pre><code>{    "version": "0.2.0",    "configurations": [        {            "type": "chrome",            "request": "launch",            "name": "Chrome",            "url": "http://localhost:4200",            "webRoot": "${workspaceRoot}"        }    ]}</code></pre><h4 id="第三步：开始-Debug"><a href="#第三步：开始-Debug" class="headerlink" title="第三步：开始 Debug"></a>第三步：开始 Debug</h4><p>在你的 app.component.ts 的构造函数里面打个断点，我本地是这样打断点的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/fa7c91d0-ad1f-11e9-8f3f-792c82c0addc" alt="enter image description here"></p><p>打开终端，进入项目根目录，运行 ng serve 启动项目，<strong>然后从 VS Code 的 debug 界面启动 Chrome</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/0bb4fc80-ad20-11e9-b1a9-0994986ea855" alt=""></p><p><strong>注意，你可能需要 F5 刷新一下 Chrome 才能进入断点！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/1c6858b0-ad20-11e9-b1a9-0994986ea855" alt="enter image description here"></p><p>VSCode 的插件市场上有大量的插件可供选择，比如彩虹缩进、智能提示、自动补齐标签之类的功能，将会大幅度提升你的开发效率，这里列出了 10 款我自己日常使用的插件供你参考，<a href="http://www.ngfans.net/topic/195/post" target="_blank" rel="noopener">详见这里</a>。</p><h3 id="2-6-webpack-bundle-analyzer"><a href="#2-6-webpack-bundle-analyzer" class="headerlink" title="2.6 webpack-bundle-analyzer"></a>2.6 webpack-bundle-analyzer</h3><p>在真实的业务项目中，我们会用到大量的第三方开源组件，例如图形库 ECharts、组件库 PrimeNG 等。</p><p>有很多开发者在引入这些组件库之后，没有注意到体积问题，导致最终编译出来的包体积过大，比如我自己的 OpenWMS 项目，以下是 build 出来的体积：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/4924d4a0-ad20-11e9-a760-01c165706a91" alt=""></p><p>用 webpack-bundle-analyzer 分析之后可以看到各个模块在编译之后所占的体积：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/7312c740-ad20-11e9-a760-01c165706a91" alt=""></p><p>可以看到，主要是因为 ECharts 和 PrimeNG 占的体积比较大，建议在使用的时候做一下异步，用不到的组件不要一股脑全部导入进来。</p><p><a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener">webpack-bundle-analyzer 的用法和详细文档详见这里</a>。</p><h3 id="2-7-小结"><a href="#2-7-小结" class="headerlink" title="2.7 小结"></a>2.7 小结</h3><p>目前，无论你使用什么前端框架，都必然要使用到各种 Node.js 工具，Angular 也不例外。</p><p>与其他框架不同，Angular 从一开始就走的“全家桶”式的设计思路，因此 @angular/cli 这款工具里面集成了日常开发需要使用的所有 Node 模块，使用 @angular/cli 可以大幅度降低搭建开发环境的难度。</p><h2 id="3-Schematics与代码生成器"><a href="#3-Schematics与代码生成器" class="headerlink" title="3.Schematics与代码生成器"></a>3.Schematics与代码生成器</h2><h3 id="3-1-angular-cli-内置的add命令"><a href="#3-1-angular-cli-内置的add命令" class="headerlink" title="3.1 @angular/cli 内置的add命令"></a>3.1 @angular/cli 内置的add命令</h3><p>6.0 的时候 @angular/cli 新增了一个命令 ng add。<br>以前，如果我们需要引用一些第三方的 UI 库或者工具库，只能自己手动安装配置，过程中需要修改很多配置文件，非常繁琐，ng add 主要就是用来解决这个问题的。<br>如果你引用的第三方库支持了 ng add，那么整个过程全部是自动化的，以下这些事情 ng add 都会帮你自动完成：</p><ul><li>自动修改 package.json</li><li>自动使用 npm 安装依赖包</li><li>自动修改相关的配置文件，如果有的话</li><li>自动修改对应的模块引用文件</li><li>自动修改一些 CSS 样式文件</li></ul><p>接下来我们就来上手试一试 ng add 命令的用法，以官方的例子为基础，在上面做一些改进。</p><h4 id="第一步：创建一个新项目"><a href="#第一步：创建一个新项目" class="headerlink" title="第一步：创建一个新项目"></a>第一步：创建一个新项目</h4><pre class="line-numbers language-typescript"><code class="language-typescript">ng <span class="token keyword">new</span> <span class="token class-name">learn</span><span class="token operator">-</span>ng<span class="token operator">-</span>add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建过程中选择需要 router 模块</li><li>样式语法选择 SCSS</li></ul><h4 id="第二步：自动引入-angular-material"><a href="#第二步：自动引入-angular-material" class="headerlink" title="第二步：自动引入 @angular/material"></a>第二步：自动引入 @angular/material</h4><p>在项目根目录里面执行：</p><pre class="line-numbers language-typescript"><code class="language-typescript">ng add @angular<span class="token operator">/</span>material<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/031c0040-ad26-11e9-8f3f-792c82c0addc" alt="ng Add"><br>可以看到，ng add 帮我们自动修改了这些文件:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/15206d80-ad26-11e9-b1a9-0994986ea855" alt="ng modify file"><br><strong>国内的开发者请注意：官方提供的 Material 这个 UI 组件库会自动应用 Google 的一些字体文件，这一点比较讨厌，你需要手动把这些字体文件下载到项目里面，然后引用你自己项目中的路径。</strong></p><h4 id="第三步：自动创建-Material-风格导航栏"><a href="#第三步：自动创建-Material-风格导航栏" class="headerlink" title="第三步：自动创建 Material 风格导航栏"></a>第三步：自动创建 Material 风格导航栏</h4><pre class="line-numbers language-typescript"><code class="language-typescript">ng generate @angular<span class="token operator">/</span>material<span class="token punctuation">:</span>material<span class="token operator">-</span>nav <span class="token operator">--</span>name<span class="token operator">=</span>my<span class="token operator">-</span>nav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/2c5f8210-ad26-11e9-a760-01c165706a91" alt="Navigation"></p><h4 id="第四步：使用上面的导航栏"><a href="#第四步：使用上面的导航栏" class="headerlink" title="第四步：使用上面的导航栏"></a>第四步：使用上面的导航栏</h4><p>稍稍修改一些代码，来使用上面自动生成的导航栏。<br>把 app.component.html 里面的内容清空，然后使用上面新建的导航栏：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-my-nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-my-nav</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用 ng serve 启动项目，然后你就可以看到 Material 风格的导航条了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3e5437e0-ad26-11e9-a760-01c165706a91" alt="material navigation"></p><h4 id="第五步：继续修改，做一个完整的例子"><a href="#第五步：继续修改，做一个完整的例子" class="headerlink" title="第五步：继续修改，做一个完整的例子"></a>第五步：继续修改，做一个完整的例子</h4><p>我们在以上内容的基础上继续修改：继续生成两个组件，然后加上异步路由配置，就可以得到了一个典型的项目界面了。<br><strong>注意：为了使用异步路由，我们这里在官方的例子上面做了一些改进，请参考我下面的步骤。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">ng g module myDashboard ng g @angular<span class="token operator">/</span>material<span class="token punctuation">:</span>material<span class="token operator">-</span>dashboard <span class="token operator">--</span>name<span class="token operator">=</span>my<span class="token operator">-</span>dashboard ng g module myTable ng g @angular<span class="token operator">/</span>material<span class="token punctuation">:</span>material<span class="token operator">-</span>table <span class="token operator">--</span>name<span class="token operator">=</span>my<span class="token operator">-</span>table<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们的项目代码结构如下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/4d0645d0-ad26-11e9-b015-0198f673a736" alt="Folder Structure"><br>接下来：</p><ul><li>请参考 app.routing.module.ts 里面的路由配置，给上面的两个异步模块都加上独立的路由配置。</li><li>修改导航条里面的 routerLink，指向对应的路由配置。</li></ul><p>然后就可以得到两个很漂亮的界面了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/5ca265a0-ad26-11e9-b1a9-0994986ea855" alt="NiceUI1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/69d7bea0-ad26-11e9-8f3f-792c82c0addc" alt="NiceUI2"><br><strong>从这个例子你可以看到，ng add 和 ng generate 的功能非常强大，日常工作中的那些任务大多数能自动完成，只有很少的部分需要手动修改。</strong></p><h3 id="3-2-ng-add背后的Schematics代码生成器"><a href="#3-2-ng-add背后的Schematics代码生成器" class="headerlink" title="3.2 ng add背后的Schematics代码生成器"></a>3.2 ng add背后的Schematics代码生成器</h3><p><strong>请注意：初学者可以跳过这一段，这块是比较高级的内容，等你用熟悉了之后再回来研究不迟。单独使用 Schematics 比较麻烦，因为模板本身也是代码，也是需要维护的。另外，Schematics 特性本身还处于“实验”状态，官方提供的文档不全。</strong></p><p>@angular/cli 内部用来自动生成代码的工具叫做 Schematics ：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/7acabbe0-ad26-11e9-b1a9-0994986ea855" alt="Schematics "><br>能支持的所有 Schematics 如下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/8866ed00-ad26-11e9-b015-0198f673a736" alt="Schematics  List"><br>如上图，当我们使用 ng g c &lt;组件名&gt; 的时候，它实际上调用了底层的 Schematics 来生成组件对应的 4 个文件。</p><p>Schematics 是框架无关的，它可以脱离 Angular 环境使用，因此你也可以把它单独拿出来，用来自动生成其他框架的代码。为了演示自定义 Schematic 的方法，我已经整合好了 2 个项目，请看运行效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/95fd78d0-ad26-11e9-a760-01c165706a91" alt="Schematics "><br><strong>请特别注意：由于 @angular/schematics 是 cli 工具的组成部分，它的版本号与 cli 之间有对应关系。因此，如果你不确定对应关系是什么，请不要修改以上两个示例项目中的 package.json，升级必挂。</strong> <a href="https://www.npmjs.com/package/@angular-devkit/schematics" target="_blank" rel="noopener">更多文档和模板语法请参考这里</a><br>你可以利用 Schematics 来创建自己的代码生成器，可以参考以下步骤：</p><ul><li>npm i -g @angular-devkit/schematics-cli</li><li>用 schematics 命令创建一个新项目 schematics blank –name=learn-schematics</li><li>创建 schema.json 和 schema.ts 接口，修改 collection.json，指向自己创建的 shema.json 配置文件</li><li>修改 index.ts ，加一些生成代码的逻辑，可以参考 @angluar/cli 内部的代码</li><li>创建 files 目录和模板文件，目录名和文件名本身也可以参数化</li><li>构建项目：npm run build</li><li>链接到全局，方便本地调试：npm link</li><li>准备测试 schema ，用 @angular/cli 创建一个全新的项目 test-learn-schematics 并装好依赖。cd 到新项目 test-learn-schematics，链接 npm link learn-schematics，然后尝试用我们自定义的规则来生成一个组件 ng g my-component My –service –name=”damo” –collection learn-schematics –force</li></ul><h3 id="3-3-Workspace-与多项目支持"><a href="#3-3-Workspace-与多项目支持" class="headerlink" title="3.3 Workspace 与多项目支持"></a>3.3 Workspace 与多项目支持</h3><p>从 6.0 开始，@angular/cli 支持 workspace 特性，之所以能支持 workspace，也是因为背后有 Schematics 这个底层的工具。</p><p>有了 workspace 这个机制之后，可以在一个项目里面配置多个子项目，cli 会根据里面的配置进行依赖管理、校验、编译等等操作。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/a815e340-ad26-11e9-b015-0198f673a736" alt="workspace "></p><p><a href="https://github.com/angular/angular-cli/wiki/angular-workspace" target="_blank" rel="noopener">关于 workspace 官方的完整文档在这里</a>。</p><h3 id="3-4-参考资源"><a href="#3-4-参考资源" class="headerlink" title="3.4 参考资源"></a>3.4 参考资源</h3><ul><li><a href="https://gitee.com/learn-angular-series/learn-ng-add" target="_blank" rel="noopener">本节涉及到的实例代码请点击这里查看</a></li><li><a href="https://www.npmjs.com/package/@angular-devkit/schematics" target="_blank" rel="noopener">Schematics 的用法文档，请点击这里查看</a></li><li><a href="https://github.com/angular/angular-cli/wiki" target="_blank" rel="noopener">@angular/cli 官方的 wiki 文档，请点击这里查看</a></li><li><a href="https://angular.io/guide/workspace-config" target="_blank" rel="noopener">workspace 多项目配置，请点击这里查看</a></li><li><a href="https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2" target="_blank" rel="noopener">Angular 官方 blog 里面关于 Schematics 的解释，请点击这里查看</a></li></ul><h2 id="4-组件-概述"><a href="#4-组件-概述" class="headerlink" title="4.[组件]概述"></a>4.[组件]概述</h2><p>几乎所有前端框架都在玩“组件化”，而且最近都不约而同地选择了“标签化”这种思路，Angular 也不例外。</p><p>对新版本的 Angular 来说，一切都是围绕着“组件化”展开的，组件是 Angular 的核心概念模型。</p><p>以下是一个最简单的 Angular 组件定义：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/131ef0d0-ad29-11e9-a760-01c165706a91" alt="Component"></p><ul><li>@Component：这是一个 Decorator（装饰器），其作用类似于 Java 里面的 Annotation（注解）。Decorator 这个特性目前处于 Stage 2（草稿）状态，还不是 ECMA 的正式规范，<a href="https://tc39.github.io/proposal-decorators/#decorator-semantics" target="_blank" rel="noopener">具体可参考这里</a>。</li><li>selector：组件的标签名，外部使用者可以这样来使用以上组件：<app-root>。默认情况下，ng 命令生成出来的组件都会带上一个 app 前缀，如果你不喜欢，可以在 angular-cli.json 里面修改 prefix 配置项，设置为空字符串将会不带任何前缀。</app-root></li><li>templateUrl：引用外部 HTML 模板。如果你想直接编写内联模板，可以使用 template，支持 ES6 引入的“模板字符串”写法，<a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="noopener">具体可参考这里</a>。</li><li>styleUrls：引用外部 CSS 样式文件，这是一个数组，也就意味着可以引用多份 CSS 文件。</li><li>export class AppComponent：这是 ES6 里面引入的模块和 class 定义方式。</li></ul><h2 id="5-组件-把-CSS-预编译器改成-SASS"><a href="#5-组件-把-CSS-预编译器改成-SASS" class="headerlink" title="5.[组件]把 CSS 预编译器改成 SASS"></a>5.[组件]把 CSS 预编译器改成 SASS</h2><p>SASS 是一款非常好用的 CSS 预编译器，Bootstrap 官方从 4.0 开始已经切换到了 SASS。</p><h3 id="5-1-创建项目的时候指定"><a href="#5-1-创建项目的时候指定" class="headerlink" title="5.1 创建项目的时候指定"></a>5.1 创建项目的时候指定</h3><p>@angular/cli 当前（2019-06）最新的版本是 8.0，可以支持多款 CSS 预编译器，你可以在创建项目的过程中指定：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/72144200-ad2b-11e9-8f3f-792c82c0addc" alt="scss"></p><h3 id="5-2-手动修改"><a href="#5-2-手动修改" class="headerlink" title="5.2 手动修改"></a>5.2 手动修改</h3><p>某些老项目可能需要手动修改预编译器的类型，所以我把手动修改的方法也留下来备查。</p><p>目前（2019-06），@angular/cli 创建项目的时候没有自动使用 SASS 作为预编译器，我们需要自己手动修改一些配置文件，请按照以下步骤依次修改：</p><ul><li><p>angular-cli.json 里面的 styleExt 改成 scss</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/8a3949c0-ad2b-11e9-b1a9-0994986ea855" alt="styleExt"></p></li></ul><p>当后面再使用 ng g c *** 自动创建组件的时候，默认就会生成 .scss 后缀的样式文件了。</p><ul><li>angular-cli.json 里面的 styles.css 后缀改成 .scss</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/9ac3e840-ad2b-11e9-b015-0198f673a736" alt="scss"></p><ul><li><p>src 下面 style.css 改成 style.scss</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d25ed4e0-ad2b-11e9-a760-01c165706a91" alt="scss"></p></li><li><p>app.component.scss</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/e6cfae40-ad2b-11e9-8f3f-792c82c0addc" alt="scss"></p></li><li><p>app.component.ts 里面对应修改</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/fda7c3a0-ad2b-11e9-b015-0198f673a736" alt="scss"></p></li></ul><p>改完之后，重新 ng serve，打开浏览器查看效果。</p><p><a href="http://sass-lang.com/" target="_blank" rel="noopener">SASS 的 API 请参考官方网站</a>。</p><p><strong>SASS 只是一个预编译器，它支持所有 CSS 原生语法。利用 SASS 可以提升你的 CSS 编码效率，增强 CSS 代码的可维护性，但是千万不要幻想从此就可以不用学习 CSS 基础知识了。</strong></p><h2 id="6-组件-模板的使用"><a href="#6-组件-模板的使用" class="headerlink" title="6.[组件]模板的使用"></a>6.[组件]模板的使用</h2><p>模板是编写 Angular 组件最重要的一环，你必须深入理解以下知识点才能玩转 Angular 模板：</p><ul><li>对比各种 JS 模板引擎的设计思路</li><li>Mustache（八字胡）语法</li><li>模板内的局部变量</li><li>属性绑定、事件绑定、双向绑定</li><li>在模板里面使用结构型指令 <em>ngIf、</em>ngFor、ngSwitch</li><li>在模板里面使用属性型指令 NgClass、NgStyle、NgModel</li><li>在模板里面使用管道格式化数据</li><li>一些小 feature：安全导航、非空断言</li></ul><p><strong>“深入理解”的含义是：你需要很自如地运用这些 API，写代码的时候不翻阅 API 文档。</strong></p><p><strong>因为很多新手之所以编码效率不高，其中一个主要的原因就是在编码过程中不停翻文档、查资料。</strong></p><h3 id="6-1-对比各种-JS-模板引擎的设计思路"><a href="#6-1-对比各种-JS-模板引擎的设计思路" class="headerlink" title="6.1 对比各种 JS 模板引擎的设计思路"></a>6.1 对比各种 JS 模板引擎的设计思路</h3><p>几乎每一款前端框架都会提供自己的模板语法：</p><ul><li>在 jQuery 如日中天的时代，有 Handlebars 那种功能超强的模板</li><li>React 推崇 JSX 模板语法</li><li>当然还有 Angular 提供的那种与“指令”紧密结合的模板语法</li></ul><p>综合来说，无论是哪一种前端模板，大家都比较推崇“轻逻辑”（logic-less）的设计思路。<br>何为“轻逻辑”？<br>简而言之，所谓“轻逻辑”就是说，你不能在模板里面编写非常复杂的 JavaScript 表达式。比如，Angular 的模板语法就有规定：</p><ul><li>你不能在模板里面 new 对象</li><li>不能使用 =、+=、-= 这类的表达式</li><li>不能用 ++、– 运算符</li><li>不能使用位运算符</li></ul><p>为什么要“轻逻辑”？<br><strong>最重要的原因是怕影响运行性能，因为模板可能会被执行很多次。</strong><br>比如你编写了以下 Angular 模板：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let race of races<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{race.name}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显，浏览器不认识 *ngFor 和  这种语法，因此必须在浏览器里面进行“编译”，获得对应的模板函数，然后再把数据传递给模板函数，最终结合起来获得一堆 HTML 标签，然后才能把这一堆标签插入到 DOM 树里面去。</p><p>如果启用了 AOT，处理的步骤有一些变化，@angular/cli 会对模板进行“静态编译”，避免在浏览器里面动态编译的过程。</p><p>而 Handlebars 这种模板引擎完全是运行时编译模板字符串的，你可以编写以下代码：</p><pre><code>//定义模板字符串var source=`&lt;ul&gt;    {{#each races}}        &lt;li&gt;{{name}}&lt;/li&gt;    {{/each}}&lt;/ul&gt;`;</code></pre><p>//在运行时把模板字符串编译成 JS 函数<br><code>var templateFn=Handlebars.compile(source);</code></p><p>//把数据传给模板函数，获得最终的 HTML</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> html<span class="token operator">=</span><span class="token function">templateFn</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'人族'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'神族'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'虫族'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 Handlebars.compile 这个调用了吧？这个地方的本质是在运行时把模板字符串“编译”成了一个 JS 函数。</p><p>鉴于 JS 解释执行的特性，你可能会担忧这里会有性能问题。这种担忧是合理的，但是 Handlebars 是一款非常优秀的模板引擎，它在内部做了各种优化和缓存处理。模板字符串一般只会在第一次被调用的时候编译一次，Handlebars 会把编译好的函数缓存起来，后面再次调用的时候会从缓存里面获取，而不会多次进行“编译”。</p><p>上面我们多次提到了“编译”这个词，因此很显然这里有一个东西是无法避免的，那就是我们必须提供一个 JS 版的“编译器”，让这个“编译器”运行在浏览器里面，这样才能在运行时把用户编写的模板字符串“编译”成模板函数。</p><p>有一些模板引擎会真的去用 JS 编写一款“编译器”出来，比如 Angular 和 Handlebars，它们都真的编写了一款 JS（TS）版的编译器。而有一些简单的模板引擎，例如 Underscore 里面的模板函数，只是用正则表达式做了字符串替换而已，显得特别简陋。这种简陋的模板引擎对模板的写法有非常多的限制，因为它不是真正的编译器，能支持的语法特性非常有限。</p><p>因此，评估一款模板引擎的强弱，最核心的东西就是评估它的“编译器”做得怎么样。但是不管怎么说，毕竟是 JS 版的“编译器”，我们不可能把它做得像 G++ 那么强大，也没有必要做得那么强大，因为这个 JS 版的编译器需要在浏览器里面运行，搞得太复杂浏览器拖不动！</p><p>以上就是为什么大多数模板引擎都要强调“轻逻辑”的最根本原因。</p><p>对于 Angular 来说，强调“轻逻辑”还有另一个原因：在组件的整个生命周期里面，模板函数会被执行很多次。你可以想象，Angular 每次要刷新组件外观的时候，都需要去调用一下模板函数，如果你在模板里面编写了非常复杂的代码，一定会增加渲染时间，用户一定会感到界面有“卡顿”。</p><p>人眼的视觉延迟大约是 100ms 到 400ms 之间，如果整个页面的渲染时间超过 400ms，界面基本上就卡得没法用了。有一些做游戏的开发者会追求 60fps 刷新率的细腻感觉，60 分之 1 秒约等于 16.7ms，如果 UI 整体的渲染时间超过了 16.7ms，就没法达到这个要求了。</p><p>轻逻辑（logic-less）带来了效率的提升，也带来了一些不方便，比如很多模板引擎都实现了 if 语句，但是没有实现 else，因此开发者们在编写复杂业务逻辑的时候模板代码会显得非常啰嗦。</p><p>目前来说，并没有完美的方案能同时兼顾运行效率和语法表现能力，这里只能取一个平衡。</p><h3 id="6-2-Mustache-语法"><a href="#6-2-Mustache-语法" class="headerlink" title="6.2 Mustache 语法"></a>6.2 Mustache 语法</h3><p>Mustache 语法也就是你们说的双花括号语法 ，老外觉得它像八字胡子，很奇怪啊，难道老外喜欢侧着头看东西？<br>好消息是，很多模板引擎都接受了 Mustache 语法，这样一来学习量又降低了不少，开心吧？</p><p>关于 Mustache 语法，你需要掌握 3 点：</p><ul><li>它可以获取到组件里面定义的属性值</li><li>它可以自动计算简单的数学表达式，如加减乘除、取模</li><li>它可以获得方法的返回值</li></ul><p>请依次看例子。<br>插值语法关键代码实例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>    欢迎来到{{title}}！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>public title = '假的星际争霸2'; //简单的数学表达式求值：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>1+1={{1+1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>//调用组件里面定义的方法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>可以调用方法{{getVal()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>public getVal():any{    return 65535;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-模板内的局部变量"><a href="#6-3-模板内的局部变量" class="headerlink" title="6.3 模板内的局部变量"></a>6.3 模板内的局部变量</h3><pre><code>&lt;input #heroInput&gt;&lt;p&gt;{{heroInput.value}}&lt;/p&gt;</code></pre><p>有一些同学会追问，如果我在模板里面定义的局部变量和组件内部的属性重名会怎么样呢？<br>如果真的出现了重名，Angular 会按照以下优先级来进行处理：</p><p><code>模板局部变量 &gt; 指令中的同名变量 &gt; 组件中的同名属性。</code></p><p>这种优先级规则和 JSP 里面的变量取值规则非常类似，对比一下很好理解对不对？你可以自己写代码测试一下。</p><h3 id="6-4-值绑定"><a href="#6-4-值绑定" class="headerlink" title="6.4 值绑定"></a>6.4 值绑定</h3><p>值绑定是用方括号来做的，写法：</p><pre><code>&lt;img [src]="imgSrc" /&gt;public imgSrc:string="./assets/imgs/1.jpg";</code></pre><p>很明显，这种绑定是单向的。</p><h3 id="6-4-事件绑定"><a href="#6-4-事件绑定" class="headerlink" title="6.4 事件绑定"></a>6.4 事件绑定</h3><p>事件绑定是用圆括号来做的，写法：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应 Component 内部的方法定义：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token function">btnClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"测试事件绑定！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-5-双向绑定"><a href="#6-5-双向绑定" class="headerlink" title="6.5 双向绑定"></a>6.5 双向绑定</h3><p>双向绑定是通过方括号里面套一个圆括号来做的，模板写法：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-resizer</span> <span class="token attr-name">[(size)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fontSizePx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font-resizer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应组件内部的属性定义：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> fontSizePx<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AngularJS 是第一个把“双向数据绑定”这个特性带到前端来的框架，这也是 AngularJS 当年最受开发者追捧的特性，之一。</p><p>根据 AngularJS 团队当年讲的故事，“双向数据绑定”这个特性可以大幅度压缩前端代码的规模。大家可以回想一下 jQuery 时代的做法，如果要实现类似的效果，是不是要自己去编写大量的代码？尤其是那种大规模的表单，一大堆的赋值和取值操作，都是非常丑陋的“面条”代码，而有了“双向数据绑定”特性之后，一个绑定表达式就搞定。</p><p>目前，主流的几款前端框架都已经接受了“双向数据绑定”这个特性。</p><p>当然，也有一些人不喜欢“双向数据绑定”，还有人专门写了文章来进行批判，也算是前端一景。</p><h3 id="6-6-在模板里面使用结构型指令"><a href="#6-6-在模板里面使用结构型指令" class="headerlink" title="6.6 在模板里面使用结构型指令"></a>6.6 在模板里面使用结构型指令</h3><p>Angular 有 3 个内置的结构型指令：<em>ngIf、</em>ngFor、ngSwitch。ngSwitch 的语法比较啰嗦，使用频率小一些。</p><p>*ngIf 代码实例:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#ff3300</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示还是不显示？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggleShow()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>控制显示隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> isShow<span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>*ngFor 代码实例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let race of races;let i<span class="token punctuation">=</span>index;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{i+1}}-{{race.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> races<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"人族"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"虫族"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"神族"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*ngSwitch 代码实例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngSwitch]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">*ngSwitchCase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载中...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">*ngSwitchCase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>正在读取...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">*ngSwitchDefault</span><span class="token punctuation">></span></span>系统繁忙...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> mapStatus<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>特别注意：一个 HTML 标签上只能同时使用一个结构型的指令。</strong></p><p>因为“结构型”指令会修改 DOM 结构，如果在一个标签上使用多个结构型指令，大家都一起去修改 DOM 结构，到时候到底谁说了算？</p><p>那么需要在同一个 HTML 上使用多个结构型指令应该怎么办呢？有两个办法：</p><ul><li>加一层空的 div 标签</li><li>加一层 <ng-container></ng-container></li></ul><h3 id="6-7-在模板里面使用属性型指令"><a href="#6-7-在模板里面使用属性型指令" class="headerlink" title="6.7 在模板里面使用属性型指令"></a>6.7 在模板里面使用属性型指令</h3><p>使用频率比较高的 3 个内置指令是：NgClass、NgStyle、NgModel。</p><p>NgClass 使用案例代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngClass]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentClasses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>同时批量设置多个样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setCurrentClasses()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> currentClasses<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> canSave<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> isUnchanged<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> isSpecial<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token function">setCurrentClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentClasses <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'saveable'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canSave<span class="token punctuation">,</span>        <span class="token string">'modified'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isUnchanged<span class="token punctuation">,</span>        <span class="token string">'special'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isSpecial    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.saveable</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.modified</span> </span><span class="token punctuation">{</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.special</span></span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff3300</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NgStyle 使用案例代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngStyle]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentStyles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用NgStyle批量修改内联样式！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setCurrentStyles()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> currentStyles<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> canSave<span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">;</span><span class="token keyword">public</span> isUnchanged<span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">;</span><span class="token keyword">public</span> isSpecial<span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">;</span><span class="token function">setCurrentStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentStyles <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'font-style'</span><span class="token punctuation">:</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>canSave      <span class="token operator">?</span> <span class="token string">'italic'</span> <span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span>        <span class="token string">'font-weight'</span><span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isUnchanged <span class="token operator">?</span> <span class="token string">'bold'</span>   <span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span>        <span class="token string">'font-size'</span><span class="token punctuation">:</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>isSpecial    <span class="token operator">?</span> <span class="token string">'36px'</span>   <span class="token punctuation">:</span> <span class="token string">'12px'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ngStyle 这种方式相当于在代码里面写 CSS 样式，比较丑陋，违反了注意点分离的原则，而且将来不太好修改，非常不建议这样写。</p><p>NgModel 使用案例代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ngModel只能用在表单类的元素上面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentRace.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{currentRace.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> currentRace<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"随机种族"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，如果你需要使用 NgModel 来进行双向数据绑定，必须要在对应的模块里面 import FormsModule 。</p><h3 id="6-8-管道"><a href="#6-8-管道" class="headerlink" title="6.8 管道"></a>6.8 管道</h3><p>管道的一个典型作用是用来格式化数据，来一个最简单的例子：</p><p><code>{{currentTime | date:'yyyy-MM-dd HH:mm:ss'}}</code></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> currentTime<span class="token punctuation">:</span> Date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Angular 里面一共内置了 17 个指令（有一些已经过时了）：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/9572e7e0-ad2d-11e9-8f3f-792c82c0addc" alt="enter image description here"></p><p>在复杂的业务场景里面，17 个指令肯定不够用，如果需要自定义指令，请查看这里的例子： <a href="https://angular.io/guide/pipes" target="_blank" rel="noopener">https://angular.io/guide/pipes</a> 。<br>管道还有另一个典型的作用，就是用来做国际化，后面有一个独立的小节专门演示 Angular 的国际化写法。</p><h2 id="7-组件-组件间通讯"><a href="#7-组件-组件间通讯" class="headerlink" title="7.[组件]组件间通讯"></a>7.[组件]组件间通讯</h2><p>组件就像零散的积木，我们需要把这些积木按照一定的规则拼装起来，而且要让它们互相之间能进行通讯，这样才能构成一个有机的完整系统。</p><p>在真实的应用中，组件最终会构成树形结构，就像人类社会中的家族树一样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/1290c0f0-ad31-11e9-a760-01c165706a91" alt="component communication"></p><p>在树形结构里面，组件之间有几种典型的关系：父子关系、兄弟关系、没有直接关系。</p><p>相应地，组件之间有以下几种典型的通讯方案：</p><ul><li>直接的父子关系：父组件直接访问子组件的 public 属性和方法</li><li>直接的父子关系：借助于 @Input 和 @Output 进行通讯</li><li>没有直接关系：借助于 Service 单例进行通讯</li><li>利用 cookie 和 localstorage 进行通讯</li><li>利用 session 进行通讯</li></ul><p>无论你使用什么前端框架，组件之间的通讯都离开不以上几种方案，这些方案与具体框架无关。</p><h3 id="7-1-直接调用"><a href="#7-1-直接调用" class="headerlink" title="7.1 直接调用"></a>7.1 直接调用</h3><p>对于有直接父子关系的组件，父组件可以直接访问子组件里面 public 型的属性和方法，示例代码片段如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">#child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child.childFn()<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>调用子组件方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显然，子组件里面必须暴露一个 public 型的 childFn 方法，就像这样：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token function">childFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子组件的名字是>"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>panelTitle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上是通过在模板里面定义局部变量的方式来直接调用子组件里面的 public 型方法。在父组件的内部也可以访问到子组件的实例，需要利用到 @ViewChild 装饰器，示例如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">ViewChild</span><span class="token punctuation">(</span>ChildComponent<span class="token punctuation">)</span><span class="token keyword">private</span> childComponent<span class="token punctuation">:</span> ChildComponent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关于 @ViewChild 在后面的内容里面会有更详细的解释。</p><p>很明显，如果父组件直接访问子组件，那么两个组件之间的关系就被固定死了。父子两个组件紧密依赖，谁也离不开谁，也就都不能单独使用了。所以，除非你知道自己在做什么，最好不要直接在父组件里面直接访问子组件上的属性和方法，以免未来一改一大片。</p><h3 id="7-2-Input-和-Output"><a href="#7-2-Input-和-Output" class="headerlink" title="7.2 @Input 和 @Output"></a>7.2 @Input 和 @Output</h3><p>我们可以利用 @Input 装饰器，让父组件直接给子组件传递参数，子组件上这样写：</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> panelTitle<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>父组件上可以这样设置 panelTitle 这个参数：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">panelTitle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>一个新的标题<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>@Output 的本质是事件机制，我们可以利用它来监听子组件上派发的事件，子组件上这样写：</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> follow<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>触发 follow 事件的方式如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>follow<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"follow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>父组件上可以这样监听 follow 事件：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>child <span class="token punctuation">(</span>follow<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"doSomething()"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以利用 @Output 来自定义事件，监听自定义事件的方式也是通过小圆括号，与监听 HTML 原生事件的方式一模一样。</p><h3 id="7-3-利用-Service-单例进行通讯"><a href="#7-3-利用-Service-单例进行通讯" class="headerlink" title="7.3 利用 Service 单例进行通讯"></a>7.3 利用 Service 单例进行通讯</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/659d3260-b8d0-11e9-8b62-c350e3466c22" alt=""><br>如果你在根模块（一般是 app.module.ts）的 providers 里面注册一个 Service，那么这个 Service 就是全局单例的，这样一来我们就可以利用这个单例的 Service 在不同的组件之间进行通讯了。</p><ul><li>比较粗暴的方式：我们可以在 Service 里面定义 public 型的共享变量，然后让不同的组件都来访问这块变量，从而达到共享数据的目的。</li><li>优雅一点的方式：利用 RxJS，在 Service 里面定义一个 public 型的 Subject（主题），然后让所有组件都来 subscribe（订阅）这个主题，类似于一种“事件总线”的效果。</li></ul><p>实例代码片段：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Observable'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Subject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Subject'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用来充当事件总线的 Service */</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EventBusService</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> eventBus<span class="token punctuation">:</span>Subject<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBusService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../service/event-bus.service'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'child-1'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./child-1.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./child-1.component.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Child1Component</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> eventBusService<span class="token punctuation">:</span>EventBusService<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">triggerEventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBusService<span class="token punctuation">.</span>eventBus<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">"第一个组件触发的事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBusService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../service/event-bus.service'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'child-2'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./child-2.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./child-2.component.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Child2Component</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> events<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">>=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> eventBusService<span class="token punctuation">:</span>EventBusService<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBusService<span class="token punctuation">.</span>eventBus<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-利用cookie或者localstorage进行通讯"><a href="#7-4-利用cookie或者localstorage进行通讯" class="headerlink" title="7.4 利用cookie或者localstorage进行通讯"></a>7.4 利用cookie或者localstorage进行通讯</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/986efe30-b8d0-11e9-ba33-51636d56aead" alt=""><br>示例代码片段：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'大漠穷秋'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> json<span class="token operator">=</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// window.localStorage.removeItem("json");</span><span class="token keyword">var</span> obj<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>很多同学写 Angular 代码的时候出现了思维定势，总感觉 Angular 会封装所有东西，实际上并非如此。比如 cookie、localstorage 这些东西都可以直接用原生的 API 进行操作的。千万别忘记原生的那些 API 啊，都能用的！</strong></p><h3 id="7-5-利用-session-进行通讯"><a href="#7-5-利用-session-进行通讯" class="headerlink" title="7.5 利用 session 进行通讯"></a>7.5 利用 session 进行通讯</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/ba052b00-b8d0-11e9-ba33-51636d56aead" alt="session"></p><h3 id="7-6-小结"><a href="#7-6-小结" class="headerlink" title="7.6 小结"></a>7.6 小结</h3><p>组件间的通讯方案是通用的，无论你使用什么样的前端框架，都会面临这个问题，而解决的方案无外乎本文所列出的几种。</p><h2 id="8-组件-生命周期钩子"><a href="#8-组件-生命周期钩子" class="headerlink" title="8.[组件]生命周期钩子"></a>8.[组件]生命周期钩子</h2><p>我不打算在这里罗列 API，在官方网站上面有更详细的描述和例子：</p><blockquote><p><a href="https://angular.io/guide/lifecycle-hooks" target="_blank" rel="noopener">https://angular.io/guide/lifecycle-hooks</a></p></blockquote><p>在这一节里面我们只讨论以下 4 件事：</p><ul><li>什么是 UI 组件的生命周期？</li><li>Angular 组件的生命周期有什么特别的地方？</li><li>OnPush 策略的使用方式。</li><li>简要介绍脏检查的实现原理。</li></ul><h3 id="8-1-UI-组件的生命周期"><a href="#8-1-UI-组件的生命周期" class="headerlink" title="8.1 UI 组件的生命周期"></a>8.1 UI 组件的生命周期</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/56550980-b8d1-11e9-a88b-c93a5ea3d618" alt="LifeCycle"></p><p>无论使用什么样的前端框架，只要编写 UI 组件，生命周期都是必须要考虑的重要内容。请展开你的想象，如果让你来设计 UI 系统，组件有几个重要的阶段一定是绕不开的，比如：</p><ul><li>初始化（init）阶段：在这个阶段你需要把组件 new 出来，把一些属性设置上去，等等这些操作。</li><li>渲染（render）阶段：在这个阶段需你要把组件的模板和数据结合起来，生成 HTML 标签结构，并且要整合到现有的 DOM 树里面去。</li><li>存活阶段：既然带有 UI，那么在组件的存活期内就一定会和用户进行交互。一般来说，带有 UI 的系统都是通过事件机制进行用户交互的。也就是说，这个阶段将会处理大量的用户事件：鼠标点击、键盘按键、手指触摸。</li><li>销毁（destory）阶段：最后，组件使用完了，需要把一些资源释放掉。最典型的操作：需要把组件上的所有事件全部清理干净，避免造成内存泄漏。</li></ul><p>在组件生命的不同阶段，框架一般会暴露出一些“接口”，开发者可以利用这些接口来实现一些自己的业务逻辑。这种接口在有些框架里面叫做“事件”，在 Angular 里面叫做“钩子”，但其底层的本质都是一样的。</p><h3 id="8-2-Angular-组件的生命周期钩子"><a href="#8-2-Angular-组件的生命周期钩子" class="headerlink" title="8.2 Angular 组件的生命周期钩子"></a>8.2 Angular 组件的生命周期钩子</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/fbf2cda0-b8d1-11e9-a88b-c93a5ea3d618" alt="Hook"></p><ul><li>Angular 一共暴露了 8 个“钩子”，构造函数不算。</li><li>并没有组件或者指令会实现全部钩子。</li><li>绿色的 1357 会被执行很多次，2468 只会执行一次。</li><li>Content 和 View 相关的 4 个钩子只对组件有效，指令上不能使用。因为在新版本的 Angular 里面，指令不能带有 HTML 模板。指令没有自己的 UI，当然就没有 View 和 Content 相关的“钩子”了。</li><li>请不要在生命周期钩子里面实现复杂的业务逻辑，尤其是那 4 个会被反复执行的钩子，否则一定会造成界面卡顿。</li><li>对于 @Input 型的属性，在构造函数里面是取不到值的，在 ngOnInit 里面才有值。</li><li>在 ngAfterViewChecked 这个钩子里面不可以再修改组件内部被绑定的值，否则会抛出异常。</li></ul><p><strong>特别注意：对于业务开发者来说，一般只用到 ngOnInit 这个钩子，其它几个钩子在日常业务开发中是用不到的。</strong></p><h3 id="8-3-OnPush-策略"><a href="#8-3-OnPush-策略" class="headerlink" title="8.3 OnPush 策略"></a>8.3 OnPush 策略</h3><p>在真实的业务系统中，组件会构成 Tree 型结构，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/2634fac0-b8d2-11e9-8b62-c350e3466c22" alt=""></p><p>当某个叶子组件上的数据模型发生变化之后，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/2e36b150-b8d2-11e9-a88b-c93a5ea3d618" alt=""></p><p><strong>这时候，Angular 将会从根组件开始，遍历整颗组件树，把所有组件上的 ngDoCheck() 方法都调用一遍：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3df57450-b8d2-11e9-ba33-51636d56aead" alt=""></p><p><strong>请注意，默认情况下，无论哪个叶子组件上发生了变化，都会把整个组件树遍历一遍。</strong>如果组件树非常庞大，嵌套非常深，很明显会有效率问题。在绝大部分时间里面，并不会出现每个组件都需要刷新的情况，根本没有必要每次都去全部遍历。所以 Angular 提供了一种叫做 OnPush 的策略，只要把某个组件上的检测策略设置为 OnPush，就可以忽略整个子树了，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/582abe70-b8d2-11e9-a88b-c93a5ea3d618" alt=""></p><p>很明显，使用了 OnPush 策略之后，检查效率将会获得大幅度的提升，尤其在组件的数量非常多的情况下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/5f786740-b8d2-11e9-ba33-51636d56aead" alt=""></p><p>Angular 内置的两种变更检测策略：</p><ul><li>Default：无论哪个组件发生了变化，从根组件开始全局遍历，调用每个组件上的 ngDoCheck() 钩子。</li><li>OnPush：<strong>只有当组件的 @Input 属性发生变化的时候才调用本组件的 ngDoCheck() 钩子。</strong></li></ul><p>有一些开发者建议 Angular 项目组把 OnPush 作为默认策略，但是目前还没有得到官方支持，或许在未来的某个版本里面会进行修改。</p><h3 id="8-4-了解一点点原理"><a href="#8-4-了解一点点原理" class="headerlink" title="8.4 了解一点点原理"></a>8.4 了解一点点原理</h3><p>如果你不想看到扯原理的内容，可以跳过这一小段。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/78b3c100-b8d2-11e9-8b62-c350e3466c22" alt=""></p><p>大家都知道，AngularJS 是第一个把“双向数据绑定”这种设计带到前端领域来的框架，“双向数据绑定”最典型的场景就是对表单的处理。</p><p>双向数据绑定的目标很明确：数据模型发生变化之后，界面可以自动刷新；用户修改了界面上的内容之后，数据模型也会发生自动修改。</p><p>很明显，这里需要一种同步机制，在 Angular 里面这种同步机制叫做“变更检测”。</p><p>在老版本 AgnularJS 里面，变更检测机制实现得不太完善，经常会出现检测不到变更的情况，所以才有了让大家很厌烦的 $apply() 调用。</p><p>在新版本的 Angular 里面不再存在这个问题了，因为新版本的 Angular 使用 Zone.js 这个库，它会把所有可能导致数据模型发生变更的情况全部拦截掉，从而在数据发生变化的时候去通知 Angular 进行刷新。</p><p>有一些朋友可能会觉得奇怪，Zone.js 怎么这么牛叉？它内部到底是怎么玩的呢？</p><p>实际上要做到这一点并不复杂，因为在浏览器环境下，有可能导致数据模型发生变化的情况只有 3 种典型的回调：</p><ul><li>事件回调：鼠标、键盘、触摸</li><li>定时器回调：setTimeout 和 setInterval</li><li>Ajax 回调</li></ul><p>Zone.js 覆盖了所有原生实现，当开发者在调用这些函数的时候，并不是调用的原生方法，而是调用的 Zone.js 自己的实现，因此 Zone.js 就可以做一些自己的处理了。</p><p>也就是说 Zone.js 会负责通知 Angular：“数据模型发生变化了”！然后 Angular 的 ChangeDetector 就会在下一次 dirty check 的周期里面来检查哪些组件上的值发生了变化，然后做出相应的处理。</p><p>如果你的好奇心特别旺盛，这里有一篇非常长的文章，大约二十多页，详细解释了这一话题：</p><blockquote><p><a href="https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html" target="_blank" rel="noopener">https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html</a></p></blockquote><h2 id="9-组件-动效"><a href="#9-组件-动效" class="headerlink" title="9.[组件]动效"></a>9.[组件]动效</h2><h3 id="9-1-非常重要的说明"><a href="#9-1-非常重要的说明" class="headerlink" title="9.1 非常重要的说明"></a>9.1 非常重要的说明</h3><p>Angular 默认的动画模块使用的是 Web Animations 规范，这个规范目前处于 Editor’s Draft 状态（2017-09-22），详情请看这里：</p><blockquote><p><a href="https://w3c.github.io/web-animations/" target="_blank" rel="noopener">https://w3c.github.io/web-animations/</a></p></blockquote><p>目前，各大浏览器厂商对 Web Animations 规范的支持并不好，请看下图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/de64ed30-b8d2-11e9-ba33-51636d56aead" alt=""></p><p>（图片来自：<a href="http://caniuse.com/#feat=web-animation）" target="_blank" rel="noopener">http://caniuse.com/#feat=web-animation）</a></p><p>Web Animations 这套新的规范在 FireFox、Chrome、Opera 里面得到了完整的支持，而其它所有浏览器内核几乎都完全不支持，所以请慎重选择。我的建议是，请优先使用 CSS3 规范里面的 anmimation 方案：</p><blockquote><p><a href="https://www.w3schools.com/css/css3_animations.asp" target="_blank" rel="noopener">https://www.w3schools.com/css/css3_animations.asp</a></p></blockquote><h3 id="9-2-用法示范"><a href="#9-2-用法示范" class="headerlink" title="9.2 用法示范"></a>9.2 用法示范</h3><p>第一步，导入动画模块：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/192ab3f0-b8d3-11e9-ba33-51636d56aead" alt=""></p><p>第二步，编写动效：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/20660d40-b8d3-11e9-a194-19c3d4002b01" alt=""></p><p>flyIn 是这个动效的名称，后面我面就可以在组件里面引用 flynIn 这个名字了。</p><p>动效整体上是由“状态”和“转场”两个部分构成的：</p><ul><li>以上代码里面的星号（<em>）表示“不可见状态”，void 表示任意状态。这是两种内置的状态，</em>=&gt;void 表示是进场动画，而 void=&gt;* 表示离场动画。当然你也可以定义自己的状态名称，注意不要和内置的状态名称发生冲突。</li><li>keyframes 里面的内容是关键帧的定义，语法和 CSS3 里面定义动画的方式非常类似。</li></ul><p>第三步，在组件里面使用 flyIn 这个动效：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/68b1be00-b8d3-11e9-a194-19c3d4002b01" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/70e61d50-b8d3-11e9-a194-19c3d4002b01" alt=""></p><p>这个例子完整的代码在这里：</p><blockquote><p><a href="https://gitee.com/learn-angular-series/learn-component" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-component</a></p></blockquote><p>代码在 animation 分支上面，运行起来你可以看到这个效果界面：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/8c2b9ef0-b8d3-11e9-a88b-c93a5ea3d618" alt=""></p><h3 id="9-3-小结"><a href="#9-3-小结" class="headerlink" title="9.3 小结"></a>9.3 小结</h3><p>Angular 官方的动效文档在这里：</p><blockquote><p><a href="https://angular.io/guide/animations" target="_blank" rel="noopener">https://angular.io/guide/animations</a></p></blockquote><p>如果你不愿意自己编写动效，推荐这个开源项目，它和 Angular 之间结合得比较紧：</p><blockquote><p><a href="https://github.com/jiayihu/ng-animate" target="_blank" rel="noopener">https://github.com/jiayihu/ng-animate</a></p></blockquote><h2 id="10-组件-动态组件"><a href="#10-组件-动态组件" class="headerlink" title="10.[组件]动态组件"></a>10.[组件]动态组件</h2><p>我们可以通过标签的方式使用组件，也可以通过代码的方式来动态创建组件。动态创建组件的过程是通过 ViewContainerRef 和 ComponentFactoryResolver 这两个工具类来配合完成的。</p><p>我们可以定义一个这样的模板：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">#dyncomp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在组件定义里面需要首先 import 需要用到的工具类：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span>ViewChild<span class="token punctuation">,</span>ViewContainerRef<span class="token punctuation">,</span>ComponentFactoryResolver<span class="token punctuation">,</span> ComponentRef <span class="token punctuation">}</span> <span class="token keyword">from</span>  <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>组件内部这样写：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//这里引用模板里面定义的 dyncomp 容器标签  </span>@<span class="token function">ViewChild</span><span class="token punctuation">(</span><span class="token string">"dyncomp"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>read<span class="token punctuation">:</span>ViewContainerRef<span class="token punctuation">}</span><span class="token punctuation">)</span> dyncomp<span class="token punctuation">:</span>ViewContainerRef<span class="token punctuation">;</span> comp1<span class="token punctuation">:</span>ComponentRef<span class="token operator">&lt;</span>Child11Component<span class="token operator">></span><span class="token punctuation">;</span> comp2<span class="token punctuation">:</span>ComponentRef<span class="token operator">&lt;</span>Child11Component<span class="token operator">></span><span class="token punctuation">;</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> resolver<span class="token punctuation">:</span>ComponentFactoryResolver<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就可以在 ngAfterContentInit 这个钩子里面用代码来动态创建组件了：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token function">ngAfterContentInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">const</span> childComp<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolver<span class="token punctuation">.</span><span class="token function">resolveComponentFactory</span><span class="token punctuation">(</span>Child11Component<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>comp1<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>dyncomp<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>childComp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于创建出来的 comp1 这个组件，可以通过代码直接访问它的 public 型属性，也可以通过代码来 subscribe（订阅）comp1 上面发出来的事件，就像这样：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>comp1<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"父层设置的新标题"</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>comp1<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>btnClick<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--->"</span><span class="token operator">+</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于用代码动态创建出来的组件，我们可以通过调用 destory() 方法来手动销毁：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token function">destoryChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>comp1<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>comp2<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码运行起来的效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/fb944800-b8d3-11e9-a88b-c93a5ea3d618" alt=""></p><p><strong>注意：用代码动态创建组件这种方式在一般的业务开发里面不常用，而且可能存在一些隐藏的坑，如果你一定要用，请小心避雷。</strong></p><h2 id="11-组件-ShadowDOM"><a href="#11-组件-ShadowDOM" class="headerlink" title="11.[组件]ShadowDOM"></a>11.[组件]ShadowDOM</h2><p>根据 Angular 官方的说法，Angular 组件的设计灵感来源于 Web Component，在 Web Component 里面，ShadowDOM 是重要的组成部分。在底层，Angular 渲染组件的方式有 3 种：</p><ul><li>Native：采用 ShadowDOM 的模式来进行渲染。</li><li>Emulated：模拟模式。对于不能支持 ShadowDOM 模式的浏览器，Angular 在底层会采用模拟的方式来渲染组件，<strong>这是 Angular 默认的渲染模式</strong>。</li><li>None：不采用任何渲染模式。直接把组件的 HTML 结构和 CSS 样式插入到 DOM 流里面，这种方式很容易导致组件互相之间出现 CSS 命名污染的问题。</li></ul><p>在定义组件的时候，可以通过 encapsulation 配置项手动指定组件的渲染模式，关键代码如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   selector<span class="token punctuation">:</span> <span class="token string">'emulate-mode'</span><span class="token punctuation">,</span>   encapsulation<span class="token punctuation">:</span>ViewEncapsulation<span class="token punctuation">.</span>Emulated<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//默认模式 </span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./emulate-mode.component.html'</span><span class="token punctuation">,</span>   styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./emulate-mode.component.scss'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请尝试修改 encapsulation 这个配置项来测试不同的效果。</p><p><strong>注意：Angular 官方在 2018 年的 NGConnet 大会上表示，在将来的某个版本中，会在内核里面把 ShadowDOM 设置为默认模式。因为这一变更会在内核层面进行，所以业务开发者不用改代码。</strong></p><p>本节案例运行起来的效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/af07c3d0-b8d4-11e9-a88b-c93a5ea3d618" alt=""></p><p>注意点：</p><ul><li>ShadowDOM 模式的封装性更好，运行效率也更高。</li><li>ShadowDOM 在 W3C 的状态是 Working Draft（2017-09-22），如果你想深入研究参考以下链接：<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM</a>、<a href="https://www.w3.org/TR/shadow-dom/" target="_blank" rel="noopener">https://www.w3.org/TR/shadow-dom/</a>。</li><li>ShadowDOM 目前只有 Chrome 和 Opera 支持得非常好，其它浏览器都非常糟糕：<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/e8043c40-b8d4-11e9-ba33-51636d56aead" alt=""></li><li>一般来说，你不需要自己手动指定组件的渲染模式，除非你自己知道在做什么。</li></ul><h2 id="12-组件-内容投影"><a href="#12-组件-内容投影" class="headerlink" title="12.[组件]内容投影"></a>12.[组件]内容投影</h2><h3 id="12-1-最简单的组件模板"><a href="#12-1-最简单的组件模板" class="headerlink" title="12.1 最简单的组件模板"></a>12.1 最简单的组件模板</h3><p>你编写了一个这样的面板组件：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/0e2a0350-b8d5-11e9-ba33-51636d56aead" alt=""></p><p>组件对应的模板代码是这样的：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      内容  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      底部  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-2-投影一块内容"><a href="#12-2-投影一块内容" class="headerlink" title="12.2 投影一块内容"></a>12.2 投影一块内容</h3><p>但是，你希望把面板里面的标题设计成可变的，让调用者能把这个标题传进来，而不是直接写死。这时候“内容投影”机制就可以派上用场了，我们可以这样来编写组件的模板：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      内容  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      底部  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意以上模板里面的 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code>，你看可以把它想象成一个占位符，我们用它来先占住一块空间，等使用方把参数传递进来之后，再用真实的内容来替换它。使用方可以这样来传递参数：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这是父层投影进来的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-child-two</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行起来的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/57848c00-b8d5-11e9-a88b-c93a5ea3d618" alt=""></p><p>可以看到，标题的部分是由使用方从外部传递进来的。</p><h3 id="12-3-投影多块内容"><a href="#12-3-投影多块内容" class="headerlink" title="12.3 投影多块内容"></a>12.3 投影多块内容</h3><p>接着，问题又来了，你不仅希望面板的标题部分是动态的，你还希望面板的主体区域和底部区域全部都是动态的，应该怎么实现呢？</p><p>你可以这样编写组件的模板：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.my-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用方可以这样来使用你所编写的组件：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这是父层投影进来的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>利用CSS选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是底部内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-child-two</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行起来的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/7fd1c6f0-b8d5-11e9-ba33-51636d56aead" alt=""></p><p>你可能已经猜出来了，<code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 里面的那个 select 参数，其作用和 CSS 选择器非常类似。</p><p>这种投影多块内容的方式叫“多插槽模式”（multi-slot），你可以把 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 想形成一个一个的插槽，内容会被插入到这些插槽里面。</p><h3 id="12-4-投影一个复杂的组件"><a href="#12-4-投影一个复杂的组件" class="headerlink" title="12.4 投影一个复杂的组件"></a>12.4 投影一个复杂的组件</h3><p>到这里还没完，你不仅仅想投影简单的 HTML 标签到子层组件里面，你还希望把自己编写的一个组件投影进去，那又应该怎么办呢？</p><p>请看：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test-child-three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方可以这样来使用这个组件：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这是父层投影进来的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-child-three</span> <span class="token attr-name">(sayhello)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-child-three</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是底部内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-child-two</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行起来的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d21bc190-b8d5-11e9-ba33-51636d56aead" alt=""></p><p>请注意 <code>&lt;ng-content select="test-child-three"&gt;&lt;/ng-content&gt;</code> 里面的内容，你把 select 属性设置成了子组件的名称。</p><p>同时，对于被投影的组件 <code>&lt;test-child-three&gt;&lt;/test-child-three&gt;</code> 来说，我们同样可以利用小圆括号的方式来进行事件绑定，就像上面例子里的 <code>(sayhello)="doSomething()"</code> 这样。</p><h3 id="12-5-内容投影这个特性存在的意义"><a href="#12-5-内容投影这个特性存在的意义" class="headerlink" title="12.5 内容投影这个特性存在的意义"></a>12.5 内容投影这个特性存在的意义</h3><p>如果没有“内容投影”特性我们也能活得很好，那么它就没有存在的必要了，而事实并非如此，如果没有“内容投影”，有些事情我们就没法做了，典型的有两类：</p><ul><li>组件标签不能嵌套使用。</li><li>不能优雅地包装原生的 HTML 标签。</li></ul><p>依次解释如下：</p><p>比如你自己编写了两个组件 my-comp-1 和 my-comp-2，如果没有内容投影，这两个组件就没办法嵌套使用，比如你想这样用就不行：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp-1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp-2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp-2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp-1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为没有“内容投影”机制，my-comp-1 无法感知到 my-comp-2 的存在，也无法和它进行交互。这明显有违 HTML 设计的初衷，因为 HTML 的本质是一种 XML 格式，标签能嵌套是最基本的特性，原生的 HTML 本身就有很多嵌套的情况：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>神族<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>人族<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>虫族<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在真实的业务开发里面，另一个典型的嵌套组件就是 Tab 页，以下代码是很常见的：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tab</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pane</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>第一个标签页<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pane</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>第二个标签页<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pane</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>第三个标签页<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tab</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有内容投影机制，想要这样嵌套地使用自定义标签也是不可能的。</p><p>内容投影存在的第二个意义与组件的封装有关。</p><p>虽然 Angular 提供了 @Component 装饰器让开发者可以自定义标签，但是请不要忘记，自定义标签毕竟与 HTML 原生标签不一样，原生 HTML 标签上面默认带有很多属性、事件，而你自己定义标签是没有的。原生 HTML 标签上面暴露的属性和事件列表请参见 W3C 的规范：</p><blockquote><p><a href="https://www.w3schools.com/tags/ref_attributes.asp" target="_blank" rel="noopener">https://www.w3schools.com/tags/ref_attributes.asp</a></p></blockquote><p>从宏观的角度看，所有的自定义标签都只不过是一层“虚拟的壳子”，浏览器并不认识自定义标签，真正渲染出来的还是 div、form、input 之类的原生标签。所以，自定义标签只不过是一层逻辑上的抽象和包装，让人类更容易理解和组织自己的代码而已。</p><p>既然如此，自定义标签和HTML原生标签之间的关系是什么呢？本质上说，这是“装饰模式”的一种应用，而内容投影存在的意义就是可以让这个“装饰”的过程做得更加省力、更加优雅一些。</p><h3 id="12-6-接下来"><a href="#12-6-接下来" class="headerlink" title="12.6 接下来"></a>12.6 接下来</h3><p>我们已经学会了内容投影最基本的用法，但是故事并没有结束，接下来的问题又来了：</p><ul><li>如何访问投影进来的复杂组件？比如：如何访问被监听组件上的 public 属性？如何监听被投影组件上的事件？接下来的小节就来解决这个问题。</li><li>如何访问投影进来的 HTML 元素？比如：如何给被投影进来的 HTML 元素添加 CSS 样式？这个话题反而比访问被投影组件要复杂一些，在讲指令的那一个小节里面给例子来描述。</li></ul><h2 id="13-ContentChild-和-ContentC"><a href="#13-ContentChild-和-ContentC" class="headerlink" title="13.@ContentChild 和 @ContentC"></a>13.@ContentChild 和 @ContentC</h2><h3 id="13-1-ContentChild"><a href="#13-1-ContentChild" class="headerlink" title="13.1 @ContentChild"></a>13.1 @ContentChild</h3><p>我们可以利用 @ContentChild 这个装饰器来操控被投影进来的组件。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-one</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-one</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> ContentChild<span class="token punctuation">,</span> ContentChildren<span class="token punctuation">,</span> ElementRef<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> QueryList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注解的写法</span>@<span class="token function">ContentChild</span><span class="token punctuation">(</span>ChildTwoComponent<span class="token punctuation">)</span>childTwo<span class="token punctuation">:</span>ChildTwoComponent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在 ngAfterContentInit 钩子里面访问被投影进来的组件</span><span class="token function">ngAfterContentInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里还可以访问 this.childTwo的public 型方法，监听 this.childTwo 所派发出来的事件</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-ContentChildren"><a href="#13-2-ContentChildren" class="headerlink" title="13.2 @ContentChildren"></a>13.2 @ContentChildren</h3><p>从名字可以看出来，@ContentChildren 是一个复数形式。当被投影进来的是一个组件列表的时候，我们可以用 @ContentChildren 来进行操控。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-one</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-two</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-one</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> ContentChild<span class="token punctuation">,</span> ContentChildren<span class="token punctuation">,</span> ElementRef<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> QueryList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这时候不是单个组件，是一个列表了 QueryList</span>@<span class="token function">ContentChildren</span><span class="token punctuation">(</span>ChildTwoComponent<span class="token punctuation">)</span> childrenTwo<span class="token punctuation">:</span>QueryList<span class="token operator">&lt;</span>ChildTwoComponent<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历列表</span><span class="token function">ngAfterContentInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>childrenTwo<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-ViewChild-与-ViewChildren"><a href="#14-ViewChild-与-ViewChildren" class="headerlink" title="14.@ViewChild 与 @ViewChildren"></a>14.@ViewChild 与 @ViewChildren</h2><h3 id="14-1-ViewChild"><a href="#14-1-ViewChild" class="headerlink" title="14.1 @ViewChild"></a>14.1 @ViewChild</h3><p>我们可以利用 @ViewChild 这个装饰器来操控直属的子组件。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-one</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> ViewChild<span class="token punctuation">,</span> ViewChildren<span class="token punctuation">,</span> QueryList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">ViewChild</span><span class="token punctuation">(</span>ChildOneComponent<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>childOne<span class="token punctuation">:</span>ChildOneComponent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在 ngAfterViewInit 这个钩子里面可以直接访问子组件</span><span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childOne<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用代码的方式订阅子组件上的事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>childOne<span class="token punctuation">.</span>helloEvent<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childOne<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：8.0 这里有一个 breaking change，@ViewChild 这里提供了第二个参数，增强了一些功能。这里有详细的描述：<a href="https://angular.io/api/core/ViewChild" target="_blank" rel="noopener">https://angular.io/api/core/ViewChild</a>。</strong></p><h3 id="14-2-ViewChildren"><a href="#14-2-ViewChildren" class="headerlink" title="14.2 @ViewChildren"></a>14.2 @ViewChildren</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-one</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-one</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-one</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-one</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-one</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> ViewChild<span class="token punctuation">,</span> ViewChildren<span class="token punctuation">,</span> QueryList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">ViewChildren</span><span class="token punctuation">(</span>ChildOneComponent<span class="token punctuation">)</span>children<span class="token punctuation">:</span>QueryList<span class="token operator">&lt;</span>ChildOneComponent<span class="token operator">></span><span class="token punctuation">;</span><span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(item);</span>        <span class="token comment" spellcheck="true">//动态监听子组件的事件</span>        item<span class="token punctuation">.</span>helloEvent<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-与Polymer-封装组件的方式简单对比"><a href="#15-与Polymer-封装组件的方式简单对比" class="headerlink" title="15.与Polymer 封装组件的方式简单对比"></a>15.与Polymer 封装组件的方式简单对比</h2><p>一些开发者认为 Angular 的组件设计不如 Polymer 那种直接继承原生 HTMLElement 的方式优雅。</p><p>以下是 Polymer 组件的定义方式：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3e6533d0-b8d7-11e9-a88b-c93a5ea3d618" alt=""></p><p>以下是 Polymer 的根类 Polymer.Element 的源代码：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/4d5de7b0-b8d7-11e9-a194-19c3d4002b01" alt=""></p><p>可以看到，在 Polymer 中，开发者自定义标签的地位与浏览器原生标签完全是平等的，属性、事件、行为，都是平等的，Polymer 组件的渲染由浏览器内核直接完成。</p><p>Polymer 的这种封装方式和目前市面上的大部分前端框架都不一样，Polymer 直接继承原生 HTML 元素，而其它大部分框架都只是在“包装”、“装饰”原生 HTML 元素，这是两种完全不同的设计哲学。</p><blockquote><p><a href="https://www.polymer-project.org/" target="_blank" rel="noopener">https://www.polymer-project.org/</a></p></blockquote><p>目前，使用 Polymer 最著名的网站是 Google 自家的 YouTube：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d088b390-b8d7-11e9-a88b-c93a5ea3d618" alt=""></p><h2 id="16-封装并发布你自己的组件库"><a href="#16-封装并发布你自己的组件库" class="headerlink" title="16.封装并发布你自己的组件库"></a>16.封装并发布你自己的组件库</h2><h3 id="16-1-市面上可用的-Angular-组件库介绍"><a href="#16-1-市面上可用的-Angular-组件库介绍" class="headerlink" title="16.1 市面上可用的 Angular 组件库介绍"></a>16.1 市面上可用的 Angular 组件库介绍</h3><p>开源免费的组件库：</p><ul><li>PrimeNG：<a href="http://www.primefaces.org/primeng" target="_blank" rel="noopener">http://www.primefaces.org/primeng</a>，这款组件库做得比较早，代码质量比较高。Telerik 这家公司专门做各种 UI 组件库，jQuery/Flex/Angular，全部都有。</li><li>NG-Zorro：<a href="https://github.com/NG-ZORRO/ng-zorro-antd" target="_blank" rel="noopener">https://github.com/NG-ZORRO/ng-zorro-antd</a>，来自阿里云团队，外观是 AntDesign 风格。</li><li>Clarity：<a href="https://vmware.github.io/clarity/" target="_blank" rel="noopener">https://vmware.github.io/clarity/</a>，来自 Vmware 团队。</li><li>Angular-Material：<a href="https://github.com/angular/material2" target="_blank" rel="noopener">https://github.com/angular/material2</a>，Angular 官方提供的组件库。</li><li>Element-Angular：<a href="https://element-angular.faas.ele.me/guide/install" target="_blank" rel="noopener">https://element-angular.faas.ele.me/guide/install</a>，作者来自饿了么团队。</li><li>Jigsaw（七巧板）：<a href="https://github.com/rdkmaster/jigsaw" target="_blank" rel="noopener">https://github.com/rdkmaster/jigsaw</a>，来自 ZTE 中兴通讯。组件数量比较多，外观不够漂亮。</li><li>Ionic：<a href="https://ionic.io/" target="_blank" rel="noopener">https://ionic.io/</a>，专门为移动端打造的组件库，自带周边工具，生态很完善。</li></ul><p>收费版组件库：</p><ul><li>来自 Telerik 的 KendoUI for Angular：<a href="http://www.telerik.com/kendo-angular-ui/" target="_blank" rel="noopener">http://www.telerik.com/kendo-angular-ui/</a>，Telerik 的这套组件库的特色是组件的功能比较强大，尤其是 Grid，做得非常强大。</li></ul><h3 id="16-2-如何在项目里面引入开源组件库"><a href="#16-2-如何在项目里面引入开源组件库" class="headerlink" title="16.2 如何在项目里面引入开源组件库"></a>16.2 如何在项目里面引入开源组件库</h3><p>以 PrimeNG 为例，首先在 package.json 里面定义好依赖：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/7fbe5ea0-b8d8-11e9-8b62-c350e3466c22" alt=""></p><p>然后打开终端用 cnpm install 安装 PrimeNG 到你本地，在你自己的业务模块里面 import 需要用到的组件模块就好了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/78bba180-b8d8-11e9-8b62-c350e3466c22" alt=""></p><p>从 Angular 6.0 开始，@angular/cli 增加了一个 <code>ng add</code> 命令，所有支持 Schematics 语法的组件库都可以通过这个命令自动整合，并且在创建你自己组件的时候可以指定需要哪种风格，详细的例子和解释请参考“1-2Schematics 与代码生成器”这一小节。</p><h3 id="16-3-如何把你的组件库发布到-npm-上去"><a href="#16-3-如何把你的组件库发布到-npm-上去" class="headerlink" title="16.3 如何把你的组件库发布到 npm 上去"></a>16.3 如何把你的组件库发布到 npm 上去</h3><p>有朋友问过一个问题，他觉得 npm 很神奇，比如当我们在终端里面输入以下命令的时候：</p><pre><code>npm install -g @angular/cli</code></pre><p>npm 就会自动去找到@angular/cli 并安装，看起来很神奇的样子。</p><p>其实，背后的处理过程很简单，npm 官方有一个固定的 registry url，你可以把它的作用想象成一个 App Store，全球所有开发者编写的 node 模块都需要发布上去，然后其他人才能安装使用。</p><p>如果你开发了一个很强大的 Angular 组件库，希望发布到 node 上面让其他人也能使用，应该怎么做呢？简略的处理步骤如下：</p><ul><li>第 1 步：用 npm init 初始化项目（只要你的项目里面按照 npm 的规范编写一份 package.json 文件就可以了，不一定用 npm init 初始化）。</li><li>第 2 步：编写你自己的代码。</li><li>第 3 步：到 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a> 去注册一个账号。</li><li>第 4 步：用 npm publish 把项目 push 上去。</li></ul><p>publish 之后，全球开发者都可以通过名字查找并安装你这个模块了。</p><h3 id="16-4一些小小的经验"><a href="#16-4一些小小的经验" class="headerlink" title="16.4一些小小的经验"></a>16.4一些小小的经验</h3><p>两个常见的误区：</p><ul><li>第一个误区是：开源组件可以满足你的所有需求。我可以负责任地告诉你，这是不可能的！开源组件库都是通用型的组件，并不会针对任何特定的行业或者领域进行设计。无论选择哪一款开源组件库，组件的外观 CSS 你总要重新写一套的吧？组件里面缺的那些功能你总得自己去写吧？组件里面的那些 Bug 你总得自己去改掉吧？所以，千万不要幻想开源组件能帮你解决所有问题，二次开发是必然的。</li><li>第二个误区是：开发组件库很简单，分分钟可以搞定。在 jQuery 时代，有一款功能极其强大树组件叫 <a href="http://www.treejs.cn/v3/main.php#_zTreeInfo" target="_blank" rel="noopener">zTree</a>。你能想到的那些功能 zTree 都实现了，而且运行效率特别高。但是你要知道，zTree 的作者已经花了超过 5 年的时间来维护这个组件。维护一个组件尚且如此，何况要长期维护一个庞大的库？所以，做好一个组件库并不像有些人想象的那么轻松，这件事是需要花钱、花时间的。做开源，最让使用者蛋疼的不是功能够不够强大，而是开发者突然弃坑，这也是很多企业宁愿花钱自己开发组件库的原因。所以，如果你只是单兵作战，最好选一款现有的开源库，在此基础上继续开发。强烈建议你只做一个组件，就像 zTree 的作者那样，把一个组件做好、做透，并且长期维护下去。这比搞一个庞大的组件库，每个组件做得都像个玩具，然后突然弃坑要好很多。</li></ul><h2 id="17-指令简介"><a href="#17-指令简介" class="headerlink" title="17.指令简介"></a>17.指令简介</h2><h3 id="17-1-组件与指令之间的关系"><a href="#17-1-组件与指令之间的关系" class="headerlink" title="17.1 组件与指令之间的关系"></a>17.1 组件与指令之间的关系</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/03315710-b8d9-11e9-a88b-c93a5ea3d618" alt=""></p><p>再看一下核心源代码里面的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/0b879640-b8d9-11e9-a194-19c3d4002b01" alt=""></p><p>根据 Angular 官方文档的描述，Angular 里面有 3 种类类型的指令：</p><ul><li>Component 是 Directive 的子接口，是一种特殊的指令，Component 可以带有 HTML 模板，Directive 不能有模板。</li><li>属性型指令：用来修改 DOM 元素的外观和行为，但是不会改变 DOM 结构，Angular 内置指令里面典型的属性型指令有 ngClass、ngStyle。如果你打算封装自己的组件库，属性型指令是必备的内容。</li><li>结构型指令：可以修改 DOM 结构，内置的常用结构型指令有 <em>ngFor、</em>ngIf 和 NgSwitch。由于结构型指令会修改 DOM 结构，所以同一个 HTML 标签上面不能同时使用多个结构型指令，否则大家都来改 DOM 结构，到底听谁的呢？如果要在同一个 HTML 元素上面使用多个结构性指令，可以考虑加一层空的元素来嵌套，比如在外面套一层空的 <code>&lt;ng-container&gt;&lt;/ng-container&gt;</code>，或者套一层空的 <code>&lt;div&gt;</code>。</li></ul><h3 id="17-2-有了组件为什么还要指令？"><a href="#17-2-有了组件为什么还要指令？" class="headerlink" title="17.2 有了组件为什么还要指令？"></a>17.2 有了组件为什么还要指令？</h3><p>请注意：即使你认真、仔细地看完以上内容，你依然会感到非常茫然。因为有一个最根本的问题在所有文档里面都没有给出明确的解释，这个问题也是很多开发者经常会问的，那就是：<strong>既然有了组件（Component），为什么还要指令（Directive）？</strong></p><p>我们知道，在很多的 UI 框架里面，并没有指令的概念，它们的基类都是从 Component 开始的。比如：</p><ul><li>Swing 里面基类名字就叫 Component，没有指令的概念</li><li>ExtJS 里面基类是 Ext.Component，没有指令的概念</li><li>Flex 里面基类名字叫 UIComponent，没有指令的概念</li><li>React 里面的基类名字叫 React.Component，没有指令的概念</li></ul><p>以下是 Swing 的类结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/9c1a8af0-b8d9-11e9-a194-19c3d4002b01" alt=""></p><p>以下是 ExtJS 3.2 的 UI 组件继承结构图局部，请注意 Ext.Component 类的位置：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/a953db90-b8d9-11e9-8b62-c350e3466c22" alt=""></p><p>下面是整体缩略图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/b0ecbe30-b8d9-11e9-8b62-c350e3466c22" alt=""></p><p>以下是Adobe Flex 3的类结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/b7bb4bf0-b8d9-11e9-a194-19c3d4002b01" alt=""></p><p>上面这些框架都走的组件化的路子，Swing 和 ExtJS 完全是“代码流”，所有 UI 都通过代码来创建；而 Flex 和 React 是“标签流”，也就通过标签的方式来创建 UI。</p><p>但是，所有这些框架都没有“指令”这个概念，为什么 Angular 里面一定要引入“指令”这个概念呢？</p><p><strong>根本原因是：我们需要用指令来增强标签的功能，包括 HTML 原生标签和你自己自定义的标签。</strong></p><p>举例来说：<code>&lt;div&gt;</code> 是一个常用的原生 HTML 标签，但是请不要小看它，它上面实际上有非常多的属性，这些属性都是 W3C 规范规定好的。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/f63d5760-b8d9-11e9-ba33-51636d56aead" alt=""></p><p>还能支持以下事件属性：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/fffc0030-b8d9-11e9-a194-19c3d4002b01" alt=""></p><p>完整的列表请查看 W3C 规范：</p><blockquote><p><a href="https://www.w3schools.com/tags/ref_standardattributes.asp" target="_blank" rel="noopener">https://www.w3schools.com/tags/ref_standardattributes.asp</a></p></blockquote><p><strong>但是，这些内置属性还不够用，你想给原生的 HTML 标签再扩展一些属性。比方说：你想给 <code>&lt;div&gt;</code> 标签增加一个自定义的属性叫做 my-high-light，当鼠标进入 div 内部时，div 的背景就会高亮显示，可以这样使用 <code>&lt;div my-high-light&gt;</code>。这时候，没有指令机制就无法实现了。</strong></p><h2 id="18-自定义指令"><a href="#18-自定义指令" class="headerlink" title="18.自定义指令"></a>18.自定义指令</h2><p>这是官方文档里面的一个例子，运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/66e6e4e0-b8da-11e9-a194-19c3d4002b01" alt=""></p><p>核心代码如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> ElementRef<span class="token punctuation">,</span>HostListener<span class="token punctuation">,</span>HostBinding<span class="token punctuation">,</span>Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Directive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'[my-high-light]'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyHighLightDirective</span> <span class="token punctuation">{</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   highlightColor<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> el<span class="token punctuation">:</span> ElementRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  @<span class="token function">HostListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">)</span> <span class="token function">onMouseEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>highlightColor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @<span class="token function">HostListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">)</span> <span class="token function">onMouseLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">highlight</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nativeElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上指令的用法如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">my-high-light</span> <span class="token attr-name">highlightColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff3300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容高亮显示！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="18-1-自定义结构型指令"><a href="#18-1-自定义结构型指令" class="headerlink" title="18.1 自定义结构型指令"></a>18.1 自定义结构型指令</h3><p>这个例子会动态创建 3 个组件，每个延迟 500 毫秒，运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/8cc76590-b8da-11e9-ba33-51636d56aead" alt=""></p><p>指令代码如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> TemplateRef<span class="token punctuation">,</span> ViewContainerRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Directive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    selector<span class="token punctuation">:</span> <span class="token string">'[appDelay]'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DelayDirective</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>        <span class="token keyword">private</span> templateRef<span class="token punctuation">:</span> TemplateRef<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">,</span>        <span class="token keyword">private</span> viewContainerRef<span class="token punctuation">:</span> ViewContainerRef    <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">set</span> <span class="token function">appDelay</span><span class="token punctuation">(</span>time<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>viewContainerRef<span class="token punctuation">.</span><span class="token function">createEmbeddedView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>templateRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指令的用法核心代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let item of [1,2,3]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>card</span> <span class="token attr-name">*appDelay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500 * item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        第 {{item}} 张卡片    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>card</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>你应该注意到了，结构性指令在使用的时候前面都会带上星号，即使是你自定义的结构性指令，也是一样的。</strong></p><h3 id="18-2-小结"><a href="#18-2-小结" class="headerlink" title="18.2 小结"></a>18.2 小结</h3><p>强烈建议仔细阅读官方文档里面的关于 Directive 的细节描述：</p><blockquote><p><a href="https://angular.io/guide/attribute-directives" target="_blank" rel="noopener">https://angular.io/guide/attribute-directives</a></p></blockquote><h2 id="19-直接在组件里面操作-DOM"><a href="#19-直接在组件里面操作-DOM" class="headerlink" title="19.直接在组件里面操作 DOM"></a>19.直接在组件里面操作 DOM</h2><p>有一个常见的问题：既然组件是指令的子类，那么指令里面能干的事儿组件应该都能干，我可以在指令里面直接操作 DOM 吗？</p><p>答案是肯定的。</p><p>我们来修改一下上一节里面的例子，直接在组件里面来实现背景高亮效果，关键代码如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./test.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./test.component.scss'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TestComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   highlightColor<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> containerEl<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> el<span class="token punctuation">:</span> ElementRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">ngAfterContentInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nativeElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nativeElement<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nativeElement<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nativeElement<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>containerEl<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nativeElement<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @<span class="token function">HostListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">)</span> <span class="token function">onMouseEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>highlightColor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @<span class="token function">HostListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">)</span> <span class="token function">onMouseLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">highlight</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>containerEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件的标签结构如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  鼠标移进来就会改变背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个组件的使用方式如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">highlightColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F2DEDE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，直接在组件里面操作 DOM 是可以的，但是一旦把操作 DOM 的这部分逻辑放在组件里面，就没法再在其它标签上面使用了。</p><h2 id="20-模块-NgModule"><a href="#20-模块-NgModule" class="headerlink" title="20.模块@NgModule"></a>20.模块@NgModule</h2><p>这里不想把 NgModule 的所有 API 都列在这里，那样的话，这一部分就没什么存在的意义了。关于 NgModule 的十万个为什么，官方编写了一份很长的文档来做说明：</p><blockquote><p><a href="https://angular.io/guide/ngmodule-faq" target="_blank" rel="noopener">https://angular.io/guide/ngmodule-faq</a></p></blockquote><p>但是请特别注意，如果你看完这篇简短的文章之后再去阅读官方的文档，那样你会站在一个高层级的视角去面对那些琐碎的细节，保证不会迷失方向。</p><h3 id="20-1-NgModule-的定义方式"><a href="#20-1-NgModule-的定义方式" class="headerlink" title="20.1 @NgModule 的定义方式"></a>20.1 @NgModule 的定义方式</h3><p>看一个最简单的@ NgModule 的定义：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> TestViewChildComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./test-view-child/test-view-child.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ChildOneComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./test-view-child/child-one/child-one.component'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>    AppComponent<span class="token punctuation">,</span>    TestViewChildComponent<span class="token punctuation">,</span>    ChildOneComponent  <span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    BrowserModule  <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token punctuation">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>declarations：用来放组件、指令、管道的声明。</li><li>imports：用来导入外部模块。</li><li>providers：需要使用的 Service 都放在这里。</li><li>bootstrap：定义启动组件。你可能注意到了这个配置项是一个数组，也就是说可以指定做个组件作为启动点，但是这种用法是很罕见的。</li></ul><h3 id="20-2-NgModule-的重要作用"><a href="#20-2-NgModule-的重要作用" class="headerlink" title="20.2 @NgModule 的重要作用"></a>20.2 @NgModule 的重要作用</h3><p>在 Angular 中，NgModule 有以下几个重要的作用：</p><ul><li><strong>NgModule 最根本的意义是帮助开发者组织业务代码</strong>，开发者可以利用 NgModule 把关系比较紧密的组件组织到一起，这是首要的。</li><li>NgModule 用来控制组件、指令、管道等的可见性，处于同一个 NgModule 里面的组件默认互相可见，而对于外部的组件来说，只能看到 NgModule 导出（exports）的内容，这一特性非常类似 Java 里面 package 的概念。也就是说，如果你定义的 NgModule 不 exports 任何内容，那么外部使用者即使 import 了你这个模块，也没法使用里面定义的任何内容。</li><li><strong>NgModule 是@angular/cli 打包的最小单位</strong>。打包的时候，@angular/cli 会检查所有@NgModule 和路由配置，如果你配置了异步模块，cli 会自动把模块切分成独立的 chunk（块）。这一点是和其它框架不同的，其它框架基本上都需要你自己去配置 webpack，自己定义切分 chunck 的规则；而在 Angular 里面，打包和切分的动作是@angular/cli 自动处理的，不需要你干预。当然，如果你感到不爽，也可以自己从头用 webpack 配一个环境出来，因为@angular/cli 底层也是用的 webpack。</li><li><strong>NgModule 是 Router 进行异步加载的最小单位，Router 能加载的最小单位是模块，而不是组件</strong>。当然，模块里面只放一个组件是允许的，很多组件库都是这样做的。</li></ul><h3 id="20-3-NgModule-的注意点"><a href="#20-3-NgModule-的注意点" class="headerlink" title="20.3 @NgModule 的注意点"></a>20.3 @NgModule 的注意点</h3><ul><li>每个应用至少有一个根模块，按照惯例，根模块的名字一般都叫 AppModule，如果你没有非常特别的理由，就不要随意改这个名字了，这相当于一个国际惯例。</li><li>组件、指令、管道都必须属于一个模块，而且只能属于一个模块。</li><li>NgModule 和 ES6 里面的 Module 是完全不同的两个概念。ES6 里面的模块是通过 export 和 import 来进行声明的，它们是语法层面的内容；而 NgModule 完全不是这个概念，从上面的作用列表你也能看出来。最重要的一点，目前，ES6 里面的 import 只能静态引入模块，并不能异步动态加载模块，而 NgModule 可以配合 Router 来进行异步模块加载，在后面的 介绍Router 时会有实例代码。</li><li>模块的定义方式会影响依赖注入机制：对于直接 import 的同步模块，无论你把 @Injectable 类型的组件定义在哪个模块里面，它都是全局可见的。比如：在子模块 post.module.ts 的 providers 数组里面定义了一个 PostListService，你可能会觉得这个 PostListService 只有在 post.module.ts 里面可见。而事实并非如此，PostListService 是全局可见的，就相当于一个全局单例。与此对应，如果你把 PostListService 定义到一个异步加载的模块里面，它就不是全局可见的了，因为对于异步加载进来的模块，Angular 会为它创建独立的 DI（依赖注入）上下文。所以，如果你想让 PostListService 全局可见，应该把它定义在根模块 app.module 里面。同时要特别注意，如果你希望 PostListService 是全局单例的，只能在 app.module 里面的 providers 数组里面定义一次，而不能在其它模块里面再次定义，否则就会出现多个不同的实例。关于 DI 机制更详细的描述请参见这里：<a href="https://angular.io/guide/dependency-injection" target="_blank" rel="noopener">https://angular.io/guide/dependency-injection</a>。</li></ul><h3 id="20-4-Angular-内核自身的模块结构"><a href="#20-4-Angular-内核自身的模块结构" class="headerlink" title="20.4 Angular 内核自身的模块结构"></a>20.4 Angular 内核自身的模块结构</h3><p>Angular 本身也是用模块化的方式开发的，当你用 cnpm install 装好了开发环境之后，可以打开 node_modules 目录查看整体结构。左侧第一列 6 个目录比较常用，这个顺序是按照我自己的理解排列的，按照常用程度从上到下。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/86de6060-b8db-11e9-a194-19c3d4002b01" alt=""></p><p><strong>请注意，一个目录里面可能会放多个模块，比如 forms 目录里面就有 FormsModule 和 ReactiveFormsModule 两个模块。</strong></p><p>Form 模块的关键类结构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/900472b0-b8db-11e9-8b62-c350e3466c22" alt=""></p><p>这份结构图的源文件在 <a href="https://gitee.com/learn-angular-series/learn-form" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-form</a> 这个项目的 master 分支上，docs 目录下。</p><h2 id="21-路由概述"><a href="#21-路由概述" class="headerlink" title="21.路由概述"></a>21.路由概述</h2><p>我尽量把 Router 叫做“路由”或者“路由机制”，而不叫“路由器”。因为我总感觉“路由器”是一种网络设备，在前端开发领域叫“路由器”怪怪的。</p><p><strong>请特别注意：Angular 中的 Router 模块会负责模块的加载、组件的初始化、销毁等操作，它是整个乐队的总指挥。</strong></p><h3 id="21-1-前端为什么要路由"><a href="#21-1-前端为什么要路由" class="headerlink" title="21.1 前端为什么要路由"></a>21.1 前端为什么要路由</h3><p>很多开发者代码写得很溜，但是并不理解为什么要 Router 这个机制。</p><p>在目前的前端开发领域，无论你使用哪一种框架，“路由”都是一个绕不开的机制。那么，前端为什么一定要路由机制？举两个简单的例子来帮助理解：</p><ul><li>如果没有 Router，浏览器的前进后退按钮没法用。做过后台管理系统的开发者应该遇到过这种场景，整个系统只有一个 login.jsp 和 index.jsp，用户从 login.jsp 登录完成之后，跳转到 index.jsp 上面，然后浏览器地址栏里面的 URL 就一直停留在 index.jsp 上面，页面内部的所有内容全部通过 Ajax 进行刷新。这种处理方式实际上把浏览器的 URL 机制给废掉了，整个系统只有一个 URL，用户完全无法通过浏览器的前进、后退按钮进行导航。</li><li>如果没有 Router，你将无法把 URL 拷贝并分享给你的朋友。比如：你在某段子网站上看到了一个很搞笑的内容，你把 URL 拷贝下来分享给了你的朋友。如果这个段子网站没有做好路由机制，你的朋友将无法顺利打开这个链接。</li></ul><p>Router 的本质是记录当前页面的状态，它和当前页面上展示的内容一一对应。</p><p>在 Angular 里面，Router 是一个独立的模块，定义在 @angular/router 模块里面，它有以下重要的作用：</p><ul><li>Router 可以配合 NgModule 进行模块的懒加载、预加载操作；</li><li>Router 会管理组件的生命周期，它会负责创建、销毁组件。</li></ul><h3 id="21-2-服务端的配置"><a href="#21-2-服务端的配置" class="headerlink" title="21.2 服务端的配置"></a>21.2 服务端的配置</h3><p>很多开发者会遇到这个问题：代码在开发状态运行得好好的，但是部署到真实的环境上之后所有路由都 404。</p><p>这是一个非常典型的问题，你需要配置一下 Server 才能很好地支持前端路由。</p><p>你想啊，既然你启用了前端路由，也就意味着浏览器地址栏里面的那些 URL 在 Server 端并没有真正的资源和它对应，你直接访问过去当然 404 了。</p><p>以 Tomcat 为例，你需要在 web.xml 里面加一段配置：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这意思就是告诉 Tomcat，对于 404 这种事你别管了，直接扔回前端去。由于 Angular 已经在浏览器里面接管了路由机制，所以接下来就由 Angular 来负责了。</p><p>如果你正在使用其它的 WEB 容器，请从以下链接里面查找对应的配置方式：</p><blockquote><p><a href="https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions" target="_blank" rel="noopener">https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions</a></p></blockquote><p>在 How to: Configure your server to work with html5Mode 这个小节里面把常见的 Web 容器的配置方式都列举出来了，包括：IIS、Apache、nginx、NodeJS、Tomcat 全部都有，你过去抄过来就行。</p><h3 id="21-3-小结"><a href="#21-3-小结" class="headerlink" title="21.3 小结"></a>21.3 小结</h3><p>Angular 新版本的路由机制极其强大，除了能支持无限嵌套之外，还能支持模块懒加载、预加载、路由守卫、辅助路由等高级功能，在接下来的几个小节里面就来写例子一一演示。</p><p>Angular Router 模块的作者是 Victor Savkin，这是他的个人 Blog：<a href="https://vsavkin.com/" target="_blank" rel="noopener">https://vsavkin.com/</a>，他专门编写了一本小薄书来完整描述 Angular 路由模块的设计思路和运行原理，这本书只有 151 页，如果你有兴趣请点这里：<a href="https://leanpub.com/router" target="_blank" rel="noopener">https://leanpub.com/router</a>。</p><h2 id="22-路由基本用法"><a href="#22-路由基本用法" class="headerlink" title="22.路由基本用法"></a>22.路由基本用法</h2><h3 id="22-1-路由的基本用法"><a href="#22-1-路由的基本用法" class="headerlink" title="22.1 路由的基本用法"></a>22.1 路由的基本用法</h3><p>我们从最简单的例子开始，第一个例子的运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/668f8b30-b8dc-11e9-a88b-c93a5ea3d618" alt=""></p><p>代码结构：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/6fb50140-b8dc-11e9-a194-19c3d4002b01" alt=""></p><p>app.routing.module.ts 里面就是路由规则配置，内容如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Routes<span class="token punctuation">,</span> RouterModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HomeComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./home/home.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> JokesComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./jokes/jokes.component'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> appRoutes<span class="token punctuation">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        redirectTo<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>        pathMatch<span class="token punctuation">:</span> <span class="token string">'full'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> HomeComponent    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'jokes'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> JokesComponent    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'**'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> HomeComponent    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>appRoutes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppRoutingModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>app.module.ts 里面首先需要 import 这份路由配置文件：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> AppRoutingModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app.routing.module'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后 @NgModule 里面的 imports 配置项内容如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript">imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    BrowserModule<span class="token punctuation">,</span>    AppRoutingModule<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>HTML 模板里面的写法：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/89043120-b8dc-11e9-ba33-51636d56aead" alt=""></p><p>这个例子的看点：</p><ul><li>整个导航过程是通过 RouterModule、app.routing.module.ts、routerLink、router-outlet 这几个东西一起配合完成的。</li><li>请点击顶部导航条，观察浏览器地址栏里面URL的变化，这里体现的是Router模块最重要的作用，就是对 URL 和对应界面状态的管理。</li><li>请注意路由配置文件 app.routing.module.ts 里面的写法，里面全部用的 component 配置项，这种方式叫“同步路由”。也就是说，@angular/cli 在编译的时候不会把组件切分到独立的 module 文件里面去，当然也不会异步加载，所有的组件都会被打包到一份 JS 文件里面去，请看下图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/a7e57720-b8dc-11e9-8b62-c350e3466c22" alt=""></p><p>你可能会问，如果想要做成异步模块应该怎么做呢？不要着急，下一段里面就会给例子。</p><ul><li>注意文件的切分，我看到很多朋友会把路由配置直接写在 app.module.ts 里面，这样做不太好。因为随着项目功能越加越多，路由配置也会变得越来越多，全部写在一起未来不好维护。配置归配置，代码归代码，文件尽量切清晰一些，坑谁也别坑自己对吧？</li><li>通配符配置必须写在最后一项，否则会导致路由无效。</li></ul><p><strong>特别注意：内容和代码都已经升级到了 8.0 的写法，在 8.0 里面，路由配置已经定义成了独立的模块，代码整体看起来更加合理了。</strong></p><p>完整可运行的代码在这里：<a href="https://gitee.com/learn-angular-series/learn-router" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-router</a>，这个例子对应的代码在 basic分 支上。</p><h3 id="22-2-路由与懒加载模块"><a href="#22-2-路由与懒加载模块" class="headerlink" title="22.2 路由与懒加载模块"></a>22.2 路由与懒加载模块</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d0f90f50-b8dc-11e9-a88b-c93a5ea3d618" alt=""></p><p>为什么要做模块的懒加载？</p><p>目的很简单：提升 JS 文件的加载速度，提升 JS 文件的执行效率。</p><p>对于一些大型的后台管理系统来说，里面可能会有上千份 JS 文件，如果你把所有 JS 全部都压缩到一份文件里面，那么这份文件的体积可能会超过 5M，这是不能接受的，尤其对于移动端应用。</p><p>所以，一个很自然的想法就是：我们能不能按照业务功能，把这些 JS 打包成多份 JS 文件，当用户导航到某个路径的时候，再去异步加载对应的 JS 文件。对于大型的系统来说，用户在使用的过程中不太可能会用到所有功能，所以这种方式可以非常有效地提升系统的加载和运行效率。</p><p>我们来把上面这个简单的例子改成异步模式，我们把“主页”和“段子”切分成两个独立的模块，并且做成异步加载的模式。</p><p>整体代码结构改成这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/fed68ba0-b8dc-11e9-a88b-c93a5ea3d618" alt=""></p><p>我们给 home 和 jokes 分别加了一个 module 文件和一个 routing.module 文件。</p><p>home.routing.module.ts 里面的内容如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Routes<span class="token punctuation">,</span> RouterModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HomeComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./home.component'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> homeRoutes<span class="token punctuation">:</span>Routes<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>HomeComponent    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forChild</span><span class="token punctuation">(</span>homeRoutes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HomeRoutingModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>home.module.ts 里面的内容如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RouterModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HomeComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./home.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HomeRoutingModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./home.routing.module'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>    HomeComponent  <span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    HomeRoutingModule  <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HomeModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jokes 模块相关的代码类似。</p><p>最重要的修改在 app.routing.module.ts 里面，路由的配置变成了这样：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Routes<span class="token punctuation">,</span> RouterModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> appRoutes<span class="token punctuation">:</span>Routes<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        redirectTo<span class="token punctuation">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>        pathMatch<span class="token punctuation">:</span><span class="token string">'full'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>        loadChildren<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./home/home.module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>HomeModule<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'jokes'</span><span class="token punctuation">,</span>        loadChildren<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./jokes/jokes.module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>JokesModule<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'**'</span><span class="token punctuation">,</span>        loadChildren<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./home/home.module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>HomeModule<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>appRoutes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppRoutingModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们把原来的 component 配置项改成了 loadChildren。</p><p>来看运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/22e02970-b8dd-11e9-a88b-c93a5ea3d618" alt=""></p><p>请按 F12 打开浏览器里面的开发者工具，查看网络面板，然后点击顶部的导航条，你会看到 0.e7bf37b9868f1788a067.chunk.js 是异步加载进来的。</p><p>完整可运行的代码在这里：<a href="https://gitee.com/learn-angular-series/learn-router" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-router</a>，这个例子对应的代码在 async-module 分支上。</p><p><strong>注意：从 Angular 8.0 开始，为了遵守最新的 import() 标准，官方建议采用新的方式来写 loadChildren：</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//8.0 之前是这样的：</span>loadChildren<span class="token punctuation">:</span><span class="token string">'./home/home.module#HomeModule'</span><span class="token comment" spellcheck="true">//从 8.0 开始这样写：</span>loadChildren<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./blog/home/home.module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>HomeModule<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.0 的路由定义的方式也发生了一些变化，路由定义在自己独立的模块里面，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/495dfb90-b8dd-11e9-a88b-c93a5ea3d618" alt=""></p><h3 id="22-3-N层嵌套路由"><a href="#22-3-N层嵌套路由" class="headerlink" title="22.3 N层嵌套路由"></a>22.3 N层嵌套路由</h3><p>在真实的系统中，菜单肯定不止一层，我们继续修改上面的例子，给它加一个二级菜单，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/54cb17b0-b8dd-11e9-8b62-c350e3466c22" alt=""></p><p>于是 home 模块的代码结构变成了这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/602c25e0-b8dd-11e9-ba33-51636d56aead" alt=""></p><p>重点的变化在 home.routing.module.ts 里面：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Routes<span class="token punctuation">,</span> RouterModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HomeComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./home.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PictureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./picture/picture.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> TextComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./text/text.component'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> homeRoutes<span class="token punctuation">:</span>Routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> HomeComponent<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                redirectTo<span class="token punctuation">:</span> <span class="token string">'pictures'</span><span class="token punctuation">,</span>                pathMatch<span class="token punctuation">:</span> <span class="token string">'full'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'pictures'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> PictureComponent            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> TextComponent            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'**'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> PictureComponent            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forChild</span><span class="token punctuation">(</span>homeRoutes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HomeRoutingModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理论上，路由可以无限嵌套，而实际上不可能嵌套得特别深。系统里面有一级、二级、三级菜单很正常，如果你的系统做出了十几级菜单，用户还怎么使用呢？</p><p>以上例子完整可运行的代码在这里：<a href="https://gitee.com/learn-angular-series/learn-router" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-router</a>，代码在 nested-router 分支上。</p><h3 id="22-4-共享模块"><a href="#22-4-共享模块" class="headerlink" title="22.4 共享模块"></a>22.4 共享模块</h3><p>你刚把嵌套路由的问题搞定，本来以为万事大吉了，这时候产品经理又妖娆地走了过来，他跟你说客户需求改了，需要在页面的侧边栏上面加一个展示用户资料的 Panel（面板），就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/7ce582d0-b8dd-11e9-a88b-c93a5ea3d618" alt=""></p><p>同时还提了另一个要求，这个展示用户资料的 Panel 在“段子”这个模块里面也要用，而且未来还可能在其它地方也要使用。</p><p>这时候，该轮到“共享模块”机制出场了。因为根据 Angular 的规定：组件必须定义在某个模块里面，但是不能同时属于多个模块。</p><p>如果你把这个 UserInfo 面板定义在 home.module 里面，jokes.module 就不能使用了，反之亦然。</p><p>当然，你可能说，这还不简单，把 UserInfo 定义在根模块 app.module 里面不就好了嘛。</p><p>不错，确实可以这样做。但是这样会造成一个问题：如果系统的功能不断增多，你总不能把所有共用的组件都放到 app.module 里面吧？如果真的这样搞，app.module 最终打包出来会变得非常胖。</p><p>所以，更优雅的做法是切分一个“共享模块”出来，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/9309d890-b8dd-11e9-8b62-c350e3466c22" alt=""></p><p>对于所有想使用 UserInfo 的模块来说，只要 import 这个 SharedModule 就可以了。</p><p>完整可运行的代码在这里：<a href="https://gitee.com/learn-angular-series/learn-router" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-router</a>，这个例子对应的代码在 shared-module 分支上。</p><h3 id="22-5-处理路由事件"><a href="#22-5-处理路由事件" class="headerlink" title="22.5 处理路由事件"></a>22.5 处理路由事件</h3><p>Angular 的路由上面暴露了 8 个事件：</p><ul><li>NavigationStart</li><li>RoutesRecognized</li><li>RouteConfigLoadStart</li><li>RouteConfigLoadEnd</li><li>NavigationEnd</li><li>NavigationCancel</li><li>NavigationError</li><li>Scroll</li></ul><p>从 Angular 5.0 开始，新增了 8 个路由事件：</p><ul><li>GuardsCheckStart</li><li>ChildActivationStart</li><li>ActivationStart</li><li>GuardsCheckEnd</li><li>ResolveStart</li><li>ResolveEnd</li><li>ActivationEnd</li><li>ChildActivationEnd</li></ul><p>详细的描述参见这里：</p><blockquote><p><a href="https://angular.io/guide/router#router-events" target="_blank" rel="noopener">https://angular.io/guide/router#router-events</a></p></blockquote><p>我们可以监听这些事件，来实现一些自己的业务逻辑，示例如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Router<span class="token punctuation">,</span>NavigationStart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./home.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./home.component.scss'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HomeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> router<span class="token punctuation">:</span> Router<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//可以用instanceof来判断事件的类型，然后去做你想要做的事情</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">NavigationStart</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整可运行的代码在这里：<a href="https://gitee.com/learn-angular-series/learn-router" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-router</a>，这个例子对应的代码在 router-events 分支上。</p><h3 id="22-6-如何传递和获取路由参数"><a href="#22-6-如何传递和获取路由参数" class="headerlink" title="22.6 如何传递和获取路由参数"></a>22.6 如何传递和获取路由参数</h3><p>在路由上面传递参数是必备的功能，Angular 的 Router 可以传递两种类型的参数：简单类型的参数、“矩阵式”参数。</p><p>请注意以下 routerLink 的写法：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">routerLinkActive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">[routerLink]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>home<span class="token punctuation">'</span>,<span class="token punctuation">'</span>1<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">routerLinkActive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">[routerLink]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>jokes<span class="token punctuation">'</span>,{id:111,name:<span class="token punctuation">'</span>damo<span class="token punctuation">'</span>}]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 HomeComponent 里面，我们是这样来获取简单参数的：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">public</span> router<span class="token punctuation">:</span>Router<span class="token punctuation">,</span>    <span class="token keyword">public</span> activeRoute<span class="token punctuation">:</span> ActivatedRoute<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>activeRoute<span class="token punctuation">.</span>params<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JokesComponent 里面，我们是这样来接受“矩阵式”参数的：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">public</span> router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span>    <span class="token keyword">public</span> activeRoute<span class="token punctuation">:</span> ActivatedRoute<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>activeRoute<span class="token punctuation">.</span>params<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“矩阵式”传参 <code>[routerLink]="['jokes',{id:111,name:'damo'}]"</code> 对应的 URL 是这样一种形态：</p><pre class="line-numbers language-typescript"><code class="language-typescript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">4200</span><span class="token operator">/</span>jokes<span class="token punctuation">;</span>id<span class="token operator">=</span><span class="token number">111</span><span class="token punctuation">;</span>name<span class="token operator">=</span>damo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种 URL 形态不常见，很多朋友应该没有看到过，但是它确实是合法的。它不是 W3C 的规范，但是互联网之父 Tim Berners-Lee 在 1996 年的文档里面有详细的解释，主流浏览器都是支持的：<a href="https://www.w3.org/DesignIssues/MatrixURIs.html" target="_blank" rel="noopener">https://www.w3.org/DesignIssues/MatrixURIs.html</a>。这种方式的好处是，我们可以传递大块的参数，因为第二个参数可以是一个 JSON 格式的对象。</p><p>完整可运行的代码在这里：<a href="https://gitee.com/learn-angular-series/learn-router" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-router</a>，这个例子对应的代码在 router-params 分支上。</p><h3 id="22-7-用代码触发路由导航"><a href="#22-7-用代码触发路由导航" class="headerlink" title="22.7 用代码触发路由导航"></a>22.7 用代码触发路由导航</h3><p>除了通过 <code>&lt;a routerLink="home"&gt;主页&lt;/a&gt;</code> 这种方式进行导航之外，我们还可以通过代码的方式来手动进行导航：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/jokes"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span> queryParams<span class="token punctuation">:</span> <span class="token punctuation">{</span> page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token number">222</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接受参数的方式如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>activeRoute<span class="token punctuation">.</span>queryParams<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>queryParam<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queryParam<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完整可运行的代码在这里：<a href="https://gitee.com/learn-angular-series/learn-router" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-router</a>，这个例子对应的代码在 router-params 分支上。</p><h2 id="23-模块预加载"><a href="#23-模块预加载" class="headerlink" title="23.模块预加载"></a>23.模块预加载</h2><p>我们在前面的实例基础上继续修改，为了方便接下来演示“模块预加载”，我们增加了一个一级导航菜单叫做“图片”：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/4b42cbb0-b8de-11e9-8b62-c350e3466c22" alt=""></p><p>现在我们有 3 个独立的模块：首页、段子、图片。只有当用户点击这些模块的时候，路由才会去异步加载对应的 chunk（块），就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/526bfc90-b8de-11e9-a194-19c3d4002b01" alt=""></p><p>一切看起来都那么完美！但是，产品经理又妖娆地走过来了，他对你说：小伙子干得不错！但是我有一个想法，你看能不能实现。虽然这种异步加载的方式确实能提升加载和执行的效率，但是用户体验并没有做到极致。你看啊，咱们是一个段子站，根据我们的统计数据，这 3 个模块用户都是一定会点的。所以，在首页模块加载完成之后，如果能把“段子”和“图片”这两个模块预先加载到客户端就好了。这样当用户点击这两个菜单的时候，看起来就像“秒开”一样，这才叫“极致体验”对吧？怎么样，有没有技术上的困难？下班之前能改好吧？</p><p>你一听就来劲了：看你说的，在我这儿从来不存在什么“技术上的困难”，下班之前保证搞定！</p><p>在这个场景下，“预加载”就派上用场了，你需要修改一下 app.routing.module.ts，相关的内容要改成这样：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> RouterModule<span class="token punctuation">,</span> PreloadAllModules <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript">RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>appRoutes<span class="token punctuation">,</span><span class="token punctuation">{</span>preloadingStrategy<span class="token punctuation">:</span>PreloadAllModules<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改完之后刷一下浏览器，效果看起来挺不错，所有模块都预加载进来了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/719b6290-b8de-11e9-8b62-c350e3466c22" alt=""></p><p>Angular 内置了两种预加载策略：PreloadAllModules 和 NoPreloading，PreloadAllModules 的意思是：预加载所有模块，不管有没有被访问到。也就是说，要么就一次预加载所有异步模块，要么就彻底不做预加载。</p><p>本来到这里产品经理的要求已经达成了，但是你是一个有情怀的人，一想到产品经理说的“极致体验”，还有他每次走过来的时候那种妖娆的姿势，你的热情又被点燃了起来。</p><p>你仔细看了一下上面的代码，总感觉这种“一次预加载所有模块”的方式太简单粗暴了一点儿。而且根据你自己的预测，将来这个系统还会开发更多的模块，如果总是一次性全部预加载，总感觉怪怪的。于是，你想进一步做一些优化，你希望实现自己的预加载策略，最好能在路由配置里面加入一些自定义的配置项，让某些模块预加载、某些模块不要进行预加载，就像这样：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'jokes'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>preload<span class="token punctuation">:</span><span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    loadChildren<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./jokes/jokes.module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>JokesModule<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'picture'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>preload<span class="token punctuation">:</span><span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    loadChildren<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./picture/picture.module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>PictureModule<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 preload 这个配置项为 true 的时候，就去预加载对应的模块，否则什么也不做。于是你实现了一个自己的预加载策略：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/86201210-b8de-11e9-a194-19c3d4002b01" alt=""></p><p>my-preloading-strategy.ts 里面的内容如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Route<span class="token punctuation">,</span>PreloadingStrategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"rxjs"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"rxjs/add/observable/of"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyPreloadingStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">PreloadingStrategy</span> <span class="token punctuation">{</span>    <span class="token function">preload</span><span class="token punctuation">(</span>route<span class="token punctuation">:</span> Route<span class="token punctuation">,</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Observable<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> route<span class="token punctuation">.</span>data<span class="token operator">&amp;&amp;</span>route<span class="token punctuation">.</span>data<span class="token punctuation">.</span>preload<span class="token operator">?</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>Observable<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，别忘记修改一下 app.routing.module.ts 里面的配置，换成你自己的预加载策略：</p><pre class="line-numbers language-typescript"><code class="language-typescript">RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>appRoutes<span class="token punctuation">,</span><span class="token punctuation">{</span>preloadingStrategy<span class="token punctuation">:</span>MyPreloadingStrategy<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>OK，这样一来，模块预加载的控制权就完全交到你自己的手里了。你可以继续修改这个预加载策略，比如用加个延时，或者根据其它某个业务条件来决定是不是要执行预加载，如此等等。</p><p>产品经理笑嘻嘻地跟你说：你看，我就知道你是我们这里最流弊的，一出手分分钟搞定。</p><p>你乐呵呵地说：那必须啊，老将出马，一个顶俩。</p><p>而你心里的实际想法是：mmp 站着说话不腰疼，反正不用你写代码，你知不知道为了搞这个破东西害得我改了一大堆东西！幸亏小爷我比较机智，这次还超前做了一些灵活的配置项，就等你小子下回再来改需求了。</p><h2 id="24-路由守卫"><a href="#24-路由守卫" class="headerlink" title="24.路由守卫"></a>24.路由守卫</h2><p>在实际的业务开发过程中，我们经常需要限制某些 URL 的可访问性。比如：对于系统管理界面，只有那些拥有管理员权限的用户才能打开。</p><p>有一些简化的处理方案，比如把菜单隐藏起来。但是这样做是不够的，因为用户还可以自己手动在地址栏里面尝试输入，或者更暴力一点，可以通过工具来强行遍历 URL。</p><p>请特别注意：前端代码应该默认被看成是不安全的，安全的重头戏应该放在 Server 端，而前端只是做一些基本的防护。</p><p>在 Angular 里面，权限控制的任务由“路由守卫”来负责，路由守卫的典型用法：</p><ul><li>控制路由能否激活</li><li>控制路由的能否退出</li><li>控制异步模块能否被加载</li></ul><h3 id="24-1-控制路由能否激活"><a href="#24-1-控制路由能否激活" class="headerlink" title="24.1 控制路由能否激活"></a>24.1 控制路由能否激活</h3><p>代码结构：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/c5eb3f50-b8de-11e9-a88b-c93a5ea3d618" alt=""></p><p>auth.guard.ts 里面这样写：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CanLoad<span class="token punctuation">,</span> CanActivate<span class="token punctuation">,</span> CanActivateChild <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./auth.service'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanLoad</span><span class="token punctuation">,</span>CanActivate<span class="token punctuation">,</span>CanActivateChild<span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> authService<span class="token punctuation">:</span>AuthService<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证路由是否可以激活     */</span>    <span class="token function">canActivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在真实的应用里面需要写一个 Service 到后端去验证权限</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">canActivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证子路由是否可以激活     */</span>    <span class="token function">canActivateChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在真实的应用里面需要写一个 Service 到后端去验证权限</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>别忘记把相关的服务放到 app.module.ts 里面去：</p><pre class="line-numbers language-typescript"><code class="language-typescript">providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>AuthService<span class="token punctuation">,</span>AuthGuard<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后 app.routing.module.ts 里面这样配置：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'jokes'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>preload<span class="token punctuation">:</span><span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    canLoad<span class="token punctuation">:</span><span class="token punctuation">[</span>AuthGuard<span class="token punctuation">]</span><span class="token punctuation">,</span>    canActivate<span class="token punctuation">:</span><span class="token punctuation">[</span>AuthGuard<span class="token punctuation">]</span><span class="token punctuation">,</span>    loadChildren<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./jokes/jokes.module'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>JokesModule<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 canActivate 配置项就是用来控制路由是否能被激活的，如果 AuthGuard 里面对应的 canActivate 方法返回 false，jokes 这个路由就无法激活。</p><p>在所有子模块的路由里面也可以做类似的配置。</p><h3 id="24-2-控制路由的退出"><a href="#24-2-控制路由的退出" class="headerlink" title="24.2 控制路由的退出"></a>24.2 控制路由的退出</h3><p>有时候，我们还需要控制路由能否退出。</p><p>比如：当用户已经在表单里面输入了大量的内容，如果不小心导航到了其它 URL，那么输入的内容就会全部丢失。很显然，这会让用户非常恼火。</p><p>所以，我们需要做一定的防护，避免这种意外的情况。</p><p>这个例子的运行界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/eba17bb0-b8de-11e9-a194-19c3d4002b01" alt=""></p><p>我们给 jokes 模块单独写了以守卫：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/f2a34e70-b8de-11e9-a194-19c3d4002b01" alt=""></p><p>jokes-guard.ts 里面的内容如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CanDeactivate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> JokesComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./jokes.component'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JokesGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanDeactivate</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">{</span>   <span class="token function">canDeactivate</span><span class="token punctuation">(</span>component<span class="token punctuation">:</span>JokesComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>component<span class="token punctuation">.</span>saved<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定不保存吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 jokes.module.ts 和 jokes.routing.module.ts 里面相关的配置。</p><h3 id="24-3-控制模块能否被加载"><a href="#24-3-控制模块能否被加载" class="headerlink" title="24.3 控制模块能否被加载"></a>24.3 控制模块能否被加载</h3><p>除了可以控制路由能否被激活之外，还可以控制模块能否被加载，处理方式类似，在 AuthGuard 里面增加一个处理方法：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * 验证是否有权限加载一个异步模块 */</span><span class="token function">canLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在真实的应用里面需要写一个 Service 到后端去验证权限</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">canLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 canLoad 方法返回 false，模块就根本不会被加载到浏览器里面了。</p><h2 id="25-多重出口"><a href="#25-多重出口" class="headerlink" title="25.多重出口"></a>25.多重出口</h2><p>到目前为止，在我们所有例子里面，界面结构都是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/376e15d0-b8df-11e9-8b62-c350e3466c22" alt=""></p><p>但是，有时候我们在同一个界面上需要同时出现两块或者多块动态的内容。比如，你想让左侧的导航栏和右侧的主体区域全部变成动态的，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3e101550-b8df-11e9-a88b-c93a5ea3d618" alt=""></p><p>核心代码如下：</p><p>app.component.html 里面的内容：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>a <span class="token punctuation">[</span>routerLink<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"['home', {outlets: {'left-nav': ['leftNav'], 'main-area': ['none']}}]"</span><span class="token operator">></span>主页<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>home.component.html 里面的内容：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-outlet</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-outlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-outlet</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main-area<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-outlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>left-nav.component.html 里面的核心代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-group-item<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toogle(1)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>只看图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-group-item<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toogle(2)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>只看文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>left-nav.component.ts 里面的核心代码：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token function">toogle</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/home'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>outlets<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'main-area'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/92c51c80-b8df-11e9-ba33-51636d56aead" alt=""></p><p>请注意看浏览器地址栏里面的内容，形式比较复杂，而且代码写起来也比较繁琐，所以，请尽量避开这种用法。</p><h2 id="26-表单快速上手"><a href="#26-表单快速上手" class="headerlink" title="26.表单快速上手"></a>26.表单快速上手</h2><p>如果没有表单，我们将没有途径收集用户输入。所以，表单是前端开发里面的重头戏。在日常开发中，处理表单会占据你大块的编码时间。</p><p>我们先来做一个最简单的用户注册界面：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/b583c3c0-b8df-11e9-a88b-c93a5ea3d618" alt=""></p><p>HTML 模版里面的核心代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span> <span class="token attr-name">(keyup)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userNameChange($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">#pwd</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name">(keyup)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>组件核心代码：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormQuickStartComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> userName<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">userNameChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子非常简单，里面有两个 input，分别演示两种传递参数的方式：</p><ul><li>第一个 input：用事件绑定的方式，把 input 的值传递给组件内部定义的 userName 属性，然后页面上再用  获取数据。</li><li>第二个 input：我们定义了一个模板局部变量 #pwd，然后底部直接用这个名字来获取 input 的值 。这里有一个小小的注意点，标签里面必须写 (keyup)=”0”，要不然 Angular 不会启动变更检测机制， 取不到值。</li></ul><h2 id="27-双向数据绑定"><a href="#27-双向数据绑定" class="headerlink" title="27.双向数据绑定"></a>27.双向数据绑定</h2><p>Angular 是第一个把“双向数据绑定”机制引入到前端开发领域来的框架，这也是当年 AngularJS 最受开发者欢迎的特性。</p><p>我们接着上一个例子继续改，先看运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/0e441a00-b8e0-11e9-8b62-c350e3466c22" alt=""></p><p>HTML 模版里面的核心代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regModel.userName<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regModel.password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rememberMe<span class="token punctuation">"</span></span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regModel.rememberMe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>记住我<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据模型和组件核心代码：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RegisterModel</span> <span class="token punctuation">{</span>    userName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    password<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    rememberMe<span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件里面的核心代码：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./model/register-model'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormQuickStartComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> regModel<span class="token punctuation">:</span>RegisterModel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegisterModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些常见的坑：</p><ul><li>要想使用 [(ngModel)] 进行双向绑定，必须在你的 @NgModule 定义里面 import FormsModule 模块。</li><li>用双向绑定的时候，必须给 <code>&lt;input&gt;</code> 标签设置 name 或者 id，否则会报错。（这个行为挺奇怪的，吐槽一下！）</li><li>表单上面展现的字段和你处理业务用的数据模型不一定完全一致，推荐设计两个 Model，一个用来给表单进行绑定操作，一个用来处理你的业务。</li></ul><h2 id="28-表单校验"><a href="#28-表单校验" class="headerlink" title="28.表单校验"></a>28.表单校验</h2><p>表单校验一定会牵扯到一个大家都比较头疼的技术点：正则表达式。正则表达式学起来有难度，但是又不可或缺。</p><p>强制所有开发者都能精通正则表达式是不太现实的事情，但是有一点是必须要做到的，那就是至少要能读懂别人编写正则。</p><h3 id="28-1-先来一个例子"><a href="#28-1-先来一个例子" class="headerlink" title="28.1 先来一个例子"></a>28.1 先来一个例子</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/59f05ae0-b8e0-11e9-a194-19c3d4002b01" alt=""></p><p>关键 HTML 模板代码如下：</p><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">#registerForm</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ngForm<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span> <span class="token attr-name">[ngClass]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>has-error<span class="token punctuation">'</span>: userName.invalid &amp;&amp; (userName.dirty || userName.touched) }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">#userName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ngModel<span class="token punctuation">"</span></span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regModel.userName<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName.invalid &amp;&amp; (userName.dirty || userName.touched)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName.errors.required<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              用户名不能为空            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName.errors.minlength<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              最小长度不能小于12个字符            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName.errors.maxlength<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              最大长度不能大于32个字符            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名：{{userName.value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密码：{{pwd.value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>表单状态： {{registerForm.valid}}                     {{registerForm.invalid}}                     {{registerForm.pending}}                     {{registerForm.pristine}}                     {{registerForm.dirty}}                    {{registerForm.untouched}}                     {{registerForm.touched}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板和组件里面的关键代码：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RegisterModel</span> <span class="token punctuation">{</span>    userName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    password<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    rememberMe<span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./model/register-model'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormQuickStartComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> regModel<span class="token punctuation">:</span>RegisterModel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegisterModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="28-2-状态标志位"><a href="#28-2-状态标志位" class="headerlink" title="28.2 状态标志位"></a>28.2 状态标志位</h3><p>Form、FormGroup、FormControl（输入项）都有一些标志位可以使用，这些标志位是 Angular 提供的，一共有 9 个（官方的文档里面没有明确列出来，或者列得不全）：</p><ul><li>valid：校验成功</li><li>invalid：校验失败</li><li>pending：表单正在提交过程中</li><li>pristine：数据依然处于原始状态，用户没有修改过</li><li>dirty：数据已经变脏了，被用户改过了</li><li>touched：被触摸或者点击过</li><li>untouched：未被触摸或者点击</li><li>enabled：启用状态</li><li>disabled：禁用状态</li></ul><p>Form 上面多一个状态标志位 submitted，可以用来判断表单是否已经被提交。</p><p>我们可以利用这些标志位来判断表单和输入项的状态。</p><h3 id="28-3-内置校验规则"><a href="#28-3-内置校验规则" class="headerlink" title="28.3 内置校验规则"></a>28.3 内置校验规则</h3><p>Angular 一共内置了 8 种校验规则：</p><ol><li>required</li><li>requiredTrue</li><li>minLength</li><li>maxLength</li><li>pattern</li><li>nullValidator</li><li>compose</li><li>composeAsync</li></ol><p>详细的 API 描述参见这里：</p><blockquote><p><a href="https://angular.io/api/forms/Validators" target="_blank" rel="noopener">https://angular.io/api/forms/Validators</a></p></blockquote><h3 id="28-4-自定义校验规则"><a href="#28-4-自定义校验规则" class="headerlink" title="28.4 自定义校验规则"></a>28.4 自定义校验规则</h3><p>内置的校验规则经常不够用，尤其在需要多条件联合校验的时候，所以我们需要自己定义校验规则。</p><p>请看这个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/941d15f0-b8e0-11e9-a194-19c3d4002b01" alt=""></p><p>关键 HTML 模板代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span>  <span class="token attr-name">[ngClass]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>has-error<span class="token punctuation">'</span>: mobile.invalid &amp;&amp; (mobile.dirty || mobile.touched) }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>手机号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">#mobile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ngModel<span class="token punctuation">"</span></span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regModel.mobile<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mobile<span class="token punctuation">"</span></span> <span class="token attr-name">ChineseMobileValidator</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mobile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mobile.invalid &amp;&amp; (mobile.dirty || mobile.touched)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!mobile.errors.ChineseMobileValidator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          请输入合法的手机号        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义的校验规则代码：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Validator<span class="token punctuation">,</span> AbstractControl<span class="token punctuation">,</span> NG_VALIDATORS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>@<span class="token function">Directive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    selector<span class="token punctuation">:</span> <span class="token string">'[ChineseMobileValidator]'</span><span class="token punctuation">,</span>    providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            provide<span class="token punctuation">:</span> NG_VALIDATORS<span class="token punctuation">,</span>            useExisting<span class="token punctuation">:</span> ChineseMobileValidator<span class="token punctuation">,</span>            multi<span class="token punctuation">:</span> <span class="token keyword">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ChineseMobileValidator</span> <span class="token keyword">implements</span> <span class="token class-name">Validator</span> <span class="token punctuation">{</span>    @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ChineseMobileValidator<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token function">validate</span><span class="token punctuation">(</span>control<span class="token punctuation">:</span> AbstractControl<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>error<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> val <span class="token operator">=</span> control<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">let</span> flag<span class="token operator">=</span><span class="token regex">/^1(3|4|5|7|8)\d{9}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            control<span class="token punctuation">.</span><span class="token function">setErrors</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            control<span class="token punctuation">.</span><span class="token function">setErrors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ChineseMobileValidator<span class="token punctuation">:</span><span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>ChineseMobileValidator<span class="token punctuation">:</span><span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，自定义校验规则的使用方式和内置校验规则并没有什么区别。</p><p>当然，也可以把正则表达式传给内置的 pattern 校验器来实现这个效果，但是每次都拷贝正则比较麻烦，对于你的业务系统常见的校验规则，还是把它沉淀成你们自己的校验规则库可复用性更高。</p><p>关于校验器更详细的 API 描述参见这里：</p><blockquote><p><a href="https://angular.io/api/forms/Validators" target="_blank" rel="noopener">https://angular.io/api/forms/Validators</a></p></blockquote><h2 id="29-模型驱动型表单"><a href="#29-模型驱动型表单" class="headerlink" title="29.模型驱动型表单"></a>29.模型驱动型表单</h2><p>前面的例子都是“模板驱动型表单”，我们把表单相关的逻辑，包括校验逻辑全部写在模板里面，组件内部几乎没写什么代码。</p><p>表单的另一种写法是“模型驱动型表单”，又叫做“响应式表单”。特点是：把表单的创建、校验等逻辑全部用代码写到组件里面，让 HTML 模板变得很简单。</p><p><strong>特别注意：如果想使用响应式表单，必须在你的 @NgModule 定义里面 import ReactiveFormsModule。</strong></p><p>这里我们来一个复杂一些的表单，运行起来的效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/e8d885c0-b8e0-11e9-a88b-c93a5ea3d618" alt=""></p><p>如果你想查阅“响应式表单”的详细文档，请参考这里：</p><blockquote><p><a href="https://angular.io/guide/reactive-forms" target="_blank" rel="noopener">https://angular.io/guide/reactive-forms</a></p></blockquote><h2 id="30-动态表单"><a href="#30-动态表单" class="headerlink" title="30.动态表单"></a>30.动态表单</h2><p>有这样一种业务场景：表单里面的输入项不是固定的，需要根据服务端返回的数据动态进行创建。</p><p>这时候我们压根没法把表单的 HTML 模板写死，我们需要根据配置项用代码动态构建表单，而这些配置项甚至可能是在服务端动态生成的。</p><p>在 NiceFish 里面有一个实际的例子，运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/18dadde0-b8e1-11e9-a194-19c3d4002b01" alt=""></p><p>我们把创建表单相关的逻辑全部移到了组件里面：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/1ff96060-b8e1-11e9-a194-19c3d4002b01" alt=""></p><p>HTML 模板变得非常简单：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/269852a0-b8e1-11e9-8b62-c350e3466c22" alt=""></p><h2 id="31-服务"><a href="#31-服务" class="headerlink" title="31.服务"></a>31.服务</h2><p>在组件的构造函数里面声明，Angular 会在运行时自动把 Service 实例创建出来并注射给组件：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/873cebf0-cce3-11e9-8d89-4fa271cb1633" alt=""></p><h3 id="31-1-单例模式"><a href="#31-1-单例模式" class="headerlink" title="31.1 单例模式"></a>31.1 单例模式</h3><p>如果你希望 Service 是全局单例的，需要把它定义到根模块里面。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/991910b0-cce3-11e9-9a11-bbb3551196dc" alt=""></p><h3 id="31-2-多实例模式"><a href="#31-2-多实例模式" class="headerlink" title="31.2 多实例模式"></a>31.2 多实例模式</h3><p>下面这个例子用来测试 UserListService 是否是单例，第一个组件会向 UserListService 里面塞数据，第二个组件会尝试去读取数据：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/bf4196e0-cce3-11e9-8d89-4fa271cb1633" alt=""></p><p>核心代码如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>pre<span class="token operator">></span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'order-list'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./order-list.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./order-list.component.scss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>UserListService<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//如果你在这里提供了 providers 配置，UserListService 就不是全局单例了</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从运行结果可以看出来，因为我们在组件内部的 providers 里面也配置了一个 UserListService，很明显就不是同一个实例了。</p><h3 id="31-3-简单解释一下原理"><a href="#31-3-简单解释一下原理" class="headerlink" title="31.3 简单解释一下原理"></a>31.3 简单解释一下原理</h3><p>在新版本的 Angular 里面，每个组件上都有自己的注射器（Injector）实例，所以很明显，注射器也构成了一个树形的结构。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/e4e49960-cce3-11e9-8d89-4fa271cb1633" alt=""></p><p>我们的 UserListService 是通过依赖注入机制注射给组件的，DI 机制会根据以下顺序查找服务实例：</p><ul><li>如果组件内部的 providers 上面配置了服务，优先使用组件上的配置。</li><li>否则继续向父层组件继续查找。</li><li>直到查询到模块里面的 providers 配置。</li><li>如果没有找到指定的服务，抛异常。</li></ul><p>所以请特别注意：</p><ul><li>在 Component 里面直接引入 Service，就不是单例了，而是会为每个组件实例都创建一个单独的 Service 单例。</li><li>如果你在多个模块（@NgModule）里面同时定义 providers，那也不是单例。</li><li>如果你在异步加载的模块里面定义 Service，那也不是全局单例的，因为 Angular 会为异步模块创建独立的 Injector 空间。</li></ul><h3 id="31-4-关于Service的基本注意点"><a href="#31-4-关于Service的基本注意点" class="headerlink" title="31.4 关于Service的基本注意点"></a>31.4 关于Service的基本注意点</h3><p>有很多朋友说：OK，我会写 Service 了，也知道怎么玩注入了，但还有一个最基本的问题没有解决，那就是应该把什么样的东西做成服务？</p><p>整体上说，Angular 里面的 Service 与后端框架里面的 Service 设计思想是一致的：</p><ul><li>Service 应该是无状态的。</li><li>Service 应该可以被很多组件复用，不应该和任何组件紧密相关。</li><li>多个 Service 可以组合起来，实现更复杂的服务。</li></ul><p>在 Angular 核心包里面，最典型的一个服务就是 Htpp 服务。</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Service-oriented_architecture</a></p></blockquote><h2 id="32-RxJS-快速上手"><a href="#32-RxJS-快速上手" class="headerlink" title="32.RxJS 快速上手"></a>32.RxJS 快速上手</h2><h3 id="32-1-ReactiveX与RxJS"><a href="#32-1-ReactiveX与RxJS" class="headerlink" title="32.1 ReactiveX与RxJS"></a>32.1 ReactiveX与RxJS</h3><p>ReactiveX 本身是一种编程范式，或者叫一种设计思想，目前有Java/C++/Python 等 18 种语言实现了 ReactiveX，RxJS 是其中的 JavaScript 版本。</p><p>ReactiveX 的官方网站在这里：<a href="http://reactivex.io/" target="_blank" rel="noopener">http://reactivex.io/</a>，上面有详细介绍、入门文档、技术特性等。</p><p>这篇文章不会重复文档上已经有的内容，而是从另外一个视角，带你领略 RxJS 的核心用法。</p><h3 id="32-2-回调地狱与-Promise"><a href="#32-2-回调地狱与-Promise" class="headerlink" title="32.2 回调地狱与 Promise"></a>32.2 回调地狱与 Promise</h3><p>在使用 Ajax 的过程中，经常会遇到这种情况：我们需要在一个 Ajax 里面嵌套另一个 Ajax 调用，有时候甚至需要嵌套好几层 Ajax 调用，于是就形成了所谓的“回调地狱”：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/0113c240-cce5-11e9-9f23-07a3e2a236db" alt=""></p><p>这种代码最大的问题是可读性非常差，时间长了之后根本无法维护。</p><p>Promise 的出现主要就是为了解决这个问题，在 Promise 的场景下，我们可以这样写代码：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//异步操作之后用 resolve 返回 data</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//依赖于 Promise 的第一个异步操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//依赖于 Promise 的第二个异步操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//依赖于 Promise 的第三个异步操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理异常</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显，这样的代码可读性就强太多了，而且未来维护起来也很方便。</p><p>当然，Promise 的作用不止于此，如果你想更细致地研究 Promise，请看 MDN 上的这篇资料：</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p></blockquote><h3 id="32-3-RxJS-与-Promise-的共同点"><a href="#32-3-RxJS-与-Promise-的共同点" class="headerlink" title="32.3 RxJS 与 Promise 的共同点"></a>32.3 RxJS 与 Promise 的共同点</h3><p>RxJS 与 Promise 具有相似的地方，请看以下两个代码片段：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'---promise timeout---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> stream1$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'observable timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> disposable <span class="token operator">=</span> stream1$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，RxJS 和 Promise 的基本用法非常类似，除了一些关键词不同。Promise 里面用的是 then() 和 resolve()，而 RxJS 里面用的是 next() 和 subscribe()。</p><h3 id="32-4-RxJS-与-Promise-的-3-大重要不同点"><a href="#32-4-RxJS-与-Promise-的-3-大重要不同点" class="headerlink" title="32.4 RxJS 与 Promise 的 3 大重要不同点"></a>32.4 RxJS 与 Promise 的 3 大重要不同点</h3><p>任何一种技术或者框架，一定要有自己的特色，如果跟别人完全一样，解决的问题也和别人一样，那存在的意义和价值就会遭到质疑。</p><p>所以，RxJS 一定有和 Promise 不一样的地方，最重要的不同点有 3 个，请看下图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/366bead0-cce5-11e9-beb5-a53251e30de8" alt=""></p><p>依次给 3 块代码来示范一下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'---promise timeout---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> stream1$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'observable timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> disposable <span class="token operator">=</span> stream1$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    disposable<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上代码可以看到，Promise 的创建之后，动作是无法撤回的。Observable 不一样，动作可以通过 unsbscribe() 方法中途撤回，而且 Observable 在内部做了智能的处理，如果某个主题的订阅者为 0，RxJS 将不会触发动作。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> stream2$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream2$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Observable>"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码里面我们用 setInterval 每隔一秒钟触发一个新的值，源源不断，就像流水一样。</p><p>这一点 Promise 是做不到的，对于 Promise 来说，最终结果要么 resole（兑现）、要么 reject（拒绝），而且都只能触发一次。如果在同一个 Promise 对象上多次调用 resolve 方法，则会抛异常。而 Observable 不一样，它可以不断地触发下一个值，就像 next() 这个方法的名字所暗示的那样。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> stream2$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream2$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"filter>"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream2$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"map>"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码里面，我们用到了两个工具函数：filter 和 map。</p><ul><li>filter 的作用就如它的名字所示，可以对结果进行过滤，在以上代码里面，我们只对偶数值有兴趣，所以给 filter 传递了一个箭头函数，当这个函数的返回值为 true 的时候，结果就会留下来，其它值都会被过滤掉。</li><li>map 的作用是用来对集合进行遍历，比如例子里面的代码，我们把 Observable 返回的每个值都做了一次平方，然后再传递给监听函数。</li></ul><p>类似这样的工具方法在 Observable 里面叫做 operator（操作符），所以有人说 Observable 就相当于异步领域的 Underscore 或者 lodash，这样的比喻是非常贴切的。这也是 Observable 比较强的地方，Promise 里面就没有提供这些工具函数。</p><p>Observable 里面提供了数百个这样的“操作符”，完整的列表和 API 文档请参考这里：</p><blockquote><p><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">http://reactivex.io/documentation/operators.html</a></p></blockquote><p>RxJS 官方的 GitHub 仓库在这里：</p><blockquote><p><a href="https://github.com/ReactiveX/rxjs.git" target="_blank" rel="noopener">https://github.com/ReactiveX/rxjs.git</a></p></blockquote><p><strong>特别注意</strong>：Angular 5.0之后，修改了 RxJS 的 import 方式，与其它模块的引入格式进行了统一。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> Subject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> debounceTime<span class="token punctuation">,</span> distinctUntilChanged<span class="token punctuation">,</span> map<span class="token punctuation">,</span> filter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我也看到有一些朋友在抱怨，说 RxJS 太过复杂，操作符（operator）的数量又特别多，不知道在什么场景下面应该用什么操作符。</p><p>实际上这种担心是多余的，因为在 RxJS 里面最常用的操作符不超过 10 个，不常用的操作符都可以在使用的时候再去查阅文档。</p><p>RxJS 和你自己开发的系统一样，常用的功能只有其中的 20%，而剩余 80% 的功能可能永远不会被用到。所以，RxJS 并不像很多人说的那么玄乎，你一定能学会，我相信你。</p><h3 id="32-5-RxJS-在-Angular-的典型应用场景-1：HTTP-服务"><a href="#32-5-RxJS-在-Angular-的典型应用场景-1：HTTP-服务" class="headerlink" title="32.5 RxJS 在 Angular 的典型应用场景 1：HTTP 服务"></a>32.5 RxJS 在 Angular 的典型应用场景 1：HTTP 服务</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> search<span class="token punctuation">:</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Observable<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>error <span class="token operator">||</span> <span class="token string">'Server error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在新版本的 Angular 里面，HTTP 服务的返回值都是 Observable 类型的对象，所以我们可以 subscribe（订阅）这个对象。当然，Observable 所提供的各种“操作符”都可以用在这个对象上面，比如上面这个例子就用到了 map 操作符。</p><h3 id="32-6-RxJS-在-Angular-的典型应用场景-2：事件处理"><a href="#32-6-RxJS-在-Angular-的典型应用场景-2：事件处理" class="headerlink" title="32.6 RxJS 在 Angular 的典型应用场景 2：事件处理"></a>32.6 RxJS 在 Angular 的典型应用场景 2：事件处理</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>searchTextStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">debounceTime</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">distinctUntilChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>searchText <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchText<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子里面最有意思的部分是 debounceTime 方法和 distinctUntilChanged 方法，这是一种“去抖动”效果。“去抖动”这个场景非常能体现 Observable 的优势所在，有一些朋友可能没遇到过这种场景，我来解释一下，以防万一。</p><p>在搜索引擎里面，我们经常会看到这样的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/c6b83990-cce5-11e9-8d89-4fa271cb1633" alt=""></p><p>这种东西叫做“动态搜索建议”，在用户敲击键盘的过程中，浏览器已经向后台发起了请求，返回了一些结果，目的是给用户提供一些建议。</p><p>效果看起来很简单，但是如果没有这个 debounceTime 工具函数，我们自己实现起来是非常麻烦的。这里的难点在于：用户敲击键盘的过程是源源不断的，我们并不知道用户什么时候才算输入完成。所以，如果让你自己来从零开始实现这种效果，你将会不得不使用定时器，不停地注册、取消，自己实现延时，还要对各种按键码做处理。</p><p>在 Observable 里面，处理这种情况非常简单，只要一个简单的 debounceTime 加 distinctUntilChanged 调用就可以了。</p><h3 id="32-7-小结"><a href="#32-7-小结" class="headerlink" title="32.7 小结"></a>32.7 小结</h3><ul><li>ReactiveX 本身是一种编程范式，或者叫一种设计思想，RxJS 是其中的一种实现，其它还有 Java/C++/Python 等15种语言的实现版本。ReactiveX 本身涉及到的内容比较多，特别是一些设计思想层面的内容，如果你对它特别有兴趣，请参考官方的站点：<a href="http://reactivex.io/" target="_blank" rel="noopener">http://reactivex.io</a>。</li><li>关于 RxJS 目前已经有专门的书籍来做介绍，但是还没有中文版。在网络上有各种翻译和文章，如果你想深入研究，请自行搜索。</li><li>RxJS 是 Angular 内核的重要组成部分，它和 Zone.js 一起配合实现了“变更检测”机制，所以在编写 Angular 应用的过程中应该优先使用 RxJS 相关的 API。</li><li>RxJS 可以独立使用，它并不一定要和 Angular 一起使用。</li></ul><h2 id="33-Reactive-Programming与RxJS深入解析"><a href="#33-Reactive-Programming与RxJS深入解析" class="headerlink" title="33.Reactive Programming与RxJS深入解析"></a>33.Reactive Programming与RxJS深入解析</h2><blockquote><p>这部分内容有深度，如果你暂时不想了解这么多，可以先跳过去，有需要的时候再来看。</p></blockquote><h3 id="33-1-Reactive-Programming—反应式编程"><a href="#33-1-Reactive-Programming—反应式编程" class="headerlink" title="33.1 Reactive Programming—反应式编程"></a>33.1 Reactive Programming—反应式编程</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/33cae4b0-cce6-11e9-beb5-a53251e30de8" alt=""></p><p>从本质上来说，计算机编程语言分成两大种大的范式：命令式和声明式。</p><ul><li>典型的命令式编程语言有：C、C++、Java 等。</li><li>典型的声明式编程语言有：SQL、XML、HTML、SVG 等。</li></ul><p>为了帮助你更好地理解这两种编程范式的不同点，我用自己的语言来解释一下。比如 SQL 是一种典型的声明式语言，你会写出这样的语句：</p><pre><code>select u.* from user u where u.age &gt; 15;</code></pre><p>但是，数据库在底层是如何解释并执行这条语句，是由数据库自己决定的，不需要程序员来控制，程序员只是在“描述”自己想要什么，而并不需要告诉计算机具体怎么做。</p><p>命令式编程语言刚好相反，程序员必须想好需要什么结果，同时需要提供完整的执行过程。</p><p>Reactive Programming 属于声明式编程语言的一种，有很多中文资料把它翻译成“响应式编程”，我认为这不够准确，而且容易和UI设计领域的“响应式编程”发生混淆，翻译成“反应式编程”更加贴切，请参考题图。</p><h3 id="33-2-发展历程"><a href="#33-2-发展历程" class="headerlink" title="33.2 发展历程"></a>33.2 发展历程</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/539a0d20-cce6-11e9-beb5-a53251e30de8" alt=""></p><p>Reactive Programming 在 1970 年代就开始发展了，后来微软在 .NET 上面做了第一个实现，后面 2013 年的时候有了 Java 版的实现，然后才有了 ReactiveX 宣言。</p><p>目前有 18 种语言实现了 ReactiveX，而 RxJS 是其中的 JS 版本。所以，你可以看到，ReactiveX 本身是和语言无关的，你可以把它看成一种编程思想、一种协议、一种规范。</p><h3 id="33-3-典型的业务场景"><a href="#33-3-典型的业务场景" class="headerlink" title="33.3 典型的业务场景"></a>33.3 典型的业务场景</h3><p>有人会说，OK，我懂了，这是一种编程思想，但是我为什么要用它呢？它能带来什么好处呢？</p><p>我举几个典型的业务场景帮助你理解。</p><ul><li>场景一：事件流与“防抖动”</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/808d2970-cce6-11e9-8d89-4fa271cb1633" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/8847c4e0-cce6-11e9-beb5-a53251e30de8" alt=""></p><p>用户连续不断地敲击键盘，如果用户每次按下一个键就发起一个网络请求进行查询，很明显就会产生大量无效的查询。那么，如何才能在用户真正输入完成之后再发起查询请求呢？这个场景用 RxJS 实现起来就非常简单。</p><ul><li>场景二：数据流</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/abae6bf0-cce6-11e9-9a11-bbb3551196dc" alt=""></p><p>我有 3 个 Ajax 请求，业务需要 3 个请求全部都成功之后才能继续后面的业务操作。这个场景可以用 Promise 来实现，也可以用 RxJS 来实现。</p><ul><li>场景三：数据与 UI 的同步</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/c3b76030-cce6-11e9-beb5-a53251e30de8" alt=""></p><ul><li>场景四：Android 中 UI 线程与其它线程的同步问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d0b83bb0-cce6-11e9-beb5-a53251e30de8" alt=""></p><p>对于以上 4 种典型的业务场景，如果完全靠程序员从零自己实现，会非常繁琐，而用 ReactiveX 的思路来做就会非常简单。</p><h3 id="33-4-RX中的难点：Operator（操作符）"><a href="#33-4-RX中的难点：Operator（操作符）" class="headerlink" title="33.4 RX中的难点：Operator（操作符）"></a>33.4 RX中的难点：Operator（操作符）</h3><p>ReactiveX 所描述的设计思想是非常清晰的，理解起来也不困难。</p><p>但是，在工程实践中，有很多人在抱怨 ReactiveX 过于繁琐，这里面最大的一个难点就是所谓的“操作符”（Operator）的用法。</p><p>ReactiveX 官方移动定义了 70 个 Operator，分成 11 个大类（各种语言实现 Operator 的数量不一样）：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/16024530-cce7-11e9-9a11-bbb3551196dc" alt=""></p><h3 id="33-5-RxJS"><a href="#33-5-RxJS" class="headerlink" title="33.5 RxJS"></a>33.5 RxJS</h3><p>RxJS 是 ReactiveX 的 JavaScript 版实现，它本身是独立的，只是 Angular 选用了它来构建自己的内核。</p><p>RxJS 一共实现了 105 个 Operator，分成 10 个大类，完整的分类和列表参见这里：</p><blockquote><p><a href="https://rxjs.dev/guide/operators" target="_blank" rel="noopener">https://rxjs.dev/guide/operators</a></p></blockquote><p>请不用担忧，这里面很多 Operator 在日常业务开发里面永远都不会用到。所以你不需要一次性全部掌握，刚开始的时候只要能熟练使用其中的 15 个就可以了。</p><p>创建型：</p><ul><li>ajax</li><li>empty</li><li>from</li><li>of</li><li>range</li></ul><p>join 创建型：</p><ul><li>concat</li><li>merge</li><li>zip</li></ul><p>变换型：</p><ul><li>map</li><li>scan</li></ul><p>过滤型：</p><ul><li>filter</li><li>first</li><li>last</li><li>throttle</li></ul><p>异常处理型：</p><ul><li>catchError</li></ul><p>对于其他 Operator，你可以在用到的时候再查文档，也可以通过类比的方式进行理解和记忆。比如：对于数学运算类的 Operator，当你看到有 max 的时候，就能想到一定有 min。这是非常自然的事情，并不需要额外的努力。</p><p>在官方的文档中 <a href="https://rxjs.dev/guide/operators" target="_blank" rel="noopener">https://rxjs.dev/guide/operators</a>，为每一个 Operator 都提供了实例代码，总共有一千多个例子，你可以对照这些例子进行理解。在例子页面上，还提供了弹珠图。我看到有一些初学者还不会看弹珠图，附一张中文版的弹珠图说明如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/769be270-cce7-11e9-9f23-07a3e2a236db" alt=""></p><p><strong>弹珠图是从上向下看的：上方的时间线是输入，中间的方框是 Operator，下方的时间线是输出。由于输入输出都是 Observable，所以可以无限链式调用。</strong></p><p>比如下面这张弹珠图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/82c040a0-cce7-11e9-8d89-4fa271cb1633" alt=""></p><p>输入是上方的两条时间线，中间的 merge 是 Operator，下方的时间线是输出，所以 merge 操作的效果就是把两条时间线上的值“合并”成了下方的一条时间线。</p><h3 id="33-6-参考资料"><a href="#33-6-参考资料" class="headerlink" title="33.6 参考资料"></a>33.6 参考资料</h3><ul><li><a href="https://en.wikipedia.org/wiki/" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Declarative_programming</a></li><li>ReactiveX 宣言：<a href="http://reactivex.io/" target="_blank" rel="noopener">http://reactivex.io/</a></li><li>RxJS：<a href="https://github.com/ReactiveX/rxjs" target="_blank" rel="noopener">https://github.com/ReactiveX/rxjs</a></li><li>RxJava：<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava</a></li></ul><h2 id="34-国际化的用法"><a href="#34-国际化的用法" class="headerlink" title="34.国际化的用法"></a>34.国际化的用法</h2><h3 id="34-1-先看运行效果"><a href="#34-1-先看运行效果" class="headerlink" title="34.1 先看运行效果"></a>34.1 先看运行效果</h3><p>这里用 NiceFish 这个开源项目来演示国际化的用法，代码在这里：</p><blockquote><p><a href="https://gitee.com/mumu-osc/NiceFish" target="_blank" rel="noopener">https://gitee.com/mumu-osc/NiceFish</a></p></blockquote><p>这是默认中文情况下，用户注册界面：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/13b6b210-cce8-11e9-9f23-07a3e2a236db" alt=""></p><p>打开 Chrome 的设置界面，把默认语言设置成“英语”：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/1cd411d0-cce8-11e9-9f23-07a3e2a236db" alt=""></p><p>刷新一下，可以看到界面变成了英文状态：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/240cfa20-cce8-11e9-9a11-bbb3551196dc" alt=""></p><h3 id="34-2-解释具体做法"><a href="#34-2-解释具体做法" class="headerlink" title="34.2 解释具体做法"></a>34.2 解释具体做法</h3><p>第一步：在项目的 package.json 里面的 dependencies 配置项中加上 “ng2-translate”: “5.0.0”。</p><p>第二步：在 app.module.ts 里面导入需要使用的模块：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> TranslateModule<span class="token punctuation">,</span> TranslateLoader<span class="token punctuation">,</span> TranslateStaticLoader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'ng2-translate'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 imports 配置项里面加上以下内容：</p><pre class="line-numbers language-typescript"><code class="language-typescript">TranslateModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    provide<span class="token punctuation">:</span> TranslateLoader<span class="token punctuation">,</span>    useFactory<span class="token punctuation">:</span> <span class="token punctuation">(</span>http<span class="token punctuation">:</span> Http<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">TranslateStaticLoader</span><span class="token punctuation">(</span>http<span class="token punctuation">,</span><span class="token string">'./assets/i18n'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deps<span class="token punctuation">:</span> <span class="token punctuation">[</span>Http<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：在 app.component.ts 中的 ngOnInit 钩子里面加上以下内容：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>translate<span class="token punctuation">.</span><span class="token function">addLangs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"zh"</span><span class="token punctuation">,</span> <span class="token string">"en"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>translate<span class="token punctuation">.</span><span class="token function">setDefaultLang</span><span class="token punctuation">(</span><span class="token string">'zh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> browserLang <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>translate<span class="token punctuation">.</span><span class="token function">getBrowserLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>translate<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>browserLang<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/zh|en/</span><span class="token punctuation">)</span> <span class="token operator">?</span> browserLang <span class="token punctuation">:</span> <span class="token string">'zh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第四步：在 HTML 模板里面通过管道的方式来编写需要进行国际化的Key：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/6107c950-cce8-11e9-beb5-a53251e30de8" alt=""></p><p>可以看到，国际化插件本质上是利用了 Angular 的“管道”机制。</p><p>第五步：用来编写国际化字符串的 JSON 文件是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/6e1c05c0-cce8-11e9-8d89-4fa271cb1633" alt=""></p><h3 id="34-3-小结"><a href="#34-3-小结" class="headerlink" title="34.3 小结"></a>34.3 小结</h3><p>ng2-translate 的主页在这里：</p><blockquote><p><a href="https://github.com/ngx-translate/core" target="_blank" rel="noopener">https://github.com/ngx-translate/core</a></p></blockquote><p>它是一个第三方提供的 i18n 库，和 Angular 结合得比较好，ngx-translate 是后来改的名字。</p><h2 id="35-自动化测试"><a href="#35-自动化测试" class="headerlink" title="35.自动化测试"></a>35.自动化测试</h2><p>自动化测试一直是前端开发中的一个巨大痛点，由于前端在运行时严重依赖浏览器环境，导致我们一直没法像测试后端代码那样可以自动跑用例。</p><p>在有了 NodeJS 之后，我们终于有了 Karma+Jasmine 这样的单元测试组合，也有了基于 WebDriverJS 这样的可以和浏览器进行通讯的集成测试神器。</p><p>目前，无论你使用什么样的前端框架，做单元测试一定会用到 Karma+Jasmine，这个组合已经成为了事实标准。Karma 是一个运行时平台，Jasmine 是用来编写测试用例的一种语法。</p><p>集成测试（场景测试）稍微复杂一些，但是一般都会用 WebDriverJS 来实现，它也是事实标准。对于 Angular 来说，集成测试所用的工具叫做 Protractor（量角器），底层也是 WebDriverJS。</p><p>如果你使用 @angular/cli 作为开发环境，在前端自动化测试方面会非常简单，因为它已经在内部集成了这些工具。</p><p>但是有一件事非常遗憾，在@angular/cli 目前发布的所有版本里面，默认生成的项目和配置文件都无法直接运行单元测试，因为@angular/cli 默认引用的一些 Node.js 模块在 Windows 平台上面有 Bug。</p><p>所以，这里不会列举 Jasmine 和 Protractor 的那些语法特性，而是帮你填平这些小坑，让你能把这个机制跑起来。至于 Jasmine 和 Protractor 详细 API 调用方式，需要你自己去研究并熟悉，请参见：</p><ul><li><a href="https://jasmine.github.io/" target="_blank" rel="noopener">https://jasmine.github.io/</a></li><li><a href="http://www.protractortest.org/" target="_blank" rel="noopener">http://www.protractortest.org</a></li></ul><p>注意，Karma、Jasmine、WebDriverJS 是通用技术，与具体的框架无关；Protractor 是专门针对 Angular 设计的，不能用在其它框架里面。</p><h3 id="35-1-单元测试"><a href="#35-1-单元测试" class="headerlink" title="35.1 单元测试"></a>35.1 单元测试</h3><p>在 @angular/cli 自动生成的项目结构里面，karma.conf.js 里面有这样一些配置项：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/2058fd60-cce9-11e9-beb5-a53251e30de8" alt=""></p><p>很可惜，这里引用的 karma-jasmine-html-reporter 这个 Node 模块在 Windows 下面有 Bug。</p><p>所以我们需要进行一些修改，把报告生成器改成 karma-htmlfile-reporter 和 karma-mocha-reporter。</p><p>我们需要修改两份配置文件：package.json 和 karma.conf.js。</p><p>第一步，把 package.json 里面的 <code>"karma-jasmine-html-reporter"</code> 这一行删掉，换成以下内容：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token string">"karma-mocha-reporter"</span><span class="token punctuation">:</span><span class="token string">"^2.2.3"</span><span class="token punctuation">,</span><span class="token string">"karma-htmlfile-reporter"</span><span class="token punctuation">:</span> <span class="token string">"~0.3"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二步，把 karma.conf.js 里面的 <code>require('karma-jasmine-html-reporter')</code> 这一行配置换成以下内容：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'karma-htmlfile-reporter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'karma-mocha-reporter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时把原来 <code>reporters: ['progress', 'kjhtml']</code> 这一行替换成下面的一段内容：</p><pre class="line-numbers language-typescript"><code class="language-typescript">reporters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'progress'</span><span class="token punctuation">,</span><span class="token string">'mocha'</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>htmlReporter<span class="token punctuation">:</span> <span class="token punctuation">{</span>    outputFile<span class="token punctuation">:</span> <span class="token string">'unit-test-report/report.html'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Optional </span>    pageTitle<span class="token punctuation">:</span> <span class="token string">'单元测试结果'</span><span class="token punctuation">,</span>    subPageTitle<span class="token punctuation">:</span> <span class="token string">'learn-test'</span><span class="token punctuation">,</span>    groupSuites<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>    useCompactStyle<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>    useLegacyStyle<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想直接拷贝 karma.conf.js 完整的内容，请参考这个空壳示例项目：</p><blockquote><p><a href="https://gitee.com/learn-angular-series/learn-test" target="_blank" rel="noopener">https://gitee.com/learn-angular-series/learn-test</a></p></blockquote><p>改完这些配置之后，使用 <code>cnpm install</code> 重新安装一下所依赖的 Node 模块，然后在终端里面执行：</p><pre class="line-numbers language-typescript"><code class="language-typescript">ng test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Karma 将会自动把你本地的 Chrome 浏览器拉起来，并且自动运行所有测试用例。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/8780c400-cce9-11e9-9a11-bbb3551196dc" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/8e9dbfe0-cce9-11e9-8d89-4fa271cb1633" alt=""></p><p>同时，在 unit-test-report 这个目录里面会生成一个 report.html，我本地跑完之后生成的内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/97762760-cce9-11e9-beb5-a53251e30de8" alt=""></p><p>接下来就看你自己的了，你需要去 Jasmine 的主页上面熟悉一下基本语法，然后编写更多的单元测试用例。</p><h3 id="35-2-集成测试"><a href="#35-2-集成测试" class="headerlink" title="35.2 集成测试"></a>35.2 集成测试</h3><p>在 @angular/cli 自动生成的项目结构里面，有一个 e2e 目录，里面有 3 个文件：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/a3a497b0-cce9-11e9-9f23-07a3e2a236db" alt=""></p><p>打开 app.po.ts，可以看到下面的内容：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> browser<span class="token punctuation">,</span> by<span class="token punctuation">,</span> element <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'protractor'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppPage</span> <span class="token punctuation">{</span>  <span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> browser<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getParagraphText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">element</span><span class="token punctuation">(</span>by<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'app-root h1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我不打算在这篇文章里面列举 Protractor 的技术特性和 API 列表，借着上面的这段代码，我大概给你介绍一下 Protractor 的整体设计思路和使用方式。</p><p>如前所述，Protractor 的底层是 WebDriverJS，从 WebDriverJS 这个名字你可以猜出来，这是一个 Driver（驱动），它是用来和浏览器进程通讯的。</p><p>Protractor 在 WebDriverJS 的基础上封装了一层，暴露出了几个非常核心的接口：</p><ul><li>browser 对象：我们可以利用这个对象来操纵浏览器，比如打开和关闭浏览器窗口、让浏览器窗口最大（小）化、控制浏览器导航到某个 URL 路径。</li><li>element 和 by 对象：我们可以利用这两个对象来控制浏览器内部的 HTML 元素，而其基本的语法和 CSS 选择器非常类似，并没有太多的学习成本。</li></ul><h3 id="35-3-小结"><a href="#35-3-小结" class="headerlink" title="35.3 小结"></a>35.3 小结</h3><p>推荐阿里发布的前端自动化测试 f2etest 框架，这是目前较强大的一款前端自动化框架，而且是开源免费的。f2etest 的底层也是用的 Karma+Jasmine 和 WebDriverJS 这套东西，它在此基础上进行了自己的封装，可以利用多台虚拟机实现浏览器云的效果。关于 f2etest 的更多详情请参考这个链接：<a href="https://github.com/alibaba/f2etest" target="_blank" rel="noopener">https://github.com/alibaba/f2etest</a>，里面有详细的文档和上手教程。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d2868bb0-cce9-11e9-9a11-bbb3551196dc" alt=""></p><p>虽然已经有了这么多强大的工具，但是国内大多数企业并没有真正去编写测试用例。因为测试用例本身也是代码，而国内大多数企业都会不停地改需求，这就会导致测试用例的代码也需要不停地改。不写测试用例我们已经 996 了，根本没有任何动力去把工作量增加一倍。</p><p>所以，如你所知，像TDD 这种东西，还是让它停留在美丽的幻想里面吧。</p><p>对于自动化测试这件事，也许只能量力而行，能做就做一些，实在不想做的话，最起码要知道怎么做。</p><p>当然，也有少量的企业自己搭建了完善的持续集成平台，如果有这样的技术基础，自动化测试做起来会轻松很多。</p><h2 id="36-注射器树基础知识"><a href="#36-注射器树基础知识" class="headerlink" title="36.注射器树基础知识"></a>36.注射器树基础知识</h2><p>为了能更方便地理解后面的内容，你需要预先理解以下两个概念：</p><ul><li>组件树</li><li>注射器树</li></ul><p>同时还要介绍一个调试神器 Augury，注意，这货读 [‘ɔ:ɡjuri]，是“占卜”、“预言”的意思，不是 angry，不是愤怒！</p><h3 id="36-1-组件树"><a href="#36-1-组件树" class="headerlink" title="36.1 组件树"></a>36.1 组件树</h3><p>目前，几乎所有前端框架都在玩“组件化”，而且最近都不约而同地选择了“标签化”这种思路，Angular 也不例外。“标签化”会导致一个很自然的结果，组件之间会形成树形结构。例如，对于下面这样一个界面：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d818c9a0-d25f-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>用 Angular 实现出来的组件树结构是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/e8783970-d25f-11e9-8d0f-6b56ebcd1907" alt=""></p><p>在线查看运行效果：</p><blockquote><p><a href="http://47.104.13.149:4200/" target="_blank" rel="noopener">http://47.104.13.149:4200/</a></p></blockquote><p>repo 地址：</p><blockquote><p><a href="http://git.oschina.net/mumu-osc/NiceFish" target="_blank" rel="noopener">http://git.oschina.net/mumu-osc/NiceFish</a></p></blockquote><h3 id="36-2-Injector-Tree"><a href="#36-2-Injector-Tree" class="headerlink" title="36.2 Injector Tree"></a>36.2 Injector Tree</h3><p>如你所知，AngularJS 是第一个把“依赖注入”（Dependency Injection）思想带到前端开发领域的框架。</p><p>关于“注射器树”这事儿这里要说得更精确一点：<strong>如果一个 DOM 元素上面被创建了 Component 或者 Directive，Angular 就会创建一个对应的注射器实例。</strong></p><p>对于上面的组件结构，形成的注射器结构是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/0292cfa0-d260-11e9-bcae-b7c2737c8da6" alt=""></p><p>很明显，这些 Injector 实例也构成了树形结构：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/092ae410-d260-11e9-8d0f-6b56ebcd1907" alt=""></p><p><strong>请记住这个树形结构，后续的所有内容都是以此为基础展开的。</strong></p><h3 id="36-2-利用Augury可视化查看注射器树"><a href="#36-2-利用Augury可视化查看注射器树" class="headerlink" title="36.2 利用Augury可视化查看注射器树"></a>36.2 利用Augury可视化查看注射器树</h3><p>Augury 是一款 Chrome 插件，它是调试 Angular 应用的利器，利用它可以可视化展示组件树、路由树，以及服务依赖关系。</p><p>比如，对于 NiceFish 首页：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3280b560-d260-11e9-b943-9d5bb2abdc80" alt=""></p><p>它的服务依赖关系是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/386c0f10-d260-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>组件依赖关系是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3e258350-d260-11e9-b943-9d5bb2abdc80" alt=""></p><p>整体路由树是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/44e2fa10-d260-11e9-b943-9d5bb2abdc80" alt=""></p><h3 id="36-3-小结"><a href="#36-3-小结" class="headerlink" title="36.3 小结"></a>36.3 小结</h3><p>到这里为止，你知道了：<strong>在 Angular 应用运行时，组件之间会构成树形结构，Injector（注射器）的实例也会构成树形结构。</strong></p><p>接下来，我们从易到难，就可以把注射器玩儿出花来。</p><h3 id="36-4-参考资源"><a href="#36-4-参考资源" class="headerlink" title="36.4 参考资源"></a>36.4 参考资源</h3><ul><li><a href="https://angular.io/guide/dependency-injection" target="_blank" rel="noopener">https://angular.io/guide/dependency-injection</a></li><li><a href="http://git.oschina.net/mumu-osc/NiceFish" target="_blank" rel="noopener">http://git.oschina.net/mumu-osc/NiceFish</a></li></ul><h2 id="37-Angular依赖注入的基本玩法（1）"><a href="#37-Angular依赖注入的基本玩法（1）" class="headerlink" title="37.Angular依赖注入的基本玩法（1）"></a>37.Angular依赖注入的基本玩法（1）</h2><p>Angular 的依赖注入机制很强大，这一节我们玩儿三种最典型的场景：</p><ul><li>全局单例模式的 Service</li><li>多实例模式的 Service</li><li>异步模块上的 Service</li></ul><h3 id="37-1-全局单例模式"><a href="#37-1-全局单例模式" class="headerlink" title="37.1 全局单例模式"></a>37.1 全局单例模式</h3><p>我们有一个 UserListComponent，它会利用 UserListService 来加载数据，写法如下。</p><p>在 UserListComponent 的构造函数里声明 UserListService：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/94de49c0-d260-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>编写 UserListService 的具体实现：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/9bd239d0-d260-11e9-b943-9d5bb2abdc80" alt=""></p><p>在根模块 AppModule 的 providers 里面配置 UserListService：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/a454e030-d260-11e9-bcae-b7c2737c8da6" alt=""></p><p>运行起来的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/ab05acc0-d260-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>再看一下以上代码，你没有直接 new UserListService 对不对？很明显，Angular 在运行时自动帮你创建了 Service 的实例。</p><p>OK，看起来不错，但是如何证明这个 Service 是全局单例呢？</p><p>我们在界面上再放一个 UserListComponent 的实例，然后把 UserListService 的 id 打印出来看是否相同，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/b5fbc420-d260-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>运行起来的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/bd823030-d260-11e9-b943-9d5bb2abdc80" alt=""></p><p>可以看到，在两个 UserListComponent 实例中，使用的都是同一个 UserListService 实例。</p><p>这种全局单例模式很有用，你可以利用它来实现整个 App 范围内的数据共享。</p><p><strong>注意：在同步 NgModule 里面配置的 provider 在整个 App 范围内都是可见的，也就是说，即使你在某个子模块里面配置的 provider，它们依然是全局可见的，可以被注射到任意类里面。</strong></p><h3 id="37-2-多实例模式"><a href="#37-2-多实例模式" class="headerlink" title="37.2 多实例模式"></a>37.2 多实例模式</h3><p>有人会说，如果我想创建多个 UserListService 实例，怎么办？</p><p>我们把 UserListComponent 改成这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/cfba57a0-d260-11e9-b943-9d5bb2abdc80" alt=""></p><p>然后在界面上放两个实例：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/d69ae6c0-d260-11e9-bcae-b7c2737c8da6" alt=""></p><p>运行起来的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/de0b0bb0-d260-11e9-b943-9d5bb2abdc80" alt=""></p><p>可以看到，如果把 UserListService 配置在 UserListComponent 内部的 providers 中，就不再是单例模式了，每个 UserListComponent 都拥有自己独立的 UserListService 实例。</p><p>组件内部的 provider 生命周期与组件自身保持一致，当组件被销毁的时候，它内部的 provider 也会被销毁掉。</p><h3 id="37-3-异步模块上的注射器"><a href="#37-3-异步模块上的注射器" class="headerlink" title="37.3 异步模块上的注射器"></a>37.3 异步模块上的注射器</h3><p>以上都是同步模块，对于懒加载进来的异步模块，注射器是一种什么样的结构呢？</p><p>我们来做一个复杂一点的例子，默认展示首页：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/ee57dde0-d260-11e9-bcae-b7c2737c8da6" alt=""></p><p>点击“用户列表”之后导航到 <a href="http://localhost:4200/userlist" target="_blank" rel="noopener">http://localhost:4200/userlist</a> 展示用户列表：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/f5144330-d260-11e9-8d0f-6b56ebcd1907" alt=""></p><p>“用户列表”是一个异步模块，从 Chrome 的网络面板上可以看到这个模块是点击之后才加载进来的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/fcafe4f0-d260-11e9-bcae-b7c2737c8da6" alt=""></p><p>用 Augury 展示 UserListService 实例的依赖关系：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/03b4c4f0-d261-11e9-b943-9d5bb2abdc80" alt=""></p><p><strong>注意：异步模块里面配置的 providers 只对本模块中的成员可见。如果你在其它模块里面引用异步模块里面配置的 provider，会产生异常。这里的本质原因是，Angular 会给异步加载的模块创建独立的注射器树。</strong></p><p>你可以自己尝试修改以上例子继续测试。</p><h3 id="37-4-小结"><a href="#37-4-小结" class="headerlink" title="37.4 小结"></a>37.4 小结</h3><p>来总结一下这个注入机制，它的运行规则是这样的：</p><ul><li>如果组件内部配置了 providers，优先使用组件上的配置来创建注入对象。</li><li>否则向父层组件继续查找，父组件上找不到继续向所属的模块查找。</li><li>一直到查询到根模块 AppModule 里面的 providers 配置。</li><li>如果没有找到指定的服务，抛异常。</li><li>同步模块里面配置的 providers 是全局可见的，即使是很深的子模块里面配置的 providers，依然是全局可见的。</li><li><strong>异步模块里面配置的 providers 只对本模块中的成员可见。这里的本质是，Angular 会给异步加载的模块创建独立的注射器树。</strong></li><li>组件里面配置的 providers 对组件自身和所有子层组件可见。</li><li>注射器的生命周期与组件自身保持一致，当组件被销毁的时候，对应的注射器实例也会被销毁。</li></ul><p>简而言之，Angular 的 Injector Tree 机制与 JavaScript 的原型查找类似。对于日常的开发来说，知道这些已经足够，可以覆盖 90% 以上的业务场景了。</p><p>但是，既然这是在说 DI，我们可以玩儿一些复杂的花样，请继续下一个小节。</p><h3 id="37-5-参考资源"><a href="#37-5-参考资源" class="headerlink" title="37.5 参考资源"></a>37.5 参考资源</h3><ul><li><a href="http://es6.ruanyifeng.com/#docs/decorator" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/decorator</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/decorators.html</a></li></ul><h2 id="38-Injectable-amp-Inject（2）"><a href="#38-Injectable-amp-Inject（2）" class="headerlink" title="38.@Injectable &amp; @Inject（2）"></a>38.@Injectable &amp; @Inject（2）</h2><h3 id="38-1-自动档-Injectable"><a href="#38-1-自动档-Injectable" class="headerlink" title="38.1 自动档 @Injectable"></a>38.1 自动档 @Injectable</h3><p>在上一小节里面，UserListService 服务直接返回了一个数组字面值。在真实的应用中，我们需要到服务端去加载数据。这就需要用到 Angular 提供的 HttpClient 服务了，这里我们需要把 HttpClient 服务注射到 UserListService 服务里面去，做法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/6a965ad0-d261-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>别忘记在 app.module 里面 import 一下 HttpClientModule：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/5ad1f280-d261-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>我们注意到，在以上第一段代码里面，UserListService 顶部有一个 @Injectable 装饰器。那么 @Injectable 到底对 UserListService 做了什么猥琐的事情呢？</p><p>我们来看 ng build 之后生成的代码：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/792688e0-d261-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>可以看到，编辑器生成了一些奇怪的东西，看起来像是保留了一些类型信息。</p><p>如果我们把 @Injectable 删掉会怎么样呢？来看最终编译出来的代码：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/7f81e270-d261-11e9-8d0f-6b56ebcd1907" alt=""></p><p>可以看到，去掉 @Injectable 装饰器之后，生成出来的代码发生了很大的变化，而且运行会报错：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/85907b90-d261-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>OK，我们大概可以猜到 @Injectable 装饰器的作用了：如果存在 @Injectable 装饰器，TS 编译器就会在最终生成的代码里面保留类型元数据（实际上是内核里面定义的 decorator 函数），然后 Angular 在运行时就可以根据这些信息来注射指定的对象。否则，运行时就无法解析参数类型了。</p><p><strong>简而言之：如果一个 Service 里面需要依赖其它 Service，需要使用 @Injectable 装饰器进行装饰。</strong></p><p><strong>为了不给自己找麻烦，最好所有 Service 都加上 @Injectable 装饰器，这是一种良好的编码风格。用 @angular/cli 生成的 Service 会自动在头部加上 @Injectable 装饰器，不需要你操心。</strong></p><h3 id="38-2-手动档-利用-Inject指定类型信息"><a href="#38-2-手动档-利用-Inject指定类型信息" class="headerlink" title="38.2 手动档:利用@Inject指定类型信息"></a>38.2 手动档:利用@Inject指定类型信息</h3><p>除了在 UserListService 顶部添加 @Injectable 装饰器之外，还有一种非常不常用的方法，利用 @Inject 装饰器手动指定类型信息，代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/9d1ec190-d261-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>编译之后生成的代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/a2ba9bb0-d261-11e9-8d0f-6b56ebcd1907" alt=""></p><p>可以看到，我们自己使用 @Inject 装饰器编译之后也生成了对应的类型元数据，并且运行起来也不会报错。</p><p><strong>仔细观察你就会发现，用 @Inject 和用 @Injectable 最终编译出来的代码是不一样的。用 @Inject 生成的代码多了很多东西，如果出现大量这种代码，最终编译出来的文件体积会变大。</strong></p><h3 id="38-3-Inject-的其它用法"><a href="#38-3-Inject-的其它用法" class="headerlink" title="38.3 @Inject 的其它用法"></a>38.3 @Inject 的其它用法</h3><p>在以上例子里面，我们注入的都是强类型的对象。</p><p>有人就会问了：如果我想注入弱类型的对象字面值可不可以呢？</p><p>当然可以，但是稍微麻烦一点。</p><p>比如你想把这样一个配置对象注入给 LiteralService 服务：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/aec35b90-d261-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>app.module 里面是这样配置的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/b4b62f50-d261-11e9-b943-9d5bb2abdc80" alt=""></p><p>在 LiteralService 里面使用 @Inject 来注入：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/bb249bb0-d261-11e9-bcae-b7c2737c8da6" alt=""></p><p>运行起来的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/c05d9550-d261-11e9-8d0f-6b56ebcd1907" alt=""></p><p><strong>特别注意：这种玩法非常罕见，除非你想自己实现一些特别猥琐的功能才用得到。比如上面这个例子，你可以直接利用 TypeScript 的 import 机制，直接把配置文件 import 进来完事。</strong></p><h3 id="38-4-总结"><a href="#38-4-总结" class="headerlink" title="38.4 总结"></a>38.4 总结</h3><p>简而言之，@Injectable 与 @Inject 之间的关系，就像自动档和手动档的区别。如果不是有奇怪的癖好，当然是自动档开起来舒服，老司机都懂的。</p><ul><li>我们可以自己手动用 @Inject 装饰器来让 TypeScript 编译器保留类型元数据，但是一般来说不需要这么干。（也就是说，@Inject 装饰器一般是用不到的，除非你想做一些猥琐的事情。）</li><li>保留类型元数据的另一个简便方法是使用 @Injectable 装饰器，@Injectable 并没有什么神奇的作用，它只是告诉 TS 编译器：请生成类型元数据。然后 Angular 在运行时就知道应该注射什么类型的对象了。</li><li>这是 TypeScript 强加的一个规则，如果不加 @Injectable 装饰器，TS 编译器会把参数类型元数据丢弃。</li><li><strong>对于 Angular 中的 Service 来说，最好都加上@Injectable 装饰器，这是一种良好的编码风格。</strong></li></ul><h2 id="39-Self-的用法"><a href="#39-Self-的用法" class="headerlink" title="39.@Self 的用法"></a>39.@Self 的用法</h2><h3 id="39-1-使用父层组件上的-UserListService-实例"><a href="#39-1-使用父层组件上的-UserListService-实例" class="headerlink" title="39.1 使用父层组件上的 UserListService 实例"></a>39.1 使用父层组件上的 UserListService 实例</h3><p>前面说到Injector 会构成树形结构，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/f6fd3200-d261-11e9-8d0f-6b56ebcd1907" alt=""></p><p>这就意味着，如果我们在父层组件里面定义了 UserListService，子层组件可以直接使用同一个实例。</p><p>继续前面的例子进行改造，给 UserListComponent 加一层子组件，组件名字就叫 ChildComponent，运行起来的界面效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/031f1f30-d262-11e9-b943-9d5bb2abdc80" alt=""></p><p>ChildComponent 里面没有配置 providers，代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/09ea0370-d262-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>父层的 UserListComponent 配置了 providers，代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/11356250-d262-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>Augury 图形化展示出来的依赖关系是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/172290c0-d262-11e9-bcae-b7c2737c8da6" alt=""></p><p>从运行效果可以看到：由于 ChildComponent 嵌套在 UserListComponent 内部，而且它自己没有配置 providers，所以它共享了父层的 UserListService 实例。</p><p>那么问题就来了，如果 ChildComponent 想要自己独立的 UserListService 实例，应该怎么做呢？</p><h3 id="39-2-Self-装饰器"><a href="#39-2-Self-装饰器" class="headerlink" title="39.2 @Self 装饰器"></a>39.2 @Self 装饰器</h3><p>我们可以利用 @Self 装饰器来提示注射器，不要向上查找，只在组件自身内部查找依赖。</p><p>我们给 ChildComponent 内部的 UserListService 声明加上@Self 装饰器：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/22b647b0-d262-11e9-b943-9d5bb2abdc80" alt=""></p><p>然后当然就报错啦：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/28f6ed50-d262-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>很好理解对吧，我们用 @Self 装饰器把查找依赖的范围限定在 ChildComponent 组件自身内部，但是 ChildComponent 自己并没有配置 UserListService，当然就找不到了。</p><p>所以，我们要在 ChildComponent 组件内部补上 providers 配置项：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/32c107d0-d262-11e9-8d0f-6b56ebcd1907" alt=""></p><p>然后从运行结果可以看到，父层和子层已经是不同的 UserListService 实例了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/391890d0-d262-11e9-bcae-b7c2737c8da6" alt=""></p><p>Augury 图形化展示出来的依赖关系是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3ec3fb50-d262-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>顺便说一句：很多初学者遇到异常的时候不仔细看堆栈，碰到问题就在群里叫，然后被人鄙视。</p><p><strong>像这种“No provider for…”基本上都是因为缺了 providers 配置项导致的，老司机扫一眼就懂，并不需要 Debug，也不需要查文档，知道为什么别人打代码速度辣么快了吧？</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/584c3c90-d262-11e9-8d0f-6b56ebcd1907" alt=""></p><h2 id="40-Optional-的用法"><a href="#40-Optional-的用法" class="headerlink" title="40.@Optional 的用法"></a>40.@Optional 的用法</h2><h3 id="40-1-Optional基本用法"><a href="#40-1-Optional基本用法" class="headerlink" title="40.1 @Optional基本用法"></a>40.1 @Optional基本用法</h3><p>我们在 ChildComponent 的构造函数里面加上 @Optional 装饰器进行装饰：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/bd0218d0-d262-11e9-84ba-0bd4ba7d7fb3" alt=""></p><p>然后父组件 UserListComponent 里面清空，啥也没有：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/c3449330-d262-11e9-bcae-b7c2737c8da6" alt=""></p><p>当然，NgModule 里面也不声明 UserListService。</p><p>注射器看到 @Optional 装饰器之后就知道这个服务是可选的，处理逻辑如下：</p><ul><li>沿着 Injector Tree 向上找一遍，如果找到了需要注入的类型，就创建实例。</li><li>如果啥都没找到，直接赋值为 null，<strong>不抛异常</strong>。</li></ul><h3 id="40-2-Self与-Optional组合使用"><a href="#40-2-Self与-Optional组合使用" class="headerlink" title="40.2 @Self与@Optional组合使用"></a>40.2 @Self与@Optional组合使用</h3><p><strong>注意：组合使用的方式在官方文档里面没有详细说明，请对照例子仔细理解一下。</strong></p><p>装饰器是可以组合使用的，所以 ChildComponent 的构造函数里面可以写成这样：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">constructor</span><span class="token punctuation">(</span>    @<span class="token function">Self</span><span class="token punctuation">(</span><span class="token punctuation">)</span> @<span class="token function">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> userListService<span class="token punctuation">:</span>UserListService<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种用法的含义是：</p><ul><li>因为 @Self 装饰器限定了查找范围，所以只在 ChildComponent 自身内部进行查找。父层组件有没有定义对应的服务，不会产生任何影响。</li><li>因为有 @Optional 装饰器，所以如果 ChildComponent 自身内部提供了对应的服务，就创建实例，否则就直接赋值为 null，不抛异常。</li></ul><p>怎么样，挺清晰的对吧？</p><p>你还可以自己测试一下更复杂的玩法，组合使用 3 个以上的装饰器看看。</p><h2 id="41-SkipSelf的用法"><a href="#41-SkipSelf的用法" class="headerlink" title="41.@SkipSelf的用法"></a>41.@SkipSelf的用法</h2><h3 id="41-1-SkipSelf基本用法"><a href="#41-1-SkipSelf基本用法" class="headerlink" title="41.1 @SkipSelf基本用法"></a>41.1 @SkipSelf基本用法</h3><p>从名字可以猜出来它的含义：跳过组件自身，然后沿着 Injector Tree 向上查找。</p><p>继续在前面的例子上改造 ChildComponent，改成这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/e60caee0-d7c9-11e9-9143-0bdf45914741" alt=""></p><p>父组件是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/ec53e430-d7c9-11e9-8797-4924c0d7c082" alt=""></p><p>可以看到，我们在 ChildComponent 和它的父层组件 UserListComponent 上都配置了 UserListService。但是， ChildComponent 上有 @SkipSelf 装饰器，所以 ChildComponent 上的配置并没有起作用，使用的还是 UserListComponent 上的实例：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/f67f3180-d7c9-11e9-8fae-816b29059b0c" alt=""></p><h3 id="41-2-SkipSelf与-Optional组合使用"><a href="#41-2-SkipSelf与-Optional组合使用" class="headerlink" title="41.2 @SkipSelf与@Optional组合使用"></a>41.2 @SkipSelf与@Optional组合使用</h3><p>同样，我们可以组合使用 @SkipSelf 与 @Optional：</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">SkipSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> @<span class="token function">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> userListService<span class="token punctuation">:</span> UserListService<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样写的含义是：</p><ul><li>因为使用了 @SkipSelf 装饰器，所以直接跳过 ChildComponent 组件自身，从 Injector Tree 的父层节点向上进行查找。也就是说，不管 ChildComponent 组件自己有没有配置 UserListService 都不起作用，因为跳过去了。</li><li>因为使用了 @Optional 装饰器，如果在父层上面找到了指定的类型，那就创建实例；否则，直接设置为 null，不抛异常。</li></ul><h2 id="42-Host-的使用"><a href="#42-Host-的使用" class="headerlink" title="42.@Host 的使用"></a>42.@Host 的使用</h2><p>Host 这个单词有“宿主”的意思，就像病毒和 OS 之间的关系。</p><p>你可以意会一下 @Host 这个装饰器的特性。</p><h3 id="42-1-Host的基本用法"><a href="#42-1-Host的基本用法" class="headerlink" title="42.1 @Host的基本用法"></a>42.1 @Host的基本用法</h3><p>默认情况下，@Host 装饰器会指示注射器在组件自己内部去查找所依赖的类型，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/29ed6460-d7ca-11e9-9143-0bdf45914741" alt=""></p><p>如果 @Host 只有这一个特性的话，它就没什么存在的必要了，实际上它更核心的功能与所谓的 Content Projection（内容投影）机制有关。</p><h3 id="42-2-Content-Projection（内容投影）"><a href="#42-2-Content-Projection（内容投影）" class="headerlink" title="42.2 Content Projection（内容投影）"></a>42.2 Content Projection（内容投影）</h3><p>有时候，组件内部放什么内容并不固定，而是需要调用方在使用组件的时候去指定，这是 Content Projection 最核心的一个作用。</p><p>我们继续修改 ChildComponent 这个组件，在上面使用 @Host 装饰器，但是不配置 UserListService，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/354c28a0-d7ca-11e9-8fae-816b29059b0c" alt=""></p><p>父层组件 UserListComponent 的改动幅度比较大，首先我们还是给它配置了 UserListService，就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3d0b09d0-d7ca-11e9-8797-4924c0d7c082" alt=""></p><p>然后我们还修改了 UserListComponent 的 HTML 模板代码，这里跟前面的例子都不一样，我们不再把 <child> 写死在模板内部，而是在模板里面使用了一个 <ng-content> 标签。ng-content 的本质是一个占位符，这个占位符会被真正投影进来的内容替换掉。</ng-content></child></p><p>现在 UserListComponent 的模板代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/4b477290-d7ca-11e9-8797-4924c0d7c082" alt=""></p><p>在 AppComponent 的 HTML 模板里面，使用 UserListComponent 的方式也发生了改变，<user-list> 标签的内部嵌套了一个子层标签，这在之前的例子里面是没有出现过的，就像这样：</user-list></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/5558a830-d7ca-11e9-9143-0bdf45914741" alt=""></p><p>运行起来的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/5befd240-d7ca-11e9-a536-c512dee3d564" alt=""></p><p>可以看到，投影进来的子组件和父层的宿主组件共用了同一个 UserListService 实例。</p><p>用 Augury 图形化展示出来是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/63897830-d7ca-11e9-9143-0bdf45914741" alt=""></p><p>“内容投影”的优点在于：UserListComponent 的 HTML 模板没有和 ChildComponent 紧密耦合在一起，因为 ChildComponent 是被“投影”进来的，未来如果你觉得不爽，可以投影一个另外的组件实例进来（当然这里的代码还得小改一番才能实现）。于是，两个组件都变得比较灵活了，而不会出现谁也离不开谁的情况。</p><p>@Host 装饰器会提示注射器：要么在组件自己内部查找需要的依赖，要么到 Host（宿主）上去查找。</p><p>怎么样，能理解这里 Host 一词的意味了吧？</p><p><strong>简而言之：@Host 装饰器是用来在被投影的组件和它的宿主之间构建联系的。</strong></p><p>“内容投影”机制还有很多非常重要的作用，在 <a href="http://gitbook.cn/gitchat/column/59dae2081e6d652a5a9c3603" target="_blank" rel="noopener">《Angular 初学者快速上手指南》</a>里面有非常琐碎的描述，如果你还没有深入理解它，请移步过去阅读。</p><h3 id="42-3-Host-和-Optional-组合使用"><a href="#42-3-Host-和-Optional-组合使用" class="headerlink" title="42.3 @Host 和 @Optional 组合使用"></a>42.3 @Host 和 @Optional 组合使用</h3><p>如上所述，@Host 会尝试到宿主组件上去查找依赖，那么问题就来了，如果宿主上面并没有所需要的东西，怎么办呢？</p><p>借着上面的例子，我们把 UserListComponent 里面配置的 UserListService 注释掉：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/8efbe7f0-d7ca-11e9-a536-c512dee3d564" alt=""></p><p>然后理所当然就报错了，因为现在宿主上并没有所需要对象：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/95b714c0-d7ca-11e9-9143-0bdf45914741" alt=""></p><p>如果不想出现这种报错，而且你认为对于 ChildComponent 来说， UserListService 并不是在构造的时候就必须的，@Optional 装饰器就可以派上用场了：</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> @<span class="token function">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> userListService<span class="token punctuation">:</span> UserListService<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="43-手动操作注射器实例"><a href="#43-手动操作注射器实例" class="headerlink" title="43.手动操作注射器实例"></a>43.手动操作注射器实例</h2><p><strong>官方文档特别强调：开发者可以手动操作 Injector 的实例，但是这种情况非常罕见。</strong></p><p>所以那部分文档隐藏了一些黑魔法，这里我们自己揭开盖子来玩儿。</p><h3 id="43-1-注入Injector实例"><a href="#43-1-注入Injector实例" class="headerlink" title="43.1 注入Injector实例"></a>43.1 注入Injector实例</h3><p>我们继续在前面的例子上改进，来尝试手动操作 Injector 的实例：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/cdc041a0-d7cc-11e9-a536-c512dee3d564" alt=""></p><p>你可以自己用 Chrome 打开开发者工具看看 Injector 实例上面都有些什么属性：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/df6aa800-d7cc-11e9-a536-c512dee3d564" alt=""></p><p><strong>很明显，Injector 本身也是一个服务。</strong></p><h3 id="43-2-手动创建注射器实例"><a href="#43-2-手动创建注射器实例" class="headerlink" title="43.2 手动创建注射器实例"></a>43.2 手动创建注射器实例</h3><p>在上面的例子里面，Injector 实例是 Angular 帮我们自动创建的。如果我们自己创建注射器，可不可以呢？</p><p>当然是 OK 的，Angular 内核默认提供了 3 种 Injector 的实现，：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/f02704e0-d7cc-11e9-8fae-816b29059b0c" alt=""></p><ul><li>_NullInjector 是内部使用的私有类，外部无法引用。</li><li>StaticInjector 可以在外部使用，但是文档里面没有描述。</li><li>ReflectiveInjector，反射型注射器。如果你学过 Java 里面的反射机制，从 ReflectiveInjector 这个名字你可以猜测到它内部是怎么运行的。</li></ul><p>测试 Demo 的核心代码如下：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> Injector<span class="token punctuation">,</span> ReflectiveInjector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> TestService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./service/test.service'</span><span class="token punctuation">;</span><span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//尝试自己手动创建 userListService 实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userListService<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>UserListService<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userListService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userListService<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userList<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token operator">=</span>userList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尝试自己创建注射器，然后利用注射器自己注射 TestService 服务实例</span>    <span class="token keyword">let</span> myInjector <span class="token operator">=</span> ReflectiveInjector<span class="token punctuation">.</span><span class="token function">resolveAndCreate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span> provide<span class="token punctuation">:</span> <span class="token string">"TestService"</span><span class="token punctuation">,</span> useClass<span class="token punctuation">:</span> TestService <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myInjector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>testService <span class="token operator">=</span> myInjector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"TestService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>testService<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/034c9990-d7cd-11e9-8fae-816b29059b0c" alt=""></p><p>尝试自己创建注射器，然后利用注射器自己创建了 TestService 服务实例。</p><p><strong>注意：从 Angular 5.x 开始，ReflectiveInjector 被标记成了过时的，官方建议使用静态方法 Injector.create。</strong></p><h2 id="44-综合案例OpenWMS介绍"><a href="#44-综合案例OpenWMS介绍" class="headerlink" title="44.综合案例OpenWMS介绍"></a>44.综合案例OpenWMS介绍</h2><p>通过前面的小节，我们已经熟悉了 Angular 的方方面面，最后，我们来一个综合的大例子。</p><p>OpenWMS 也是一个开源项目，同时提交在 GithuHb 和 Gitee 上：</p><ul><li><a href="https://github.com/damoqiongqiu/OpenWMS-Frontend" target="_blank" rel="noopener">https://github.com/damoqiongqiu/OpenWMS-Frontend</a></li><li><a href="https://gitee.com/mumu-osc/OpenWMS-Frontend" target="_blank" rel="noopener">https://gitee.com/mumu-osc/OpenWMS-Frontend</a></li></ul><p>这个项目的技术特性如下：</p><ul><li>Angular 核心包：7.0.0</li><li>组件库：PrimeNG 6.1.5</li><li>图表：ngx-echarts</li><li>国际化：ngx-translate</li><li>字体图标：font-awesome</li></ul><p>OpenWMS 为你提供了一个可以借鉴的项目模板，把真实业务开发过程中的模块都配置好了。</p><h3 id="44-1-模块分析"><a href="#44-1-模块分析" class="headerlink" title="44.1 模块分析"></a>44.1 模块分析</h3><p>以下是项目 build 出来的体积：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/449fed70-d7cd-11e9-a536-c512dee3d564" alt=""></p><p>用 webpack-bundle-analyzer 分析之后可以看到各个模块在编译之后所占的体积：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/4bd134a0-d7cd-11e9-8797-4924c0d7c082" alt=""></p><p>可以看到，主要是因为 ECharts 和 PrimeNG 占的体积比较大，建议您在使用的时候做一下异步，用不到的组件不要一股脑全部导入进来。</p><h3 id="44-2-效果截图"><a href="#44-2-效果截图" class="headerlink" title="44.2 效果截图"></a>44.2 效果截图</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/54fb8cb0-d7cd-11e9-8797-4924c0d7c082" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/5a8f7790-d7cd-11e9-8fae-816b29059b0c" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/64978570-d7cd-11e9-a536-c512dee3d564" alt=""></p><h2 id="45-快速上手-PWA"><a href="#45-快速上手-PWA" class="headerlink" title="45.快速上手 PWA"></a>45.快速上手 PWA</h2><h3 id="45-1-PWA-是什么？"><a href="#45-1-PWA-是什么？" class="headerlink" title="45.1 PWA 是什么？"></a>45.1 PWA 是什么？</h3><p>PWA 是 Google 在 2015 年提出的一种全新的 Web 应用开发规范。</p><p>PWA 这个缩写是由 Google Chrome 团队的 Alex Russell 提出来的。</p><p>PWA 的全称是 Progressive Web Apps，翻译成中文是“渐进式WEB应用”。</p><p>PWA 不针对特定的语言，也不针对特定的框架，它本身只是一种规范，只要你的应用能满足 PWA 提出的规范，那么它就是一款 PWA 应用。</p><p>PWA 需要具备的关键特性有：</p><ul><li>应用无需安装，无需发布到应用市场</li><li>可以在主屏幕上创建图标</li><li>可以离线运行，利用后台线程与服务端通讯（由 ServiceWorker 特性来支持）</li><li>对搜索引擎友好</li><li>支持消息推送</li><li>支持响应式设计，支持各种类型的终端和屏幕</li><li>方便分享，用户可以方便地把应用内部的 URL 地址分享出去</li></ul><p>如果你想知道自己的应用是否是 PWA，官方提供了一份清单可供核对：</p><blockquote><p><a href="https://developers.google.com/web/progressive-web-apps/checklist" target="_blank" rel="noopener">https://developers.google.com/web/progressive-web-apps/checklist</a></p></blockquote><p>Google 官方对 PWA 的描述是这样的：</p><blockquote><p>Progressive Web Apps are just great web sites that can behave like native apps—or, perhaps, Progressive Web Apps are just great apps, powered by Web technologies and delivered with Web infrastructure.</p></blockquote><h3 id="45-2-三大厂商已经全部支持-PWA"><a href="#45-2-三大厂商已经全部支持-PWA" class="headerlink" title="45.2 三大厂商已经全部支持 PWA"></a>45.2 三大厂商已经全部支持 PWA</h3><p>目前，Apple、Microsoft、Google 已经全部支持 PWA 技术。</p><p>Google 的 Android 平台、Chrome 平台、Chrome Book 平台已经能全部支持 PWA：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/261db620-dd59-11e9-9cc8-a572519b0723" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/2ccd2320-dd59-11e9-a584-59c5758c1abc" alt=""></p><p>iOS 11.3 开始内置支持 PWA：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3454c7b0-dd59-11e9-a584-59c5758c1abc" alt=""></p><p>Windows 10 已经全面支持 PWA，目前 Windows 10 的应用商店里面已经有非常多的 PWA 应用了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/3c857d80-dd59-11e9-a584-59c5758c1abc" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/43e798b0-dd59-11e9-a584-59c5758c1abc" alt=""></p><p>三大厂商齐心合力支持同一种技术规范是非常罕见的现象，从目前的情况看，PWA 将会成为一个比较大的热点。</p><blockquote><p>注意：国内外的互联网生态完全不同，国内移动互联网基本上被微信、今日头条所把持，目前微信小程序的影响力比 PWA 更大，微信小程序的数量已经超过 100 万个。另外，很多消息推送服务在国内用不了。</p></blockquote><h3 id="45-3-中国厂商的“快应用”与PWA的区别"><a href="#45-3-中国厂商的“快应用”与PWA的区别" class="headerlink" title="45.3 中国厂商的“快应用”与PWA的区别"></a>45.3 中国厂商的“快应用”与PWA的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/50645010-dd59-11e9-9cc8-a572519b0723" alt=""></p><p>2018 年 3 月 20 日，国内 10 大手机厂商共同参会，支持“快应用”标准，这些厂商包括：华为、中兴、小米、Oppo、Vivo、魅族、联想等。</p><p>从技术层面看，“快应用”与 ReactNative 类似，它和 PWA 完全不同。PWA 是完全的 Web 技术，借助于浏览器渲染，是“页面”。而“快应用”是类似于 RN 的“原生渲染”模式，JS 相关的代码运行在 JSCore 里面，然后通过 Bridge 驱动原生代码渲染 UI 界面，整体思路如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images.gitbook.cn/6bd7bf80-dd59-11e9-a584-59c5758c1abc" alt=""></p><p>从目前的发展情况来看，小米 8 已经对“快应用”做了很好的支持。</p><h3 id="45-4-参考资源"><a href="#45-4-参考资源" class="headerlink" title="45.4 参考资源"></a>45.4 参考资源</h3><ul><li>2015 年 11 月，Alex Russell 关于 PWA 的<a href="https://medium.com/@slightlylate/progressive-apps-escaping-tabs-without-losing-our-soul-3b93a8561955" target="_blank" rel="noopener">原始文章</a></li><li>Google 官方提供的<a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">文档</a></li><li><a href="https://www.quickapp.cn/" target="_blank" rel="noopener">快应用官方网站</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Angular Crash Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-5-1-NetCore31Start</title>
      <link href="/2020/03/07/dotnet-advanced-series-5-1-netcore31start/"/>
      <url>/2020/03/07/dotnet-advanced-series-5-1-netcore31start/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><ul><li>平台概述 环境搭建 项目建立 运行</li><li>pay for what you use</li><li>日志组件扩展</li><li>运行部署 理解跨平台</li><li>项目解读，花式middleware</li><li>源码解读，理解管道模型</li></ul><h3 id="NetCore-平台概述"><a href="#NetCore-平台概述" class="headerlink" title="NetCore 平台概述"></a>NetCore 平台概述</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images2017.cnblogs.com/blog/613837/201708/613837-20170827163416105-1842919854.png" alt=".NetCore 体系结构"></p><p>上图中 .NET FRAMEWORK、.NET CORE和XAMARIN是三个不同的运行时，这三个运行时在.NET STANDARD LIBRARY之上，它们都包含一些基础的组件，像编译器、支持的开发语言（C#、F#等）、运行时组件（类型系统、垃圾回收等）。<br>这三个运行时是同一类的东西，只不过侧重点不同：</p><ul><li>.NET FRAMEWORK用于开发windows桌面程序、wpf和asp.net站点。</li><li>.NET CORE用于开发UWP（windows通用客户端）和跨平台的asp.net core站点。</li><li>XAMARIN主要用于开发一些跨平台的客户端程序，像IOS、安卓。</li></ul><p>*<em>Standard: *</em> One library to rule them all  一套BCL规范，类似于Http协议之于浏览器。</p><p>Asp.Net Core是一套Web开发框架，Asp.Net /MVC 同样是一套框架。<br>Why?为什么Net Core能跨平台呢？大势所趋！</p><ul><li>跨平台–Linux服务器（有一套CLR）</li><li>开源，社区活跃</li><li>Web&amp;API统一</li><li>Docker</li></ul><p>https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="<img src="" alt="Create .NetCore Web"><br>第一个选择的是运行时环境，是framework还是net core，决定了能不能跨平台。<br>第二个选择的是web框架，framework运行时的时候最多只能选net core 2.2。 </p><p>下面先通过MVC的例子来感受下：</p><p>Session还需要配置？为什么以前直接用就可以了呢？<br>ISession 没有setString</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> .Net Core Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Net Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (8)</title>
      <link href="/2020/02/29/typescript-learning-series-08/"/>
      <url>/2020/02/29/typescript-learning-series-08/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型：软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p><p>在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。<br>通俗理解：泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验)</p><ul><li>只能返回string类型的数据</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>同时返回 string类型 和number类型  （代码冗余）</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getData1</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getData2</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同时返回 string类型 和number类型       any可以解决这个问题</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'哈哈哈'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>any放弃了类型检查,传入什么 返回什么。比如:传入number 类型必须返回number类型  传入 string类型必须返回string类型</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//传入的参数类型和返回的参数类型可以不一致</span><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'哈哈哈'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><ul><li>泛型：可以支持不特定的数据类型   要求：传入的参数和返回的参数一致<br>T表示泛型，具体什么类型是调用这个方法的时候决定的</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> getData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>getData<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getData<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'1214231'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getData<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'2112'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*错误的写法*/</span>  <span class="token keyword">function</span> getData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'2145214214'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>getData<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//参数必须是number</span>getData<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'这是一个泛型'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><ul><li>泛型类：比如有个最小堆算法，需要同时支持返回数字和字符串 a  -  z两种类型。  通过类的泛型来实现</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MinClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> list<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> minNum<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>minNum<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      minNum<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> minNum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MinClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MinClas</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">public</span> list<span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>            <span class="token keyword">var</span> minNum<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>minNum<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        minNum<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> minNum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> m1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MinClas</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*实例化类 并且制定了类的T代表的类型是number*/</span>m1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> m2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MinClas</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*实例化类 并且制定了类的T代表的类型是string*/</span>m2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ul><li>函数类型接口</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ConfigFn</span><span class="token punctuation">{</span>  <span class="token punctuation">(</span>value1<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>value2<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> setData<span class="token punctuation">:</span>ConfigFn<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>value1<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>value2<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> value1<span class="token operator">+</span>value2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>泛型接口 第一种</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ConfigFn</span><span class="token punctuation">{</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> getData<span class="token punctuation">:</span>ConfigFn<span class="token operator">=</span><span class="token keyword">function</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// getData&lt;string>('张三');</span><span class="token comment" spellcheck="true">// getData&lt;string>(1243);  //错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>泛型接口 第二种<pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ConfigFn</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>function getData<t>(value:T):T{<br>  return value;<br>}</t></p><p>var myGetData:ConfigFn<string>=getData;<br>myGetData(‘20’);  /<em>正确</em>/<br>// myGetData(20)  //错误</string></p><pre><code>### 泛类泛类：泛型可以帮助我们避免重复的代码以及对不特定数据类型的支持(类型校验)，下面我们看看把类当做参数的泛型类1. 定义个类2. 把类作为参数来约束数据传入的类型```typescriptclass MinClass{  public list:number[]=[];  add(num:number){  this.list.push(num)}min():number{  var minNum=this.list[0];  for(var i=0;i&lt;this.list.length;i++){    if(minNum&gt;this.list[i]){        minNum=this.list[i];      }    }  return minNum;  }}var m1=new MinClass();   m1.add(11);m1.add(3);m1.add(2);alert(m1.min())</code></pre><ul><li>类的泛型</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MinClas</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> list<span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>                <span class="token keyword">var</span> minNum<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minNum<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                minNum<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> m1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MinClas</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//实例化类 并且指定了类的T代表的类型是number</span>m1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> m2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MinClas</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//实例化类 并指定定了类的T代表的类型是string</span>m2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个User的类这个类的作用就是映射数据库字段<br>然后定义一个 MysqlDb的类这个类用于操作数据库<br>然后把User类作为参数传入到MysqlDb中</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span><span class="token string">'123456'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> Db<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MysqlDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Db<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把类作为参数来约束数据传入的类型</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    pasword<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MysqlDb</span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>pasword<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token keyword">var</span> Db<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MysqlDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Db<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ArticleCate</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    status<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MysqlDb</span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>ArticleCate<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArticleCate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"国内"</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>desc<span class="token operator">=</span><span class="token string">"国内新闻"</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> Db<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MysqlDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Db<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述这种写法的问题：代码重复</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MysqlDb</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">updated</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想给User表增加数据</p><ol><li>定义一个User类 和数据库进行映射</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    pasword<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>pasword<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token keyword">var</span> Db<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MysqlDb</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Db<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>相关ArticleCate增加数据  定义一个ArticleCate类 和数据库进行映射</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ArticleCate</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    status<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">,</span>        desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">,</span>        status<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefined    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token operator">=</span>params<span class="token punctuation">.</span>title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc<span class="token operator">=</span>params<span class="token punctuation">.</span>desc<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">=</span>params<span class="token punctuation">.</span>status<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加操作</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArticleCate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">'分类'</span><span class="token punctuation">,</span>    desc<span class="token punctuation">:</span><span class="token string">'1111'</span><span class="token punctuation">,</span>    status<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//类当做参数的泛型类</span><span class="token keyword">var</span> Db<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MysqlDb</span><span class="token operator">&lt;</span>ArticleCate<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Db<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>修改数据</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArticleCate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token string">'分类111'</span><span class="token punctuation">,</span>        desc<span class="token punctuation">:</span><span class="token string">'2222'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> Db<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MysqlDb</span><span class="token operator">&lt;</span>ArticleCate<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Db<span class="token punctuation">.</span><span class="token function">updated</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例：封装统一操作的"><a href="#实例：封装统一操作的" class="headerlink" title="实例：封装统一操作的"></a>实例：封装统一操作的</h3><ul><li>功能：定义一个操作数据库的库  支持 Mysql Mssql  MongoDb</li><li>要求1：Mysql MsSql  MongoDb功能一样  都有 add  update  delete  get方法    </li><li>注意：约束统一的规范、以及代码重用</li><li>解决方案：需要约束规范所以要定义接口 ，需要代码重用所以用到泛型</li></ul><p>1.接口：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范<br>2.泛型: 通俗理解：泛型就是解决 类 接口 方法的复用性</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">DBI</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">;</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个操作mysql数据库的类       注意：要实现泛型接口 这个类也应该是一个泛型类\</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MysqlDb</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">DBI</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库建立连接'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> T<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> list<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">'xxxxxxxxxx'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">'xxxxxxxxxx'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个操作mssql数据库的类</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MsSqlDb</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">DBI</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库建立连接'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">update</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> T<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> list<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">'xxxxxxxxxx'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">'xxxxxxxxxx'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作用户表   定义一个User类和数据表做映射</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    password<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'张三111'</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token keyword">var</span> oMysql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MysqlDb</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类作为参数来约束数据传入的类型 </span>oMysql<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>    password<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'张三2222'</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token keyword">var</span> oMssql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MsSqlDb</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oMssql<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取User表 ID=4的数据</span><span class="token keyword">var</span> data<span class="token operator">=</span>oMssql<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (7)</title>
      <link href="/2020/02/29/typescript-learning-series-07/"/>
      <url>/2020/02/29/typescript-learning-series-07/</url>
      
        <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口的作用：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种限制和规范的作用。接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供某些方法，提供这些方法的类就可以满足实际需要。 typescrip中的接口类似于java，同时还增加了更灵活的接口类型，包括属性、函数、可索引和类等。<br>定义标准。</p><h3 id="接口属性-对json的约束"><a href="#接口属性-对json的约束" class="headerlink" title="接口属性 对json的约束"></a>接口属性 对json的约束</h3><p>ts中定义方法：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">printLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'printLabel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ts中定义方法传入参数:</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">printLabel</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'printLabel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printLabel</span><span class="token punctuation">(</span><span class="token string">'hahah'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> ts中自定义方法传入参数,对json进行约束:</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//label上的单引号 加或者不加都可以</span><span class="token keyword">function</span> <span class="token function">printLabel</span><span class="token punctuation">(</span>labelInfo<span class="token punctuation">:</span><span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'printLabel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token function">printLabel</span><span class="token punctuation">(</span><span class="token string">'hahah'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误写法</span><span class="token function">printLabel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//错误的写法 不是name</span><span class="token function">printLabel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//正确的写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对批量方法传入参数进行约束。<br><strong>接口：行为和动作的规范，对批量方法进行约束</strong></p><ol><li>就是传入对象的约束    <strong>属性接口</strong></li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FullName</span><span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//注意;结束</span>  secondName<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>FullName<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 必须传入对象  firstName  secondName</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">'--'</span><span class="token operator">+</span>name<span class="token punctuation">.</span>secondName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// printName('1213');  //错误</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*传入的参数必须包含 firstName  secondName*/</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>firstName<span class="token punctuation">:</span><span class="token string">'张'</span><span class="token punctuation">,</span>secondName<span class="token punctuation">:</span><span class="token string">'三'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接口：行为和动作的规范，对批量方法进行约束</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FullName</span><span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//注意;结束</span>  secondName<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>FullName<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 必须传入对象  firstName  secondName</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">'--'</span><span class="token operator">+</span>name<span class="token punctuation">.</span>secondName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">printInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>FullName<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 必须传入对象  firstName  secondName</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>firstName<span class="token operator">+</span>info<span class="token punctuation">.</span>secondName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*传入的参数必须包含 firstName  secondName*/</span>  age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>  firstName<span class="token punctuation">:</span><span class="token string">'张'</span><span class="token punctuation">,</span>  secondName<span class="token punctuation">:</span><span class="token string">'三'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span><span class="token string">'李'</span><span class="token punctuation">,</span>  secondName<span class="token punctuation">:</span><span class="token string">'四'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>接口 ：可选属性<pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FullName</span><span class="token punctuation">{</span>firstName<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>secondName<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>function getName(name:FullName){<br>  console.log(name)<br>}</p><p>//参数的顺序可以不一样<br>getName({<br>  secondName:’secondName’,<br>  firstName:’firstName’<br>})</p><p>interface FullName{<br>  firstName:string;<br>  secondName?:string;<br>}</p><p>function getName(name:FullName){<br>  console.log(name)<br>}  </p><p>getName({<br>  firstName:’firstName’<br>})</p><pre><code>### Ajax请求数据的接口原生js封装的ajax```html&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="box"&gt;        box    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src="js/index.js"&gt;&lt;/script&gt;</code></pre><p>其中这个js可以通过nodejs对typescript进行编译生成，typescript封装ajax可以这么写：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>    data<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>    dataType<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原生js封装的ajax </span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span>Config<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>type<span class="token punctuation">,</span>config<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'chengong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dataType<span class="token operator">==</span><span class="token string">'json'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token string">'name=zhangsan'</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span><span class="token string">'http://a.itying.com/api/productlist'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//api</span>    dataType<span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h3><p>函数类型接口:对方法传入的参数 以及返回值进行约束    批量约束</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 加密的函数类型接口</span><span class="token keyword">interface</span> <span class="token class-name">encrypt</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> md5<span class="token punctuation">:</span>encrypt<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//模拟操作</span>  <span class="token keyword">return</span> key<span class="token operator">+</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sha1<span class="token punctuation">:</span>encrypt<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//模拟操作</span>  <span class="token keyword">return</span> key<span class="token operator">+</span><span class="token string">'----'</span><span class="token operator">+</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可索引接口：数组、对象的约束-（不常用）"><a href="#可索引接口：数组、对象的约束-（不常用）" class="headerlink" title="可索引接口：数组、对象的约束  （不常用）"></a>可索引接口：数组、对象的约束  （不常用）</h3><ol><li>ts定义数组的方式</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> arr<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2342</span><span class="token punctuation">,</span><span class="token number">235325</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr1<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">>=</span><span class="token punctuation">[</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>可索引接口 对数组的约束</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">UserArr</span><span class="token punctuation">{</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// var arr:UserArr=['aaa','bbb'];</span><span class="token comment" spellcheck="true">// console.log(arr[0]);</span><span class="token keyword">var</span> arr<span class="token punctuation">:</span>UserArr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*错误*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>可索引接口 对对象的约束<pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">UserObj</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>}</p><p>var arr:UserObj={name:’张三’};</p><pre><code>### 类类型接口:对类的约束和抽象类抽象有点相似 (用的比较多)```typescriptinterface Animal{  name:string;  eat(str:string):void;}class Dog implements Animal{  name:string;  constructor(name:string){    this.name=name;  }  eat(){    console.log(this.name+'吃粮食')  }}var d=new Dog('小黑');d.eat();class Cat implements Animal{  name:string;  constructor(name:string){    this.name=name;  }  eat(food:string){    console.log(this.name+'吃'+food);  }}var c=new Cat('小花');c.eat('老鼠');</code></pre><h3 id="接口扩展：接口可以继承接口"><a href="#接口扩展：接口可以继承接口" class="headerlink" title="接口扩展：接口可以继承接口"></a>接口扩展：接口可以继承接口</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'喜欢吃馒头'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'写代码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来一个实例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Programmer</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">coding</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span>code<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">Programmer</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'喜欢吃馒头'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'写代码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// w.eat();</span>w<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token string">'写ts代码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-Architecture-1-1 从计算机原理看架构设计</title>
      <link href="/2020/02/29/2020-architecture-1-1/"/>
      <url>/2020/02/29/2020-architecture-1-1/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>主要讲述的是计算机原理中最基本的运算设备àCPU以及与CPU配合的存储体系。<br>与此同时讲述这些内容在实际的项目使用过程中到底会对软件的设计以及编码人员造成什么影响。</p><ul><li>CPU是什么?</li><li>为什么会出现不同的系统不兼容的情况?</li><li>CPU的运算依赖于什么?</li><li>存储体系的几大模块</li><li>存储体系在设计系统与开发系统时的重要性</li><li>缓存Cahce，缓冲Buffer你能分清两者的区别嘛?</li><li>在实际的项目中，缓存与缓冲是怎么使用的?</li></ul><h3 id="CPU是什么"><a href="#CPU是什么" class="headerlink" title="CPU是什么"></a>CPU是什么</h3><p>我们都知道的定义是这样的:<br>CPU又称中央处理器，它的英文全称为:Central P[rocessing Unit，但同时如果你听到:Central Processor或者Main Processor往往同样也指的是CPU。</p><p>普通程序员开发的程序，其实绝大多数指的就是对中央处理器也就是CPU的编程。<br>这句话也可能会被面试人员反着描述为，计算机的可编程性主要是指对中央处理器的编程。<br>在最初的时候，大约是1970年代以前，中央处理器由多个独立单元构成，后来才发展成集成电路，这些高度收缩的组件就是所谓的:<strong>微处理器</strong>。</p><p><strong>注意:</strong> ENIAC(Electronic Numerical Integrator And Computer)是世界上第一台“电子存储式可编程计算机”，但是由于他们也存在计算功能，而CPU的标准定义为:执行软件(计算机程序)的设备所以，ENIAC理论上不存在标准的CPU，但是最早于存储程序型计算机一通登场的设备是可以被称作CPU的，也就是说:CPU并不一定是微型的，早起的同步CPU是非常大的。直到1950~60年代的晶体管CPU时，CPU才慢慢变小。不再以体积庞大，不可靠与易碎的开关组件(继电器/真空管)组成或建造。</p><p>参考来自于维基百科，与哈佛计算机原理书籍，国内的一些小众参考资料与翻译是错误的，一定要注意。CPU并不小。尤其是百度百科，它所提供的参考资料只提及了”微”，但是万物相对论，没有相对何来形容词?</p><p>CPU的主要运作原理很简单。不论其外观，都是执行存储与被称为”程序”里的一系列指令。所以经常说，计算机是最愚蠢的傻子，没有码农，他们就是一坨铁。<br>在冯诺依曼架构中，程序以一系列数字存储在计算机存储器中。<br>而只要是冯诺依曼机，CPU的运作原理就可以看成四个阶段:<strong>提取，解码，执行，回写。</strong></p><p><strong>提取:</strong> 从程序内存中检索指令(程序内存，指的可不是你程序里面定义了一个int的这个内存，而是存储程序的内存)，由程序计数器指定程序存储器的位置，计数器保存供识别当前程序位置的数值(原始资料原文)。</p><p>拿人话说:程序计数器记录了CPU在当前程序里的踪迹(你跑哪去了?)提取指令后，根据指令式等内容的长度增加存储器单元。指令的提取常常必须从相对较慢的存储器查找，导致CPU等候指令的送入。(关键问题是:CPU指着整个计算机存储体系温柔的说道，我不是指你啦外存，我是说在坐的各位，都是垃圾)</p><p>上面是理工科的话，再拿麻瓜的话来说:<br>程序计数器其实非常傻，他记录的是内存的地址，而不是指令。这时候就尴尬了，他的增长取决于指令在内存中所占的单位数，在固定长度的指令ISA(微处理器的指令集架构Instruction Set Architecture)中，每个指令所占用的内存单位是相同的(简单说就是它傻到只能某几个某几个数，而不能一个一个数)。例如:32位的ISA固定长度指令使用8位内存单位。而且每次将增加4个PC单位，也就是32Bit。而类似于现在咱们大家常用的X86，虽然也是默认指代32位，然而这之间有一些区别。X86的CPU其实是可以处理16位与8位的，他的PC在内存中的增长量取决于最后一个指令的长度。而更复杂的的CPU中，最后一个指令的运行不一定会导致PC单位的增长，特别是大量数据传输和超标量体系结构中。<br>所以如果要讨论指令集，那么你必须讨论清楚所有的细节，否则，你们没人说错，但是永远对不了。</p><p>上面说了一堆的CPU提取动作，下来来看看后面几个顺理成章的事情。<br><strong>解码:</strong>CPU从存储器提取到指令，他需要被解码才能成为有意义的片段，根据不同CPU的指令集会变成对应的指令。一部分为运算码，其他的是必要信息。或者是寄存器/存储器地址，以地址模式决定。<br>MSIL就是微软的汇编语言。看到上面这段，是不是特别的熟悉呢?</p><p><strong>执行:</strong>执行是最容易理解的地方，根据不同的指令与对应的其他信息，来进行简单的运算与逻辑运算，例如加法/位操作。<br>其实CPU有多愚蠢呢?他也就只会:与或非异或。<br>是的他就是如此的愚蠢。</p><p>最后的<strong>回写:</strong>则更容易理解，由于CPU是专门负责计算的，总不能算完了还放在CPU里面?那不行。<br>所以，它会先回写/写回到缓冲区，然后同步给主存，然后就没然后了，程序该干啥干啥。</p><h3 id="为什么会出现不同的系统不兼容的情况"><a href="#为什么会出现不同的系统不兼容的情况" class="headerlink" title="为什么会出现不同的系统不兼容的情况?"></a>为什么会出现不同的系统不兼容的情况?</h3><p>根据上面CPU的工作原理，其实非常容易看出来一个事情。<br>那就是:指令集问题怎么办?你能看到英特尔与AMD还能兼容，那是因为他们都是X86架构体系的。</p><p>如果你把他们对比成:X86与ARM，那就好玩了。<br>甚至于说X86与X64有时候都不兼容。<br>如果你工作足够早，你应该听说过X86跟X64是完全不能跑的，但是后面似乎成了32位的能在64下跑，而64不能在32上跑。<br>而这个事情其实只有一个原因:X64原始名字应该是X86-64，也就是X86指令集的64位扩展。</p><p>而<strong>系统级别的不兼容</strong>其实更容易理解。<br>由于每一个系统的API都是不同的，普通开发编写的程序都是在Kernal之上的，那么与其说你是面向CPU，倒不如说是面向系统的API编程，那么LINUX与windows的API一日不相同，则永远不可能出现完全兼容。<br>甚至每个系统的策略也不同，例如WIN7开始不允许进行MAC层编程，而LINUX可以，这也就是为什么工控软件为什么不会出现windows 的原因。我没有IP，你还不允许我使用MAC层编程，怎么着?让我们集体跳楼嘛?</p><p>完整版如下:IA-32(X86 I386 标准32位)，X86-64 也就是64位，其实是一个扩展，但是它兼容16位与32位的X86架构  也有叫IA-32E EM64T CT或者直接Intel 64的，其实都是一回事情，其实是AMD1999年提出的。<br>Intel凑不要脸。</p><h3 id="存储体系的几大模块"><a href="#存储体系的几大模块" class="headerlink" title="存储体系的几大模块"></a>存储体系的几大模块</h3><p>有些人说:存储体系分为4个，有些人说分为6个，有些人说3个。<br>其实大家都对，只是大家的理解方式不同。<br>完整的完全体是6个。如下:</p><ul><li>A1 寄存器(32位处理器的话每个寄存器是32位X86架构下有16个寄存器)</li><li>B2 第一级高速缓存</li><li>B3 第二级高速缓存</li><li>B4 第三级高速缓存</li><li>B5 主存（内存条）</li><li>C6 外存</li></ul><p>i9的缓存大小，二级缓存是2MB，三级缓存是16MB，所以说栈肯定不是在这里。<br>任何堆变量什么的都是在内存条这。<br>CPU的输出速度极快，主存来不及存，所以CPU先会经过寄存器，一级，二级，三级高速缓存，再到主存；因此，读写速度不一致的时候，需要用缓存。<br>4个的人认定的是大写英文字母版本，也就是寄存器，高速缓存，主存，外存。<br>6个的人认定是完全版，也就是数字版本。<br>而3个的人说的是能够使用软件去想办法利用的资源比较偏向于软件。<br>注意:软件不是不能利用寄存器，只是正常情况下尤其是类似编写。NET或JAVA等高级语言的人员，是没有意义的。<br>作为架构师，你需要兼容不同的用户与描述方。</p><h3 id="存储体系在设计系统与开发系统时的重要性"><a href="#存储体系在设计系统与开发系统时的重要性" class="headerlink" title="存储体系在设计系统与开发系统时的重要性"></a>存储体系在设计系统与开发系统时的重要性</h3><p>上面有这样一句话:<br>CPU说:不不不，我不是说外存你，我是说，在座的各位，都是垃圾。<br>其实这句话的含义你仔细理解一下，它完全代表了<strong>软件的架构模式</strong>，而且是100%匹配。<br>你的For循环或者任何一段运算速度是绝对快于内存的访问速度的，例如redis的存储与获取。<br>这时候你如果不想让Redis崩溃掉，你唯一的选择是什么?对的，<strong>你给本地加缓存</strong><br>这个场景其实与CPUß&lt;–&gt;主存之间的工作模式是完全一致的。<br>由于主存与CPU之间的性能差异，又不可能说让CPU去等待主存将内容完全读取走，这才出来了1234级缓冲，而如果你对硬件稍微熟悉的话，你会发现，每一层缓冲区数量普通情况下是越来越大的。</p><p>同样的情况，你来合计一下，这次是主存与外存了，那么对标软件中的哪个位置呢?<br>你在开发软件的时候或者设计架构的时候什么时候其实就是硬件架构的软件实现呢?<br>咱们来一起落地这个场景吧。<br>500W高并发的时候，SLB的转发一定要有策略，不能随机，随机转发最后一定会将瓶颈落在Redis上，可以考虑在主存做一级缓存（35s），在被分发的服务端本地做二级缓存(1.3min)，在Redis做三级缓存(4min)。从一级击穿后到二级，二级击穿就到三级，三级也被击穿就直接到数据库。<br>因为SLB的分发策略，用户A进来后永远在1号服务器，数据都在一条链路上，不存在不同步。</p><h3 id="缓存Cahce，缓冲Buffer两者的区别"><a href="#缓存Cahce，缓冲Buffer两者的区别" class="headerlink" title="缓存Cahce，缓冲Buffer两者的区别"></a>缓存Cahce，缓冲Buffer两者的区别</h3><p>大家伙经常说:所谓概念就是概念，没啥用。我背过就好。<br>那你应该如何去阐释，作业本长一样，习题内容一样。考的试一样，老师一样，时间一样精确到皮秒。的你跟你班上的学霸，是如何出现越来越打的差异的?</p><p>这就是，你跟你的学霸朋友，谁是缓存了，谁是缓冲了的问题。<br>从存储可靠度来说，这两者都不可靠，你在设计软件时，不能认为缓存是可靠的，更不能认为缓冲是可靠的。<br>但是如果非要在这两者之间选择:相比较于缓冲，你更需要的是缓存。<br>例如刚才的例子:<br>学霸是缓存下来，回去消化，而你是缓冲下来，下课就倒掉了。这是个很尴尬的场景。</p><p>仔细斟酌上述例子，你能发现有什么可落地的场景嘛?<br>注意一个细节:缓存是不可复用的，而缓冲是必须复用的。对了，做UI的人肯定听说过一个叫做双重缓冲的技术。这个又是什么鬼?</p><h3 id="在实际的项目中缓存与缓冲该如何使用"><a href="#在实际的项目中缓存与缓冲该如何使用" class="headerlink" title="在实际的项目中缓存与缓冲该如何使用?"></a>在实际的项目中缓存与缓冲该如何使用?</h3><ol><li>视频处理项目的缓冲与缓存（视频正在加载缓冲中。。。）</li><li>在线直播项目的缓冲与缓存（服务器端缓存，给出去的东西缓冲）</li><li>2B项目的缓冲与缓存</li><li>金融项目的缓冲与缓存（用户缓存，交易缓冲）</li><li>引擎类项目的缓冲与缓存（非常高频繁的使用核心业务，避免脏读，例如百度）</li><li>通信项目的缓冲与缓存（tcp接受到的数据放缓冲里，转码后的数据放缓存里，缓冲区不能一直被占着，只能放缓存里，缓冲区不能有其他业务，例如缓冲区只有一包，读到十个包之后组成一个数据，这时候是放在缓存里的）</li></ol><p>什么时候定义struct，什么时候定义class?缓冲使用结构体，缓存使用类。API收到一个参数，收到即扔，用结构体。视频采集卡里面一般都是使用结构体。<br>什么东西贼快，什么东西用完就扔，就是缓冲。<br>Cpu 玩栈，很快；堆一般都不是，稍慢。</p><h3 id="影响和结论"><a href="#影响和结论" class="headerlink" title="影响和结论"></a>影响和结论</h3><ul><li>计算机的基本运作过程</li><li>我们该如何利用计算机的这个特点来设计软件与搭建框架</li></ul><p>PS: 如何确认自己到底是会了一个东西还是只是背过了一个概念，反问自己3个为什么即可。<br>例如<br>数据一致性是什么呢?<br>XXXXXX<br>那么XXXXX又是为什么呢?<br>YYYYYY<br>那么YYYY又是为什么呢?<br>ZZZZZ<br>那么ZZZZ又是为什么呢?<br>QQQQQ</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020-Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPU Operation </tag>
            
            <tag> Storage Architecture </tag>
            
            <tag> Buffering and Caching </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (6)</title>
      <link href="/2020/02/24/typescript-learning-series-06/"/>
      <url>/2020/02/24/typescript-learning-series-06/</url>
      
        <content type="html"><![CDATA[<p><strong>静态属性 静态方法:</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ES5中的静态方法 静态属性</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run1<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'哈哈哈'</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>run2<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态方法</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span><span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 静态方法的调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//$的静态方法</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Base</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token operator">=</span>获取dom节点<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>css<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>arr<span class="token operator">=</span>value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//JQuery里面的操作 </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Per</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//静态属性</span>  <span class="token keyword">static</span> sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*实例方法*/</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在工作`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*静态方法  里面没法直接调用类里面的属性*/</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'print方法'</span><span class="token operator">+</span>Per<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// var p=new Per('张三');</span><span class="token comment" spellcheck="true">// p.run();</span>Per<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>Per<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态:父类定义一个方法不去实现，让继承它的子类去实现  每一个子类有不同的表现</strong><br><strong>多态属于继承:</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//具体吃什么  不知道  </span>    <span class="token comment" spellcheck="true">//具体吃什么?继承它的子类去实现 ，每一个子类的表现不一样</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃的方法'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'吃粮食'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'吃老鼠'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>抽象类：</strong></p><ul><li>typescript中的抽象类：它是提供其他类继承的基类，不能直接被实例化。</li><li>用abstract关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</li><li>abstract抽象方法只能放在抽象类里面</li><li>抽象类和抽象方法用来定义标准 。   标准：Animal 这个类要求它的子类必须包含eat方法</li></ul><pre class="line-numbers language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  abstract <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抽象方法不包含具体实现并且必须在派生类中实现。</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'其他方法可以不实现'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// var a=new Animal() </span><span class="token comment" spellcheck="true">/*错误的写法*/</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//抽象类的子类必须实现抽象类里面的抽象方法</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'吃粮食'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'小花花'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//抽象类的子类必须实现抽象类里面的抽象方法</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'吃老鼠'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'小花猫'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (5)</title>
      <link href="/2020/02/24/typescript-learning-series-05/"/>
      <url>/2020/02/24/typescript-learning-series-05/</url>
      
        <content type="html"><![CDATA[<h2 id="ts中类的定义"><a href="#ts中类的定义" class="headerlink" title="ts中类的定义"></a>ts中类的定义</h2><p><strong>ES5中的类定义</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ts中定义类</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//属性  前面省略了public关键词</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//构造函数   实例化类的时候触发的方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//构造函数   实例化类的时候触发的方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ts中实现继承-extends、-super"><a href="#ts中实现继承-extends、-super" class="headerlink" title="ts中实现继承  extends、 super"></a>ts中实现继承  extends、 super</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*初始化父类的构造函数*/</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ts中继承的探讨 父类的方法和子类的方法一致</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// var p=new Person('王五');</span><span class="token comment" spellcheck="true">// alert(p.run())</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*初始化父类的构造函数*/</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动-子类`</span></span>  <span class="token punctuation">}</span>  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在工作`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// alert(w.run());</span><span class="token comment" spellcheck="true">// w.work();</span><span class="token function">alert</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优先在子类里面找 没有再去父类里面找</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类里面的修饰符-typescript里面定义属性的时候给我们提供了-三种修饰符"><a href="#类里面的修饰符-typescript里面定义属性的时候给我们提供了-三种修饰符" class="headerlink" title="类里面的修饰符  typescript里面定义属性的时候给我们提供了 三种修饰符"></a>类里面的修饰符  typescript里面定义属性的时候给我们提供了 三种修饰符</h3><ul><li>public :公有          在当前类里面、 子类  、类外面都可以访问</li><li>protected：保护类型    在当前类里面、子类里面可以访问 ，在类外部没法访问</li><li>private ：私有         在当前类里面可以访问，子类、类外部都没法访问</li></ul><p><strong>PS: 属性如果不加修饰符 默认就是 公有 （public）</strong></p><ol><li>public :公有          在类里面、 子类  、类外面都可以访问</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*公有属性*/</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// var p=new Person('王五');</span><span class="token comment" spellcheck="true">// alert(p.run())</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*初始化父类的构造函数*/</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动-子类`</span></span>  <span class="token punctuation">}</span>  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在工作`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类外部访问公有属性</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*公有属性*/</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span>  p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'哈哈哈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>protected：保护类型    在类里面、子类里面可以访问 ，在类外部没法访问</li></ol><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">protected</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*公有属性*/</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*初始化父类的构造函数*/</span>  <span class="token punctuation">}</span>                    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在工作`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'李四11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类外外部没法访问保护类型的属性</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">protected</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*保护类型*/</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span>  p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'哈哈哈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//编译报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>private ：私有        在类里面可以访问，子类、类外部都没法访问</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">private</span> name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*私有*/</span><span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在运动`</span></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>class Web extends Person{<br>  constructor(name:string){<br>    super(name)<br>  }<br>  work(){<br>    console.log(<code>${this.name}在工作</code>)<br>  }<br>}</p><p>class Person{<br>  private name:string;  /<em>私有</em>/<br>  constructor(name:string){<br>    this.name=name;<br>  }</p><p>  run():string{<br>    return <code>${this.name}在运动</code><br>  }<br>}</p><p>var p=new Person(‘哈哈哈’);<br>alert(p.run()); //当前类是可以使用的</p><pre><code></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (4)</title>
      <link href="/2020/02/22/typescript-learning-series-04/"/>
      <url>/2020/02/22/typescript-learning-series-04/</url>
      
        <content type="html"><![CDATA[<h2 id="es5里面的类"><a href="#es5里面的类" class="headerlink" title="es5里面的类"></a>es5里面的类</h2><h3 id="最简单的类"><a href="#最简单的类" class="headerlink" title="最简单的类"></a>最简单的类</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数和原型链里面增加方法"><a href="#构造函数和原型链里面增加方法" class="headerlink" title="构造函数和原型链里面增加方法"></a>构造函数和原型链里面增加方法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*属性*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在运动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原型链上面的属性会被多个实例共享   构造函数不会</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类里面的静态方法"><a href="#类里面的静态方法" class="headerlink" title="类里面的静态方法"></a>类里面的静态方法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*属性*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*实例方法*/</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在运动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>getInfo<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是静态方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原型链上面的属性会被多个实例共享   构造函数不会</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用静态方法</span>Person<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="es5里面的继承-对象冒充实现继承"><a href="#es5里面的继承-对象冒充实现继承" class="headerlink" title="es5里面的继承   对象冒充实现继承"></a>es5里面的继承   对象冒充实现继承</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*属性*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*实例方法*/</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在运动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>      Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Web类 继承Person类   原型链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*对象冒充实现继承*/</span><span class="token punctuation">}</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象冒充可以继承构造函数里面的属性和方法</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//对象冒充可以继承构造函数里面的属性和方法   但是没法继承原型链上面的属性和方法</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="es5里面的继承-原型链实现继承"><a href="#es5里面的继承-原型链实现继承" class="headerlink" title="es5里面的继承   原型链实现继承"></a>es5里面的继承   原型链实现继承</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*属性*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*实例方法*/</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在运动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>      Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Web类 继承Person类   原型链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>Web<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//原型链实现继承</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原型链实现继承:可以继承构造函数里面的属性和方法 也可以继承原型链上面的属性和方法</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型链实现继承的-问题？"><a href="#原型链实现继承的-问题？" class="headerlink" title="原型链实现继承的 问题？"></a>原型链实现继承的 问题？</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*属性*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*实例方法*/</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在运动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>      Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*属性*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*实例方法*/</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在运动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>      Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Web<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'赵四'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//实例化子类的时候没法给父类传参</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这里是undefined在运动</span><span class="token keyword">var</span> w1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型链-对象冒充的组合继承模式"><a href="#原型链-对象冒充的组合继承模式" class="headerlink" title="原型链+对象冒充的组合继承模式"></a>原型链+对象冒充的组合继承模式</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*属性*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*实例方法*/</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在运动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>      Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//对象冒充继承   实例化子类可以给父类传参</span><span class="token punctuation">}</span>Web<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'赵四'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//实例化子类的时候没法给父类传参</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> w1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型链-对象冒充继承的另一种方式"><a href="#原型链-对象冒充继承的另一种方式" class="headerlink" title="原型链+对象冒充继承的另一种方式"></a>原型链+对象冒充继承的另一种方式</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*属性*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*实例方法*/</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在运动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>      Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'在工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对象冒充继承  可以继承构造函数里面的属性和方法、实例化子类可以给父类传参</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>Web<span class="token punctuation">.</span>prototype<span class="token operator">=</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token keyword">var</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">'赵四'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//实例化子类的时候没法给父类传参</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (3)</title>
      <link href="/2020/02/22/typescript-learning-series-03/"/>
      <url>/2020/02/22/typescript-learning-series-03/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript中的函数"><a href="#TypeScript中的函数" class="headerlink" title="TypeScript中的函数"></a>TypeScript中的函数</h2><ul><li>函数的定义</li><li>可选参数</li><li>默认参数</li><li>剩余参数</li><li>函数重载</li><li>箭头函数  es6</li></ul><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p><strong>es5定义函数的方法:</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//函数声明法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'run'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//匿名函数</span><span class="token keyword">var</span> run2<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'run2'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ts中定义函数的方法:</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//函数声明法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'run'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//匿名函数</span><span class="token keyword">var</span> fun2<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*调用方法*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ts中定义方法传参:</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> getInfo<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//没有返回值的方法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法可选参数"><a href="#方法可选参数" class="headerlink" title="方法可选参数"></a>方法可选参数</h2><p>es5里面方法的实参和行参可以不一样，但是ts中必须一样，如果不一样就需要配置可选参数</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ---年龄保密`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:可选参数必须配置到参数的最后面</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ---年龄保密`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认参数-可选参数"><a href="#默认参数-可选参数" class="headerlink" title="默认参数 可选参数"></a>默认参数 可选参数</h2><p>es5里面没法设置默认参数，es6和ts中都可以设置默认参数</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ---年龄保密`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span>number<span class="token punctuation">,</span>b<span class="token punctuation">:</span>number<span class="token punctuation">,</span>c<span class="token punctuation">:</span>number<span class="token punctuation">,</span>d<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number<span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span>d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在TS中，<strong>三点运算符 接受新参传过来的值：</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token operator">...</span>result<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> sum<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">+</span><span class="token operator">=</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ts函数重载"><a href="#ts函数重载" class="headerlink" title="ts函数重载"></a>ts函数重载</h2><p>java中方法的重载：重载指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况。<br>typescript中的重载：通过为同一个函数提供多个函数类型定义来试下多种功能的目的。<br>ts为了兼容es5 以及 es6 重载的写法和java中有区别。</p><p><strong>es5中出现同名方法，下面的会替换上面的方法:</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ts中的重载:</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token operator">===</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'我叫：'</span><span class="token operator">+</span>str<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'我的年龄是'</span><span class="token operator">+</span>str<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//正确</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//正确</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//错误写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'我叫：'</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'我的年龄是'</span><span class="token operator">+</span>age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'我叫：'</span><span class="token operator">+</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*正确*/</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//错误</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*正确*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="箭头函数-es6"><a href="#箭头函数-es6" class="headerlink" title="箭头函数  es6"></a>箭头函数  es6</h2><p><strong>this指向的问题    箭头函数里面的this指向上下文:</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (2)</title>
      <link href="/2020/02/22/typescript-learning-series-02/"/>
      <url>/2020/02/22/typescript-learning-series-02/</url>
      
        <content type="html"><![CDATA[<h2 id="typeScript中的数据类型"><a href="#typeScript中的数据类型" class="headerlink" title="typeScript中的数据类型"></a>typeScript中的数据类型</h2><p>typescript中为了使编写的代码更规范，更有利于维护，增加了类型校验，在typescript中主要给我们提供了以下数据类型：</p><ul><li>布尔类型（boolean）</li><li>数字类型（number）</li><li>字符串类型(string)</li><li>数组类型（array）</li><li>元组类型（tuple）</li><li>枚举类型（enum）</li><li>任意类型（any）</li><li>null 和 undefined</li><li>void类型</li><li>never类型</li></ul><h3 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h3><p>es5的写法 （正确写法）  ts中（错误写法）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token number">456</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>typescript中为了使编写的代码更规范，更有利于维护，增加了类型校验<br>写ts代码必须指定类型</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> flag<span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// flag=123;  //错误</span>flag<span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//正确</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数字类型（number）"><a href="#数字类型（number）" class="headerlink" title="数字类型（number）"></a>数字类型（number）</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token number">456</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//正确</span>num<span class="token operator">=</span><span class="token string">'str'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型(string)"></a>字符串类型(string)</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> str<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token operator">=</span><span class="token string">'this is ts'</span><span class="token punctuation">;</span>str<span class="token operator">=</span><span class="token string">'haha'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//正确</span>str<span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组类型（array）"><a href="#数组类型（array）" class="headerlink" title="数组类型（array）"></a>数组类型（array）</h3><p>ts中定义数组有两种方式:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//es5定义数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.第一种定义数组的方式</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> arr<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.第二种定义数组的方式</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> arr<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">>=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.第三种定义数组的方式</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> arr3<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'131214'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="元组类型（tuple）"><a href="#元组类型（tuple）" class="headerlink" title="元组类型（tuple）"></a>元组类型（tuple）</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token punctuation">:</span>Array<span class="token operator">&lt;</span>number<span class="token operator">>=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//元祖类型</span><span class="token keyword">let</span> arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'this is ts'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="枚举类型（enum）"><a href="#枚举类型（enum）" class="headerlink" title="枚举类型（enum）"></a>枚举类型（enum）</h3><p>随着计算机的不断普及，程序不仅只用于数值计算，还更广泛地用于处理非数值的数据。<br>例如：性别、月份、星期几、颜色、单位名、学历、职业等，都不是数值数据。<br>在其它程序设计语言中，一般用一个数值来代表某一状态，这种处理方法不直观，易读性差。<br>如果能在程序中用自然语言中有相应含义的单词来代表某一状态，则程序就很容易阅读和理解。<br>也就是说，事先考虑到某一变量可能取的值，尽量用自然语言中含义清楚的单词来表示它的每一个值。<br>这种方法称为枚举方法，用这种方法定义的类型称枚举类型。<br>enum 枚举名{<br>标识符[=整型常数],<br>标识符[=整型常数],<br>…<br>标识符[=整型常数],<br>} ;</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Flag <span class="token punctuation">{</span>success<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> s<span class="token punctuation">:</span>Flag<span class="token operator">=</span>Flag<span class="token punctuation">.</span>success<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">enum</span> Flag <span class="token punctuation">{</span>success<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> f<span class="token punctuation">:</span>Flag<span class="token operator">=</span>Flag<span class="token punctuation">.</span>error<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>blue<span class="token punctuation">,</span>red<span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 可以用引号加起来<span class="token keyword">var</span> c<span class="token punctuation">:</span>Color<span class="token operator">=</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1  从0开始 如果标识符没有赋值 它的值就是下标</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>blue<span class="token punctuation">,</span>red<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 也可以赋值<span class="token keyword">var</span> c<span class="token punctuation">:</span>Color<span class="token operator">=</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//3</span><span class="token keyword">var</span> c<span class="token punctuation">:</span>Color<span class="token operator">=</span>Color<span class="token punctuation">.</span>orange<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Err <span class="token punctuation">{</span><span class="token string">'undefined'</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'null'</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'success'</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token punctuation">:</span>Err<span class="token operator">=</span>Err<span class="token punctuation">.</span>success<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="任意类型（any）"><a href="#任意类型（any）" class="headerlink" title="任意类型（any）"></a>任意类型（any）</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token string">'str'</span><span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">;</span>onsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>任意类型的用处：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> oBox<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oBox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在网页上可以这么用：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        box    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="null-和-undefined-其他（never类型）数据类型的子类型"><a href="#null-和-undefined-其他（never类型）数据类型的子类型" class="headerlink" title="null 和 undefined  其他（never类型）数据类型的子类型"></a>null 和 undefined  其他（never类型）数据类型的子类型</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//输出：undefined   报错 变量定义了没有赋值</span><span class="token keyword">var</span> num<span class="token punctuation">:</span>undefined<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//输出：undefined  //正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//定义没有赋值就是undefined</span><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//一个元素可能是 number类型 可能是null 可能是undefined</span><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token number">1234</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h3><p>typescript中的void表示没有任何类型，一般用于定义方法的时候方法没有返回值。<br><strong>es5的定义方法</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表示方法没有返回任何类型:</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//正确写法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>undefined<span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确写法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h3><p>是其他类型 （包括 null 和 undefined）的子类型，代表从不会出现的值。<br>这意味着声明never的变量只能被never类型所赋值。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">var</span> a<span class="token punctuation">:</span>undefined<span class="token punctuation">;</span>a<span class="token operator">=</span>undefined<span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">:</span>never<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误的写法</span>a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Basic Tutorial</title>
      <link href="/2020/02/16/js-basic-series/"/>
      <url>/2020/02/16/js-basic-series/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5-CSS-Basic-Series</title>
      <link href="/2020/02/16/html5-css-basic-series/"/>
      <url>/2020/02/16/html5-css-basic-series/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Frontend Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Development Full Stack Route</title>
      <link href="/2020/02/15/web-development-full-stack-route/"/>
      <url>/2020/02/15/web-development-full-stack-route/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇主要梳理在网站开发中应用到的技术，也就是全栈工程师理论上应该掌握哪些技能。这是一个路线轨迹的说明，或者可以理解为全栈成长路线，计划先开始梳理前端部分的路线，后端的语言比较多，内容和应用场景也比较丰富，所以可能会比较杂乱一些，希望能提供一些参考。</p><h2 id="前端学习路线图"><a href="#前端学习路线图" class="headerlink" title="前端学习路线图"></a>前端学习路线图</h2><h3 id="基本的PC端布局"><a href="#基本的PC端布局" class="headerlink" title="基本的PC端布局"></a>基本的PC端布局</h3><h3 id="HTML5-和-CSS3-提高-新特性"><a href="#HTML5-和-CSS3-提高-新特性" class="headerlink" title="HTML5 和 CSS3 提高 新特性"></a>HTML5 和 CSS3 提高 新特性</h3><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><h3 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h3><ul><li>百分比（流失）布局</li><li>flex布局：</li><li>rem布局：<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3></li><li>JavaScript基础</li><li>JavaScript 实战 DOM BOM 操作</li><li>jquery 学习</li><li>JavaScript进阶高级<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3></li></ul><h2 id="Net-Core的全栈开发路线图"><a href="#Net-Core的全栈开发路线图" class="headerlink" title="Net Core的全栈开发路线图"></a>Net Core的全栈开发路线图</h2><p>早在C#专题2019年的时候有几张关于Net Core的全栈roadmap很不错，这里再拿出来分享一下：</p><h3 id="Web-Developer-2019"><a href="#Web-Developer-2019" class="headerlink" title="Web Developer 2019"></a>Web Developer 2019</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://fullstackwebdev-1257411902.cos.ap-chengdu.myqcloud.com/RoadMap/NetCoreFullStack/intro.png" alt="intro"></p><h3 id="ASP-NET-Core-Developer-in-2019"><a href="#ASP-NET-Core-Developer-in-2019" class="headerlink" title="ASP.NET Core Developer in 2019"></a>ASP.NET Core Developer in 2019</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://fullstackwebdev-1257411902.cos.ap-chengdu.myqcloud.com/RoadMap/NetCoreFullStack/aspnetcore-developer-roadmap.png" alt="aspnetcore-developer-roadmap"></p><h3 id="ASP-NET-Core-Developer-in-2019-中文版"><a href="#ASP-NET-Core-Developer-in-2019-中文版" class="headerlink" title="ASP.NET Core Developer in 2019 中文版"></a>ASP.NET Core Developer in 2019 中文版</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://fullstackwebdev-1257411902.cos.ap-chengdu.myqcloud.com/RoadMap/NetCoreFullStack/aspnetcore-developer-roadmap.zh-Hans.png" alt="aspnetcore-developer-roadmap.zh-Hans"></p><h3 id="ASP-NET-Core-Backend"><a href="#ASP-NET-Core-Backend" class="headerlink" title="ASP.NET Core Backend"></a>ASP.NET Core Backend</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://fullstackwebdev-1257411902.cos.ap-chengdu.myqcloud.com/RoadMap/NetCoreFullStack/backend.png" alt="backend"></p><h3 id="ASP-NET-Core-Frontend"><a href="#ASP-NET-Core-Frontend" class="headerlink" title="ASP.NET Core Frontend"></a>ASP.NET Core Frontend</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://fullstackwebdev-1257411902.cos.ap-chengdu.myqcloud.com/RoadMap/NetCoreFullStack/frontend.png" alt="frontend"></p><h3 id="ASP-NET-Core-DevOps"><a href="#ASP-NET-Core-DevOps" class="headerlink" title="ASP.NET Core DevOps"></a>ASP.NET Core DevOps</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://fullstackwebdev-1257411902.cos.ap-chengdu.myqcloud.com/RoadMap/NetCoreFullStack/devops.png" alt="devops"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tech Overview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yearly Planning </tag>
            
            <tag> HelloWorld </tag>
            
            <tag> Full Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Basic Tutorial (1)</title>
      <link href="/2020/02/14/typescript-learning-series-01/"/>
      <url>/2020/02/14/typescript-learning-series-01/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript快速入门教程主要内容"><a href="#TypeScript快速入门教程主要内容" class="headerlink" title="TypeScript快速入门教程主要内容"></a>TypeScript快速入门教程主要内容</h2><p>这是一个TypeScript的快速入门教程，从最基本的语法出来，可以快速了解ts的使用套路，为后续其他框架（例如Angular等）的学习打下基础，主要包含的内容如下，你可以通过链接直接跳转查看。</p><ul><li><a href="http://zhengchaoqiang/2020/02/14/typescript-learning-series-01/" target="_blank" rel="noopener">1. vscode配置自动编译</a><ul><li>第一步   tsc –inti 生成tsconfig.json   改 “outDir”: “./js”,</li><li>第二步 任务 - 运行任务  监视tsconfig.json</li></ul></li><li><a href="http://zhengchaoqiang/2020/02/22/typescript-learning-series-02/" target="_blank" rel="noopener">2. TypeScript中的数据类型</a><ul><li>布尔类型（boolean）</li><li>数字类型（number）</li><li>字符串类型(string)</li><li>数组类型（array）</li><li>元组类型（tuple）</li><li>枚举类型（enum）</li><li>任意类型（any）</li><li>null 和 undefined</li><li>void类型</li><li>never类型</li></ul></li><li><a href="http://zhengchaoqiang/2020/02/22/typescript-learning-series-03/" target="_blank" rel="noopener">3. TypeScript中的函数</a><ul><li>3.1、函数的定义</li><li>3.2、可选参数</li><li>3.3、默认参数</li><li>3.4、剩余参数</li><li>3.5、函数重载</li><li>3.6、箭头函数  es6</li></ul></li><li><a href="http://zhengchaoqiang/2020/02/22/typescript-learning-series-04/" target="_blank" rel="noopener">4.TypeScript中的类</a><ul><li>4.1 类的定义</li><li><a href="http://zhengchaoqiang/2020/02/24/typescript-learning-series-05/" target="_blank" rel="noopener">4.2 继承</a></li><li><a href="http://zhengchaoqiang/2020/02/24/typescript-learning-series-05/" target="_blank" rel="noopener">4.3 类里面的修饰符</a></li><li><a href="http://zhengchaoqiang/2020/02/24/typescript-learning-series-06/" target="_blank" rel="noopener">4.4 静态属性 静态方法</a></li><li><a href="http://zhengchaoqiang/2020/02/24/typescript-learning-series-06/" target="_blank" rel="noopener">4.5 抽象类 多态</a></li></ul></li><li><a href="http://localhost:4000/2020/02/29/typescript-learning-series-07/" target="_blank" rel="noopener">5. TypeScript中的接口</a><ul><li>5.1 属性类接口</li><li>5.2 函数类型接口</li><li>5.3 可索引接口</li><li>5.4 类类型接口</li><li>5.5 接口扩展</li></ul></li><li><a href="http://zhengchaoqiang/2020/02/29/typescript-learning-series-08/" target="_blank" rel="noopener">6. TypeScript中的泛型</a><ul><li>6.1 泛型的定义</li><li>6.2 泛型函数</li><li>6.3 泛型类</li><li>6.4 泛型接口</li><li>接口 泛型 泛型类的综合使用</li></ul></li><li><a href="http://zhengchaoqiang/2020/03/14/typescript-learning-series-09/" target="_blank" rel="noopener">8. 模块</a><ul><li>8.1 模块的的概念</li><li>8.2 模块导出的几种方法<ul><li>export 导出声明  </li><li>export 导出语句</li><li>export default</li><li>import导入模块</li><li>模块化封装上一讲的DB库</li></ul></li></ul></li><li><a href="http://zhengchaoqiang/2020/03/14/typescript-learning-series-10/" target="_blank" rel="noopener">9. TypeScript中的命名空间</a></li><li><a href="http://zhengchaoqiang/2020/03/14/typescript-learning-series-11/" target="_blank" rel="noopener">10. TypeScript中的装饰器</a></li></ul><h2 id="TypeScript-介绍"><a href="#TypeScript-介绍" class="headerlink" title="TypeScript 介绍"></a>TypeScript 介绍</h2><ol><li>TypeScript 是由微软开发的一款开源的编程语言。</li><li>TypeScript 是 Javascript 的超级，遵循最新的 ES6、Es5 规范。TypeScript 扩展了 JavaScript 的语法。</li><li>TypeScript 更像后端 java、C#这样的面向对象语言可以让 js 开发大型企业项目。</li><li>谷歌也在大力支持 Typescript 的推广，谷歌的 angular2.x+就是基于 Typescript 语法。</li><li>最新的 Vue 、React 也可以集成 TypeScript</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://typescript-1257411902.cos.ap-chengdu.myqcloud.com/01/TSandJS.png" alt="TS&amp;ES"></p><h2 id="TypeScript-安装-编译"><a href="#TypeScript-安装-编译" class="headerlink" title="TypeScript 安装 编译"></a>TypeScript 安装 编译</h2><pre class="line-numbers language-nodejs"><code class="language-nodejs"># 安装cnpmnpm install cnpm -g --registry=https://registry.npm.taobao.org# 安装tscnpm install -g typescrip# 检测一下版本tsc -v# 编译文件helloworld.ts 会生成一个helloworld.jstsc helloworld.ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://typescript-1257411902.cos.ap-chengdu.myqcloud.com/01/indexwithts.png" alt="HelloWorld"></p><h2 id="TypeScript-开发工具"><a href="#TypeScript-开发工具" class="headerlink" title="TypeScript 开发工具"></a>TypeScript 开发工具</h2><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>借助vscode开发工具来配置：<br>第一步： 创建 tsconfig.json 文件。在文件目录下运行 tsc –init 生成配置文件 tsconfig.json，修改输出目录的配置 “outDir”: “./js”,<br>第二步： 任务 - 运行任务  监视tsconfig.json<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://typescript-1257411902.cos.ap-chengdu.myqcloud.com/01/tsvscode.png" alt="tsconfig"></p><h3 id="HBuilder"><a href="#HBuilder" class="headerlink" title="HBuilder"></a>HBuilder</h3><ul><li>略</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TypeScript Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-2-7-SixPrinciples</title>
      <link href="/2020/02/07/dotnet-advanced-series-2-7-sixprinciples/"/>
      <url>/2020/02/07/dotnet-advanced-series-2-7-sixprinciples/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SixPrinciples </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-2-6-DesignPattern3</title>
      <link href="/2020/02/07/dotnet-advanced-series-2-6-designpattern3/"/>
      <url>/2020/02/07/dotnet-advanced-series-2-6-designpattern3/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-2-5-DesignPattern2</title>
      <link href="/2020/02/07/dotnet-advanced-series-2-5-designpattern2/"/>
      <url>/2020/02/07/dotnet-advanced-series-2-5-designpattern2/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-2-4-DesignPattern1</title>
      <link href="/2020/02/07/dotnet-advanced-series-2-4-designpattern1/"/>
      <url>/2020/02/07/dotnet-advanced-series-2-4-designpattern1/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet-Advanced-Series-2-3-CLRCore</title>
      <link href="/2020/02/07/dotnet-advanced-series-2-3-clrcore/"/>
      <url>/2020/02/07/dotnet-advanced-series-2-3-clrcore/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CLRCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 2-2-AOP</title>
      <link href="/2020/02/07/dotnet-advanced-series-2-2-aop/"/>
      <url>/2020/02/07/dotnet-advanced-series-2-2-aop/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 AOP面向切面编程<br>2 静态AOP实现<br>3 动态代理AOP实现<br>4 静态织入实现AOP<br>5 Unity 依赖注入容器的AOP<br>6 MVC中的Filter 标记特性，然后该方法执行前后就多了逻辑，Invoker调用中心负责反射调用方法，检查特性，有则执行额外逻辑。</p><h2 id="POP和OOP"><a href="#POP和OOP" class="headerlink" title="POP和OOP"></a>POP和OOP</h2><ul><li><p>POP:面向过程编程，代码是线性式 严格按照顺序  </p></li><li><p>OOP:面向对象编程 万物皆对象，可以搭建大型的复杂系统<br>砖块—墙—房间—高楼大厦（稳定）   砖块确实是稳定，静态的<br>类–各种功能点—功能模块—系统（平台） 类是稳定的吗?<br>类是无法一直稳定，确实有场景需要改动。。。<br>GOF 23种设计模式  面对变化，核心套路都是依赖抽象   可以更换具体的类型 (最小的粒度只能到类)<br>只能替换整个对象，不能让类动态话，只能替换类；</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/11AOP/OOP.png" alt="OOP"></p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP: 可以让类动态化！动态粒度更小，可以把类里面的成员给修改掉！<br>AOP 允许开发者动态的修改静态的OO模型，就像现实生活中对象在生命周期中会不断的改变自身。<br>AOP 面向切面编程 (Aspect Oriented Programming)   其实是OOP扩展。</p><p><strong>使用Aop特点以后：</strong></p><ul><li>只聚焦于自身模块的业务功能，用户验证/日志处理/都可以通过Aop给动态加进来！程序设计变得简单。</li><li>功能扩展性更强，把功能集中管理，代码复用，更加规范</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/11AOP/AOP.png" alt="AOP"></p><h2 id="AOP的多种方式"><a href="#AOP的多种方式" class="headerlink" title="AOP的多种方式"></a>AOP的多种方式</h2><p>是按AOP的方式：</p><ol><li>装饰器模式/代理模式   静态实现</li><li>动态实现 （Remoting）(Emit)</li><li>通过Unity 支持AOP</li></ol><p>下面会结合一个例子去描述这几种方式的具体实现，有一个用户的接口和实现，描述如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserProcessor</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">RegUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProcessor</span> <span class="token punctuation">:</span> IUserProcessor<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RegUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"用户已注册。Name:{0},PassWord:{1}"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在要想扩展这个实现，但是又不能去修改原来的实现，应该如何实现呢？例如在注册之前和之后都要加上一些操作。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 业务逻辑之前</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">BeforeProceed</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"方法执行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 业务逻辑之后</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">AfterProceed</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"方法执行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器的模式去提供一个AOP功能:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProcessorDecorator</span> <span class="token punctuation">:</span> IUserProcessor<span class="token punctuation">{</span>  <span class="token keyword">private</span> IUserProcessor _UserProcessor <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">UserProcessorDecorator</span><span class="token punctuation">(</span>IUserProcessor userprocessor<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_UserProcessor <span class="token operator">=</span> userprocessor<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RegUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">BeforeProceed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_UserProcessor<span class="token punctuation">.</span><span class="token function">RegUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AfterProceed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的时候这么用：</p><pre class="line-numbers language-csharp"><code class="language-csharp">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Name <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">,</span>  Password <span class="token operator">=</span> <span class="token string">"123123123123"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>IUserProcessor processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processor<span class="token punctuation">.</span><span class="token function">RegUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserProcessorDecorator</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span><span class="token punctuation">;</span>processor<span class="token punctuation">.</span><span class="token function">RegUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式去提供一个AOP功能：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyUserProcessor</span> <span class="token punctuation">:</span> IUserProcessor<span class="token punctuation">{</span>  <span class="token keyword">private</span> IUserProcessor _UserProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RegUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">BeforeProceed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_UserProcessor<span class="token punctuation">.</span><span class="token function">RegUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AfterProceed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的时候可以这么用：</p><pre class="line-numbers language-csharp"><code class="language-csharp">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Name <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">,</span>  Password <span class="token operator">=</span> <span class="token string">"123123123123"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>IUserProcessor processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processor<span class="token punctuation">.</span><span class="token function">RegUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyUserProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processor<span class="token punctuation">.</span><span class="token function">RegUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比一下装饰器模式和代理模式</strong>： 前者是传递了一个UserProcessor对象到构造函数里面去，而后者是内置实例化了一个对象。这两者的侧重点不同，装饰器可以多层装饰，处理的场景不同。<br>这两者都是静态实现，说白了都是需要去添加代理或者装饰器类的。</p><h3 id="使用-Net-Remoting-RealProxy-实现动态代理"><a href="#使用-Net-Remoting-RealProxy-实现动态代理" class="headerlink" title="使用.Net Remoting/RealProxy 实现动态代理"></a>使用.Net Remoting/RealProxy 实现动态代理</h3><p>局限在业务类必须是继承自MarshalByRefObject类型，只有一个父类，必须是这个MarshalByRefObject。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProcessor</span> <span class="token punctuation">:</span> MarshalByRefObject<span class="token punctuation">,</span> IUserProcessor<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RegUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"用户已注册。用户名称{0} Password{1}"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时还需要两个代理类，分别是真实代理和透明代理：<br>透明代理类的代码是固定的，不需要修改：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//透明代理</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TransparentProxy</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> T <span class="token generic-method function">Create<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    T instance <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token generic-method function">CreateInstance<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyRealProxy<span class="token operator">&lt;</span>T<span class="token operator">></span> realProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRealProxy</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    T transparentProxy <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>realProxy<span class="token punctuation">.</span><span class="token function">GetTransparentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> transparentProxy<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是真实代理，需要自己去重新实现的：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealProxy</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> RealProxy<span class="token punctuation">{</span>  <span class="token keyword">private</span> T tTarget<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">MyRealProxy</span><span class="token punctuation">(</span>T target<span class="token punctuation">)</span>      <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tTarget <span class="token operator">=</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">override</span> IMessage <span class="token function">Invoke</span><span class="token punctuation">(</span>IMessage msg<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">BeforeProceede</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Log  try-catch</span>    IMethodCallMessage callMessage <span class="token operator">=</span> <span class="token punctuation">(</span>IMethodCallMessage<span class="token punctuation">)</span>msg<span class="token punctuation">;</span>    <span class="token keyword">object</span> returnValue <span class="token operator">=</span> callMessage<span class="token punctuation">.</span>MethodBase<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tTarget<span class="token punctuation">,</span> callMessage<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AfterProceede</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnMessage</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> callMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">BeforeProceede</span><span class="token punctuation">(</span>IMessage msg<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"方法执行前可以加入的逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AfterProceede</span><span class="token punctuation">(</span>IMessage msg<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"方法执行后可以加入的逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在真实使用的时候，实际上会调用Invoke方法，如下：</p><pre class="line-numbers language-csahrp"><code class="language-csahrp">User user = new User(){  Name = "Richard",  Password = "123456"};UserProcessor processor = new UserProcessor();processor.RegUser(user);Console.WriteLine("*********************");UserProcessor userProcessor = TransparentProxy.Create<UserProcessor>();userProcessor.RegUser(user);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Castle-DynamicProxy-实现动态代理"><a href="#使用Castle-DynamicProxy-实现动态代理" class="headerlink" title="使用Castle\DynamicProxy 实现动态代理"></a>使用Castle\DynamicProxy 实现动态代理</h3><p>方法必须是虚方法:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProcessor</span> <span class="token punctuation">:</span> IUserProcessor<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 必须带上virtual 否则无效~</span>  <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">RegUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"用户已注册。Name:{user.Name},PassWord:{user.Password}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要在Nuget里面添加这个dll：<code>using Castle.DynamicProxy;//Castle.Core</code></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token punctuation">:</span> IInterceptor<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Intercept</span><span class="token punctuation">(</span>IInvocation invocation<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">PreProceed</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>    invocation<span class="token punctuation">.</span><span class="token function">Proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//就是调用原始业务方法</span>    <span class="token function">PostProceed</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PreProceed</span><span class="token punctuation">(</span>IInvocation invocation<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"方法执行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PostProceed</span><span class="token punctuation">(</span>IInvocation invocation<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"方法执行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的时候可以这么用,Castle的核心原理是基于Emit实现的：</p><pre class="line-numbers language-csharp"><code class="language-csharp">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Name <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">,</span>  Password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ProxyGenerator generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserProcessor userprocessor <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token generic-method function">CreateClassProxy<span class="token punctuation">&lt;</span>UserProcessor<span class="token punctuation">></span></span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>userprocessor<span class="token punctuation">.</span><span class="token function">RegUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态织入实现AOP"><a href="#静态织入实现AOP" class="headerlink" title="静态织入实现AOP"></a>静态织入实现AOP</h3><p>PostSharp，收费工具，扩展编译工具，生成加入额外代码</p><h3 id="Unity容器"><a href="#Unity容器" class="headerlink" title="Unity容器"></a>Unity容器</h3><p>首先，需要引入<code>Unity, Unity.Abstractions, Unity.Configuration, Unity.Container, Unity.Interception, Unity,Interception.Configuration</code>这些关于Unity的Nuget包。<br>然后，还需要准备一个配置文件如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configSections</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>unity<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--Microsoft.Practices.Unity.Configuration.UnityConfigurationSection--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configSections</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>unity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sectionExtension</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>containers</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>container</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aopContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Interception<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>register</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyAOP.UnityWay.IUserProcessor,MyAOP<span class="token punctuation">"</span></span> <span class="token attr-name">mapTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyAOP.UnityWay.UserProcessor,MyAOP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interceptor</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>InterfaceInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interceptionBehavior</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyAOP.UnityWay.MoniterBehavior, MyAOP<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interceptionBehavior</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyAOP.UnityWay.LogBeforeBehavior, MyAOP<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interceptionBehavior</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyAOP.UnityWay.ParameterCheckBehavior, MyAOP<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interceptionBehavior</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyAOP.UnityWay.CachingBehavior, MyAOP<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interceptionBehavior</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyAOP.UnityWay.ExceptionLoggingBehavior, MyAOP<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interceptionBehavior</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyAOP.UnityWay.LogAfterBehavior, MyAOP<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>register</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>containers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>unity</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面定义了容器的类型type，还有容器的 名字name，这是是<code>aopContainer</code>。其中的核心是<code>register</code>, 完整类型名称+dll名称： <code>type="MyAOP.UnityWay.IUserProcessor,MyAOP" mapTo="MyAOP.UnityWay.UserProcessor,MyAOP"</code>,MyAOP是dll的名称，把接口IUserProcessor映射到UserProcessor这个上面去，MyAOP是完整名称。后面通过容器创建实例的时候就是依靠这一段配置实现的。<br><code>interceptor type="InterfaceInterceptor"</code>是配置接口的扩展，还可以配置类和方法。<br>j接着，在具体使用的时候是这样，在调用RegUser方法的时候，会依次去执行配置文件里面的这些behavior，例如MoniterBehavior，LogBeforeBehavior，ParameterCheckBehavior，CachingBehavior，ExceptionLoggingBehavior，LogAfterBehavior。</p><pre class="line-numbers language-csharp"><code class="language-csharp">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Name <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">,</span>  Password <span class="token operator">=</span> <span class="token string">"1234567890123456789"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置UnityContainer</span>IUnityContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnityContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ExeConfigurationFileMap fileMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExeConfigurationFileMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileMap<span class="token punctuation">.</span>ExeConfigFilename <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory <span class="token operator">+</span> <span class="token string">"CfgFiles\\Unity.Config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Configuration configuration <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span><span class="token function">OpenMappedExeConfiguration</span><span class="token punctuation">(</span>fileMap<span class="token punctuation">,</span> ConfigurationUserLevel<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span>UnityConfigurationSection configSection <span class="token operator">=</span> <span class="token punctuation">(</span>UnityConfigurationSection<span class="token punctuation">)</span>configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span>UnityConfigurationSection<span class="token punctuation">.</span>SectionName<span class="token punctuation">)</span><span class="token punctuation">;</span>configSection<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token string">"aopContainer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IUserProcessor processor <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method function">Resolve<span class="token punctuation">&lt;</span>IUserProcessor<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processor<span class="token punctuation">.</span><span class="token function">RegUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>processor<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，我们需要看一下，这些Behavior到底是怎么实现的呢？<br>必须实现接口IInterceptionBehavior，在方法Invoke中扩展逻辑：</p><ul><li>在执行注册方法之前执行监控方法：</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoniterBehavior</span> <span class="token punctuation">:</span> IInterceptionBehavior<span class="token punctuation">{</span>  <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">GetRequiredInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> IMethodReturn <span class="token function">Invoke</span><span class="token punctuation">(</span>IMethodInvocation input<span class="token punctuation">,</span> GetNextInterceptionBehaviorDelegate getNext<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">string</span> methodName <span class="token operator">=</span> input<span class="token punctuation">.</span>MethodBase<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>     Stopwatch stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 可以在这儿添加方法之前的逻辑</span>     <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> getNext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后续逻辑执行</span>     stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{this.GetType().Name}执行耗时：{stopwatch.ElapsedMilliseconds} ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> query<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">bool</span> WillExecute  <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在执行注册方法之前执行日志方法：</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogBeforeBehavior</span> <span class="token punctuation">:</span> IInterceptionBehavior<span class="token punctuation">{</span>  <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">GetRequiredInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> IMethodReturn <span class="token function">Invoke</span><span class="token punctuation">(</span>IMethodInvocation input<span class="token punctuation">,</span> GetNextInterceptionBehaviorDelegate getNext<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"LogBeforeBehavior"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> input<span class="token punctuation">.</span>Inputs<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反射获取更多信息</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> getNext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//下一个节点的方法已经执行完毕   </span>    <span class="token comment" spellcheck="true">//在这里计入方法执行后的逻辑</span>    <span class="token keyword">return</span> query<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">bool</span> WillExecute  <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在执行注册方法之前执行检查参数behavior</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterCheckBehavior</span> <span class="token punctuation">:</span> IInterceptionBehavior<span class="token punctuation">{</span>  <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">GetRequiredInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> IMethodReturn <span class="token function">Invoke</span><span class="token punctuation">(</span>IMethodInvocation input<span class="token punctuation">,</span> GetNextInterceptionBehaviorDelegate getNext<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ParameterCheckBehavior"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过特性校验</span>    User user <span class="token operator">=</span> input<span class="token punctuation">.</span>Inputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> User<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>Password<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//throw new Exception(); </span>      <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">CreateExceptionMethodReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"密码长度不能小于10位"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"参数检测无误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> getNext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">bool</span> WillExecute  <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在执行注册方法之前执行缓存方法</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingBehavior</span> <span class="token punctuation">:</span> IInterceptionBehavior<span class="token punctuation">{</span>  <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">GetRequiredInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> IMethodReturn <span class="token function">Invoke</span><span class="token punctuation">(</span>IMethodInvocation input<span class="token punctuation">,</span> GetNextInterceptionBehaviorDelegate getNext<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"CachingBehavior"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//input.Target.GetType().GetCustomAttributes()</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>MethodBase<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"GetUser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">CreateMethodReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">"Richard"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> getNext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">bool</span> WillExecute  <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>让异常包裹所有的方法，先执行业务逻辑</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionLoggingBehavior</span> <span class="token punctuation">:</span> IInterceptionBehavior<span class="token punctuation">{</span>  <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">GetRequiredInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> IMethodReturn <span class="token function">Invoke</span><span class="token punctuation">(</span>IMethodInvocation input<span class="token punctuation">,</span> GetNextInterceptionBehaviorDelegate getNext<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ExceptionLoggingBehavior"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IMethodReturn methodReturn <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> getNext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodReturn<span class="token punctuation">.</span>Exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"无异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"异常:{methodReturn.Exception.Message}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> methodReturn<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">bool</span> WillExecute  <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行LogAfter方法，也是需要等业务方法执行完之后再执行的。</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAfterBehavior</span> <span class="token punctuation">:</span> IInterceptionBehavior<span class="token punctuation">{</span>  <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">GetRequiredInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> IMethodReturn <span class="token function">Invoke</span><span class="token punctuation">(</span>IMethodInvocation input<span class="token punctuation">,</span> GetNextInterceptionBehaviorDelegate getNext<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"LogAfterBehavior"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> input<span class="token punctuation">.</span>Inputs<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反射获取更多信息</span>    <span class="token punctuation">}</span>    IMethodReturn methodReturn <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> getNext<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"LogAfterBehavior"</span> <span class="token operator">+</span> methodReturn<span class="token punctuation">.</span>ReturnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> methodReturn<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">bool</span> WillExecute  <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回过头再看一下整个的执行过程：一开始进来的时候是MoniterBehavior方法，开启秒表，然后依次往后执行LogBeforeBehavior，ParameterCheckBehavior，CachingBehavior，ExceptionLoggingBehavior，LogAfterBehavio，遇到<code>getNext()(input, getNext)</code>就往后执行，直到执行到业务代码完成了之后，再依次往前返回，实际上就是net core里面的管道。<br><code>getNext()(input, getNext)</code>和<code>getNext().Invoke(input, getNext)</code>是一个意思，getNext（）返回是一个委托，可以直接invoke进行执行，也可以直接调用。</p><p><strong>值得注意的问题：</strong></p><ol><li>顺序问题，配置文件的注册顺序是调用顺序，然后才是业务方法，但是扩展逻辑可以在业务方法后；例如Exception那里。</li><li>接口方法不需要某个AOP扩展：a.判断方法； b.推荐用特性（在接口声明的地方用）</li></ol><p>Input.Target.GetType().GetCustomAttributes()获取特性，然后可以针对某些方法不生效，例如：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//接口声明特性</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserProcessor</span><span class="token punctuation">{</span>  <span class="token punctuation">[</span>TestAttritubte<span class="token punctuation">]</span>  <span class="token keyword">void</span> <span class="token function">RegUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-15-AwaitAsync</title>
      <link href="/2020/02/06/dotnet-advanced-series-1-15-awaitasync/"/>
      <url>/2020/02/06/dotnet-advanced-series-1-15-awaitasync/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 await/async语法和使用<br>2 原理探究和使用建议 </p><h2 id="Await-Async"><a href="#Await-Async" class="headerlink" title="Await Async"></a>Await Async</h2><p>await/async 是C# 的保留关键字 ，.Net framework4.5 版本出现的，通常是成对出现。<br>async修饰方法，可以单独出现，但是有警告。<br>await在方法体，只能出现在task/async方法前面，只有await会报错。<br><code>await Task.Run()</code>和<code>await task</code>这种用法都是可以的。<br>.NetFramework4.5—-await/async 语法糖：由编译器提供的功能。<br>Common Language Runtime(CLR)</p><h3 id="只有async没有await"><a href="#只有async没有await" class="headerlink" title="只有async没有await"></a>只有async没有await</h3><p>只有async没有await，跟普通方法没有区别：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token keyword">void</span> <span class="token function">NoReturnNoAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//主线程执行</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturnNoAwait Sleep before Task,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Task task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token comment" spellcheck="true">//启动新线程完成任务</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturnNoAwait Sleep3000 before,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturnNoAwait Sleep3000 after,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//主线程执行</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturnNoAwait Sleep after Task,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="async-await-一起用"><a href="#async-await-一起用" class="headerlink" title="async/await 一起用"></a>async/await 一起用</h3><p>主线程调用async/await方法，主线程遇到await返回执行后续动作；<br>await 后面的代码会等着task任务的完成后再继续执行。<br><strong>例子一：</strong><br>主线程的内容：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"当前主线程id={Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">NoReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Main Thread Task ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>子线程方法内容：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token keyword">void</span> <span class="token function">NoReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//主线程执行</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturn Sleep before await,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TaskFactory taskFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Task task <span class="token operator">=</span> taskFactory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturn Sleep3000 before,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturn Sleep3000 after,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> task<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主线程到这里就返回了，执行主线程任务</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturn Sleep after await,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主线程在遇到<code>await task</code>这里的时候就返回了，await后面的动作就被阻塞了，但是主线程没有被阻塞，继续在工作。<br>更进一步的理解：这个await可以理解为continuewith，主线程启动task没有被阻塞，回去干自己的活。然后ContinueWith就是一个回调，这个时候的线程可能是主线程，也可能是一个新的线程。Await在这里的作用就类似于把await后面的代码包装成一个回调。<br>值得注意的是：回调的动作，可能是Task线程，也可能是新的子线程，也可能是主线程。</p><pre class="line-numbers language-csharp"><code class="language-csharp">task<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//这是一个回调</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturn Sleep after await,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子二：</strong><br>一个async方法没有返回值的时候，可以返回Task。不同于<code>NoReturn</code>方法，下面这个方法就是返回Task的：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">NoReturnTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在async/await方法里面如果没有返回值，默认返回一个Task</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里还是主线程的id</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturnTask Sleep before await,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Task task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturnTask Sleep3000 before,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturnTask Sleep3000 after,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> task<span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"NoReturnTask Sleep after await,ThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主线程里面这么用：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Task t<span class="token operator">=</span> <span class="token function">NoReturnTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Main Thread Task ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主线程等待Task的完成  阻塞的</span><span class="token keyword">await</span> t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//await后的代码会由线程池的线程执行  非阻塞</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="带返回值的Task"><a href="#带返回值的Task" class="headerlink" title="带返回值的Task"></a>带返回值的Task</h3><p>带返回值的Task，要使用返回值就一定要等子线程计算完毕。<br>await/async用同步的方式编写代码，但又是非阻塞的。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> <span class="token function">SumAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"SumAsync 111 start ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"SumAsync {k} await Task.Run ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 999_999_999<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      result <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"SumFactory 111   end ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"SumAsync {k} await Task.Run ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">999999999</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      result <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主线程可以这么用，<code>t.Result</code>和<code>t.Wait()</code>是等价的，都是阻塞的。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Task<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> t <span class="token operator">=</span> <span class="token function">SumAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Main Thread Task ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> lResult <span class="token operator">=</span> t<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问result   主线程等待所有的任务挖成 //如果访问Result，就相当于是同步方法！</span>t<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于上一行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>真的返回Task  不是async，要使用返回值就一定要等子线程计算完毕：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> Task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">SumFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"SumFactory 111 start ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TaskFactory taskFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> iResult <span class="token operator">=</span> taskFactory<span class="token punctuation">.</span><span class="token generic-method function">StartNew<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"SumFactory 123 Task.Run ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Console.WriteLine($"This is {iResult.Result}");</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"SumFactory 111   end ManagedThreadId={Thread.CurrentThread.ManagedThreadId}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> iResult<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Await-Async原理"><a href="#Await-Async原理" class="headerlink" title="Await Async原理"></a>Await Async原理</h2><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"start1 {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"aaa2 {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token keyword">void</span> <span class="token function">Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"ddd5 {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"bbb3 {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"ccc4 {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译一下可以看原理：<br>async方法在编译后会生成一个状态机（实现了IAsyncStateMachine接口）；<br>异步状态机：初始化状态——执行就修改状态1——再执行就修改状态0——执行状态1——出现其他状态就结束了；</p><ul><li>async方法里面的逻辑其实都放在了MoveNext—主线程new一个状态机 状态-1</li><li>主线程调用MoveNext—执行了await之前的东西—启动Task—主线程改状态为0—回去干自己的事</li><li>子线程再去MoveNext—状态又回归-1—再执行后续的逻辑—如果需要还可以继续循环</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Thread </tag>
            
            <tag> Async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-14-Threads03</title>
      <link href="/2020/02/05/dotnet-advanced-series-1-14-threads03/"/>
      <url>/2020/02/05/dotnet-advanced-series-1-14-threads03/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 多异常处理和线程取消<br>2 多线程的临时变量<br>3 线程安全和锁lock<br>4 await async</p><h2 id="多线程异常"><a href="#多线程异常" class="headerlink" title="多线程异常"></a>多线程异常</h2><p><strong>思考：</strong><br>多线程中如果某一个线程异常了，就会终结当前线程；对其他的线程是没有影响的；<br>多线程中的异常去哪儿了？  被吞掉了。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">try</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>Task<span class="token operator">></span> taskList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">string</span> name <span class="token operator">=</span> $<span class="token string">"btnThreadCore_Click_{i}"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>    taskList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>$<span class="token string">"{name} 异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>$<span class="token string">"{name} 异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>$<span class="token string">"{name} 异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"this is {name} Ok!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>taskList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AggregateException</span> aex<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//可以有多个Catch 在匹配异常类型的时候，先具体，然后在寻找父类</span><span class="token punctuation">{</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> exception <span class="token keyword">in</span> aex<span class="token punctuation">.</span>InnerExceptions<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过异常AggregateException 可以捕获到多线程中的异常，然后遍历InnerExceptions就可以得到具体的线程异常。<br>在工作中常规建议是：多线程的委托里面不想允许异常，包一层try catch，然后记录下来信息，完成一些操作。<br><strong>更进一步：</strong> 在实际的工作中，往往有很多场景是如果发生异常之后，其他的线程就需要取消，不再继续往下执行；问题就是如何取消线程；</p><h2 id="线程取消"><a href="#线程取消" class="headerlink" title="线程取消"></a>线程取消</h2><p>多线程并发任务，某个失败后，希望通知别的线程，都停下来，how?<br>Thread.Abort() 终止线程，向当前线程抛一个异常然后终结任务:线程属于OS资源，可能不会立即停下来。<br>Task不能从外部终止任务，只能自己终止自己（上帝才能打败自己）</p><pre class="line-numbers language-csharp"><code class="language-csharp">CancellationTokenSource cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通知式的</span><span class="token keyword">try</span><span class="token punctuation">{</span>   List<span class="token operator">&lt;</span>Task<span class="token operator">></span> taskList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">string</span> name <span class="token operator">=</span> $<span class="token string">"btnThreadCore_Click_{i}"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>    taskList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>$<span class="token string">"{name} 异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cts<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//是否取消</span>      <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"this is {name} Ok!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"this is {name} Stop!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>taskList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AggregateException</span> aex<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//可以有多个Catch 在匹配异常类型的时候，先具体，然后在寻找父类</span><span class="token punctuation">{</span>  cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行该方法以后，IsCancellationRequested会被指定为false</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> exception <span class="token keyword">in</span> aex<span class="token punctuation">.</span>InnerExceptions<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CancellationTokenSource这个对象有个bool属性IsCancellationRequested，对外提供一个方法Cancel()方法。可以重复Cancel，别的线程可以通过属性IsCancellationRequested来知道，是否需要撤销。<br> 如果线程还没启动，能不能就不要启动了。<br> Task在Run的时候可以接受一个参数CancellationToken，可以进一步升级一下：<br> 1.启动线程传递token<br> 2.异常抓取<br> 3.在Cancel时还没有启动的任务就不启动了，二十抛出异常</p><pre class="line-numbers language-csharp"><code class="language-csharp">taskList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>$<span class="token string">"{name} 异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cts<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//是否取消</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"this is {name} Ok!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"this is {name} Stop!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="临时变量"><a href="#临时变量" class="headerlink" title="临时变量"></a>临时变量</h2><p>先看一下下面两个例子：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//for 循环很快</span><span class="token punctuation">{</span>  Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// 开启线程；不会阻塞的,线程会延迟启动</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"btnThreadCore_Click_{i} 线程Id={Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么最后输出<code>btnThreadCore_Click_20</code>？<br>这里有个临时变量的问题，线程时非阻塞的，延迟启动的；线程执行的时候，i已经是20了。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//作用域 这个k 是不是只是针对于某一次for 循环，循环20次就会有20 k</span>  Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"btnThreadCore_Click_{k} 线程Id={Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>k为什么是对的呢？k是闭包里面的变量，没次循环都有一个独立的k，但是i是共享变量。事实上有5个k变量，但是只有一个i变量。</p><h2 id="线程安全-amp-lock"><a href="#线程安全-amp-lock" class="headerlink" title="线程安全&amp;lock"></a>线程安全&amp;lock</h2><p>线程安全：如果你的代码在进程中有多个线程同时运行这一段，如果每次运行的结果都跟单线程运行时的结果一致，那么就是线程安全的。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">int</span> iNumSync<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> iNumAsync<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  iNumSync<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>iNumAsync<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"iNumSync={iNumSync},iNumAsync={iNumAsync}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现单线程的结果就是稳定的10000，多线程的计算结果不是10000，且不能被预测。<br>上述过程就是线程不安全。<br>线程不安全一般出现在全局变量/共享变量/磁盘文件/静态变量/数据库的值/只要是多项去访问修改的时候，就可能会出现线程安全。<br>发生是因为多个线程相同操作，出现了覆盖，怎么解决呢？</p><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><ul><li>Lock是语法糖，Monitor.Enter 占据一个应用，别的线程就只能等着</li><li>推荐锁是 <code>private static readonly object</code>，</li><li>不能是null，也不能是string；</li><li>不推荐使用lock(this) 注意是一个线程还是多线程，如果外面也要用实例，就冲突了。</li><li>锁的作用：排他</li><li>lock里面的代码不要太多</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">object</span> Obj_Lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>      <span class="token keyword">lock</span> <span class="token punctuation">(</span>Obj_Lock<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以 避免多线程并发，如果锁住以后，其实这里跟单线程基本上没啥区别；</span>      <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>NumTow <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">throw</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用DoTest的时候，递归作用，lock this 这里会不会死锁？</p><pre class="line-numbers language-csharp"><code class="language-csharp">Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不会死锁！！！因为是同一个线程，</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> TestNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">lock</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 为了排他  锁的正常作用：应该在这儿等待，</span>    <span class="token punctuation">{</span>      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      TestNum <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Day <span class="token operator">&lt;</span> <span class="token number">13</span> <span class="token operator">&amp;&amp;</span> TestNum <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>private string Str_Lock = "ChaoqiangLock";</code>为什么string也不能用于锁呢？<br>因为string对不同的变量，如果字符串内容相同，是共享内存的，所以也是同一把锁。</p><h3 id="线程安全集合"><a href="#线程安全集合" class="headerlink" title="线程安全集合"></a>线程安全集合</h3><p><code>System.Collections.Concurrent.ConcurrentStack</code>  <code>System.Collections.Concurrent.ConcurrentQueue&lt;int&gt;</code>像这些都是基于线程安全。</p><h3 id="数据分拆"><a href="#数据分拆" class="headerlink" title="数据分拆"></a>数据分拆</h3><p>避免多个线程操作同一堆数据，安全又高效率。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Thread </tag>
            
            <tag> Async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-13-Threads02</title>
      <link href="/2020/02/05/dotnet-advanced-series-1-13-threads02/"/>
      <url>/2020/02/05/dotnet-advanced-series-1-13-threads02/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 Task：Waitall  WaitAny  Delay<br>2 TaskFactory:ContinueWhenAny  ContinueWhenAll<br>3 Parallel </p><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Task 是.NetFramework3.0出现的。提供了非常多的Api。<br>Task里面的线程是来自于线程池！<br>可以有下面几种写法：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Task task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btntask_Click1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>task<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启了一个新的线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp">Task task<span class="token operator">=</span>Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btntask_Click2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"> TaskFactory taskFactory <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span>taskFactory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btntask_Click3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步等待"><a href="#异步等待" class="headerlink" title="异步等待"></a>异步等待</h3><p>Thread.Sleep()同步等待，阻塞当前线程：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Stopwatch stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{stopwatch.ElapsedMilliseconds}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Delay异步等待，不会阻塞主线程：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Task.Delay 出现于4.5版本</span>Stopwatch stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Task task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//任务在2000ms 以后执行</span><span class="token punctuation">{</span>  stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{stopwatch.ElapsedMilliseconds}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"回调已完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考：什么时候使用多线程？多线程能干嘛？<br>任务能并发的时候，提升速度，优化用户体验。<br>下面看一个例子,有几个动作：<br>上课方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Teach</span><span class="token punctuation">(</span><span class="token keyword">string</span> lession<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************课程:{lession}  Start  {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}  ***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Thread.Sleep(2000);</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************课程:{lession}  End  {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}  ***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Coding动作：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Coding</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> projectName<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************{name}Coding  Start  {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}  ***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> iResult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    iResult <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************{name} Coding  End  {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}  ***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后模拟上课，coding这个过程：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"老师开始讲课！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Teach</span><span class="token punctuation">(</span><span class="token string">"Lesson1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Teach</span><span class="token punctuation">(</span><span class="token string">"Lesson2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Teach</span><span class="token punctuation">(</span><span class="token string">"Lesson3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Teach</span><span class="token punctuation">(</span><span class="token string">"Lesson4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里不能并发，不能使用多线程</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"课程结束，开始实战项目练习！但是实战项目内容比较复杂，需要合作完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Task<span class="token operator">></span> tasksList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TaskFactory taskFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tasksList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>taskFactory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Coding</span><span class="token punctuation">(</span><span class="token string">"杰克"</span><span class="token punctuation">,</span> <span class="token string">"系统管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tasksList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>taskFactory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Coding</span><span class="token punctuation">(</span><span class="token string">"流光易逝"</span><span class="token punctuation">,</span> <span class="token string">"部门管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tasksList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>taskFactory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Coding</span><span class="token punctuation">(</span><span class="token string">"偏执"</span><span class="token punctuation">,</span> <span class="token string">"客户管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tasksList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>taskFactory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Coding</span><span class="token punctuation">(</span><span class="token string">"清茶"</span><span class="token punctuation">,</span> <span class="token string">"接口管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tasksList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>taskFactory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Coding</span><span class="token punctuation">(</span><span class="token string">"秋陌"</span><span class="token punctuation">,</span> <span class="token string">"写Api"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果有一个同学完成了某一个模块，老师就需要准备环境！</span><span class="token comment" spellcheck="true">// 等待某一个线程执行完毕以后 继续往后执行</span>Task<span class="token punctuation">.</span><span class="token function">WaitAny</span><span class="token punctuation">(</span>tasksList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Richard老师开始准备环境部署项目！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Richard老师要等待大家都完成了以后，开始给点评！</span>Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>tasksList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//阻塞主线程</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"5个模块均已完成，老师点评！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>taskFactory<span class="token punctuation">.</span><span class="token function">ContinueWhenAll</span><span class="token punctuation">(</span>tasksList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rArrary <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"开发完成，庆祝一下{Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WaitAny和WaitAll都是阻塞线程的，还可以加上参数时间。<br>这个过程中我们摄像一个场景：<br>在一个主页中，A —接口1   B—接口2  C—接口3</p><ol><li>Task.WaitAll： 等待全部任务都完成</li><li>Task.WaitAny: 数据源来自于不同的接口或者缓存，那就可以开启多个线程全部去获取数据，只要是有一个线程获取到数据了，其他的线程就不管了！</li><li>ContinueWhenAll和ContinueWhenAny不会阻塞线程 相当于回调函数，而且使用的线程可能是新线程，也可能是刚完成任务的线程，唯一不可能的是主线程。</li></ol><p>ContinueWith相当于回调函数，但是这两个线程是不一样的。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnTask_Click"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token operator">></span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"btnTask_Click 已经完成 {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>带有返回值的Task，获取Result的时候才会阻塞执行。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token generic-method function">Run<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span>result<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会阻塞</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想阻塞，上面这种写法还可以这样优化一下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token operator">=</span>result<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非阻塞的</span><span class="token punctuation">}</span><span class="token punctuation">)</span>；Task<span class="token punctuation">.</span><span class="token generic-method function">Run<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>tInt<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token operator">=</span>tInt<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h2><p>Parallel 对Task进一步进行了封装 .Netframework 4.5版本出来。<br>多线程中控制执行顺序，一直是一个难题，使用Parallel可以控制线程的执行顺序。<br>Parallel并发执行了五个委托，开启了新线程，主线程参与计算，界面会阻塞。<br>效果等同于 Task WaitAll  + 主线程。</p><p>1.接受多个Action委托</p><pre class="line-numbers language-csharp"><code class="language-csharp">Parallel<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnParallel_Click_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnParallel_Click_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnParallel_Click_3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnParallel_Click_4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnParallel_Click_5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.For循环来操作</p><pre class="line-numbers language-csharp"><code class="language-csharp">Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> parallelOptions<span class="token punctuation">,</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>$<span class="token string">"btnParallel_Click_{t}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.Foreach 循环来操作</p><pre class="line-numbers language-csharp"><code class="language-csharp">Parallel<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> parallelOptions<span class="token punctuation">,</span> t <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>$<span class="token string">"btnParallel_Click_{t}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>控制线程数量：</strong><br>控制线程数量，控制执行数量。</p><pre class="line-numbers language-csharp"><code class="language-csharp">ParallelOptions parallelOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParallelOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parallelOptions<span class="token punctuation">.</span>MaxDegreeOfParallelism <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> parallelOptions<span class="token punctuation">,</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>$<span class="token string">"btnParallel_Click_{t}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有没有办法可以不阻塞执行这个For呢，不让主线程参与呢？直接再开一个线程来执行。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> parallelOptions<span class="token punctuation">,</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>$<span class="token string">"btnParallel_Click_{t}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>几乎90%以上的场景都可以用Task解决，如果不行，就要梳理一下流程；<br>建议不要线程嵌套，两层勉强能懂，三层就hold不住了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Thread </tag>
            
            <tag> Async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-12-Threads01</title>
      <link href="/2020/02/05/dotnet-advanced-series-1-12-threads01/"/>
      <url>/2020/02/05/dotnet-advanced-series-1-12-threads01/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>线程池ThreadPool</p><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>C#中的多线程 1.0已经存在<br>Thread类： C#对线程对象的一个封装<br><code>ThreadStart</code>是一个没有参数没有返回值的委托：<code>public delegate void ThreadStart();</code></p><pre class="line-numbers language-csharp"><code class="language-csharp">ThreadStart threadStart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnThread_Click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************btnThread_Click   End   {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}  ***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadStart<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启一个新线程  </span>thread<span class="token punctuation">.</span><span class="token function">Suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 暂停线程 弃用了</span>thread<span class="token punctuation">.</span><span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//恢复  无法实时的去暂停或者恢复线程 弃用了</span>thread<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终结线程</span>Thread<span class="token punctuation">.</span><span class="token function">ResetAbort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//都会有延时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子描述了启动一个线程，在这个线程里执行委托内容。另外一种使用<code>ParameterizedThreadStart</code>也是类似的。<br><code>thread.Abort()</code>，线程是计算机资源，程序想停下线程，只能向操作系统通知（线程抛异<br>常），会有延时/不一定能真的停下来。<br>暂停不一定马上暂停，不该让线程操作太复杂。</p><pre class="line-numbers language-csharp"><code class="language-csharp">ParameterizedThreadStart threadStart <span class="token operator">=</span> ar <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnThread_Click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************btnThread_Click   End   {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}  ***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadStart<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启一个新线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线程等待：</strong><br>如果我们需要等待；</p><ul><li><strong>等待</strong></li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">while</span> <span class="token punctuation">(</span>thread<span class="token punctuation">.</span>ThreadState <span class="token operator">!=</span> ThreadState<span class="token punctuation">.</span>Stopped<span class="token punctuation">)</span><span class="token punctuation">{</span>  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Join等待</strong></li></ul><pre class="line-numbers language-csharp"><code class="language-csharp">thread<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以限时等待 运行这句话代码的线程，等待thread的完成</span>thread<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以限时等待</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>线程优先级</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">thread<span class="token punctuation">.</span>Priority <span class="token operator">=</span> ThreadPriority<span class="token punctuation">.</span>Highest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是不是就可以保证是优先执行？</span><span class="token comment" spellcheck="true">//只是增加他的优先概率；并不能一定的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>后台线程</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">thread<span class="token punctuation">.</span>IsBackground <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为后台线程  进程结束，线程结束了</span>thread<span class="token punctuation">.</span>IsBackground <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前台线程   进程结束后，任务执行完毕以后，线程才结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>线程回调</strong><br>基于thread封装一个回调；<br>回调：启动子线程执行动作A——不阻塞——A执行完成后子线程会执行动作B<br>先看下面这个写法是否可以？</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ThreadWithCallBack</span><span class="token punctuation">(</span>ThreadStart threadStart<span class="token punctuation">,</span> Action actionCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>  Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadStart<span class="token punctuation">)</span><span class="token punctuation">;</span>  thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  thread<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错了 因为方法会阻塞</span>  actionCallback<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然是不可以的，join方法会阻塞主线程，得不到回调的效果。可以像下面这么写：</p><pre class="line-numbers language-csharp"><code class="language-csharp">ThreadStart threadStart1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadStart</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  threadStart<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  actionCallback<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadStart1<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>带返回值的线程回调</strong><br>要求：既是异步的，又要获取到返回结果？<br>既要计算又要非阻塞，想想看这个事儿也觉得不太可能。所以这里我们学习BeginInvoke和EndInvoke的做法，不直接返回计算结果，而是返回一个委托，然后在需要计算的时候再去调用委托。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> Func<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token generic-method function">ThreadWithReturn<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>T<span class="token operator">></span> func<span class="token punctuation">)</span><span class="token punctuation">{</span>  T t <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  ThreadStart threadStart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadStart</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    t <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadStart<span class="token punctuation">)</span><span class="token punctuation">;</span>  thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Func</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    thread<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不invoke的时候不会发生，调用的时候才会阻塞</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果返回一个委托，在需要执行结果的时候，再去执行这个委托。在使用的时候可以这样：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Thread开启一个新的线程执行任务，如何获取返回结果：</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> FuncResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ThreadWithReturn</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里可以做一些其他的事情</span><span class="token keyword">int</span> iResult <span class="token operator">=</span> FuncResult<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果需要得到执行结果，是必须要等待的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>Thread 功能繁多，反而用不好；就像给四岁小孩一把热武器，反而会造成更大的伤害。<br>线程池 .Net Framework 2.0<br>在Thread中对线程的管理需要我们自己去从操作，在不断的开启线程和销毁中，存在很大的开销，为了让线程可以反复的使用，出现了池化思想！<br>如果某个对象创建和销毁大家比较高，同时这个对象还可以反复使用的，就需要一个池子。<br>保存多个这样的对象，需要的时候就直接从池子里面获取，用完之后就不用销毁，返回池子就好。（享元模式）<br>节约资源提升性能；此外，还能管控总数量，放置滥用。</p><pre class="line-numbers language-csharp"><code class="language-csharp">ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"**************** {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"ThreadPool.QueueUserWorkItem1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启了一个线程</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以参数参数，这个o就是state的object类型参数：</p><pre class="line-numbers language-csharp"><code class="language-csharp">ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"第二个参数：{o}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"ThreadPool.QueueUserWorkItem1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启了一个线程</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"TestState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取最大线程数</strong><br>设置线程数量是全局，线程池是全局，Task,async/awit 都是来自于线程，不建议随便设置！<br>直接New Thread不受这个数量限制的，但是会占用线程池的线程数量。</p><pre class="line-numbers language-csharp"><code class="language-csharp">ThreadPool<span class="token punctuation">.</span><span class="token function">GetMaxThreads</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token keyword">int</span> maxWorkerThreads<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> maxCompletionPortThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>ThreadPool<span class="token punctuation">.</span><span class="token function">GetMinThreads</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token keyword">int</span> minWorkerThreads<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> minCompletionPortThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"当前电脑最大workerThreads={maxWorkerThreads},最大的completionPortThreads={maxCompletionPortThreads}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"当前电脑最小workerThreads={minWorkerThreads},最小的completionPortThreads={minCompletionPortThreads}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"设置线程数量之后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ThreadPool<span class="token punctuation">.</span><span class="token function">SetMaxThreads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里在设置的时候，数量不能低于本计算机的 核数</span>ThreadPool<span class="token punctuation">.</span><span class="token function">SetMinThreads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ThreadPool<span class="token punctuation">.</span><span class="token function">GetMaxThreads</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token keyword">int</span> maxWorkerThreads1<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> maxCompletionPortThreads1<span class="token punctuation">)</span><span class="token punctuation">;</span>ThreadPool<span class="token punctuation">.</span><span class="token function">GetMinThreads</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token keyword">int</span> minWorkerThreads1<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> minCompletionPortThreads1<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"当前电脑最大workerThreads={maxWorkerThreads1},最大的completionPortThreads={maxCompletionPortThreads1}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"当前电脑最小workerThreads={minWorkerThreads1},最小的completionPortThreads={minCompletionPortThreads1}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>基于线程池等待</strong><br>ManualResetEvent false 关闭，set是打开（True），waitOne就能接受到信号。<br>Reset 是关闭，就等于false,waitOne就只能等待。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//线程等待：</span><span class="token comment" spellcheck="true">//在线程池中，有一个开关式 </span>ManualResetEvent manualResetEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManualResetEvent</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开关关闭 </span>ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnThreadPool_Click1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>manualResetEvent<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开关打开</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Do something else。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>manualResetEvent<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行到这儿来的时候，我就等你给我发信号</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"计算完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看个例子，会发生死锁，设置8个线程，永远到不了9，所以不会set manualResetEvent。<br>建议不要WaitOne阻塞。<br>Thread线程池 都是后台线程。</p><pre class="line-numbers language-csharp"><code class="language-csharp">ThreadPool<span class="token punctuation">.</span><span class="token function">SetMaxThreads</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置了最大的线程数量</span>ManualResetEvent manualResetEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManualResetEvent</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开关关闭  </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>  ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      manualResetEvent<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      manualResetEvent<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>manualResetEvent<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Thread </tag>
            
            <tag> Async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-11-Async</title>
      <link href="/2020/02/04/dotnet-advanced-series-1-11-async/"/>
      <url>/2020/02/04/dotnet-advanced-series-1-11-async/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 进程-线程-多线程，同步和异步<br>2 委托启动异步调用<br>3 多线程特点：不卡主线程、速度快、无序性<br>4 异步的回调和状态参数<br>5 异步等待三种方式<br>6 异步返回值</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><ul><li><strong>进程</strong>：计算机概念，程序运行在服务器占据的全部计算机的资源。</li><li><strong>线程</strong>：计算机概念，是进程在相应操作时候的一个最小单元，也包括cpu/硬盘/内存  虚拟概念。</li><li><strong>进程和线程</strong>：包含关系，线程是属于某一个进程的，如果一个进程销毁，线程也就不会存在。 </li><li><strong>句柄</strong>：描述程序中的某一个最小单元，是一个long数字，操作系统通过这个数字识别应用程序。 </li><li><strong>多线程</strong>：计算概念，就是某一个进程中，多个线程同时运行。</li></ul><p><strong>什么是进程？</strong><br>当一个程序开始运行时，它就是一个进程，进程包括运行中的程序和程序所使用到的内存和系统资源。<br>而一个进程又是由多个线程所组成的。</p><p>  <strong>什么是线程？</strong><br>线程是程序中的一个执行流，每个线程都有自己的专有寄存器(栈指针、程序计数器等)，但代码区是共享的，即不同的线程可以执行同样的函数。</p><p><strong>什么是多线程？</strong><br>多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</p><p><strong>多线程的好处：</strong><br>可以提高CPU的利用率。在多线程程序中，一个线程必须等待的时候，CPU可以运行其它的线程而不是等待，这样就大大提高了程序的效率。</p><p><strong>多线程的不利方面：</strong><br>线程也是程序，所以线程需要占用内存，线程越多占用内存也越多；<br>多线程需要协调和管理，所以需要CPU时间跟踪线程；<br>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题；<br>线程太多会导致控制太复杂，最终可能造成很多Bug；</p><p><strong>何时使用多线程</strong><br> 多线程程序一般被用来在后台执行耗时的任务。主线程保持运行，并且工作线程做它的后台工作。对于Windows Forms程序来说，如果主线程试图执行冗长的操作，键盘和鼠标的操作会变的迟钝，程序也会失去响应。由于这个原因，应该在工作线程中运行一个耗时任务时添加一个工作线程，即使在主线程上有一个有好的提示“处理中…”，以防止工作无法继续。这就避免了程序出现由操作系统提示的“没有相应”，来诱使用户强制结束程序的进程而导致错误。模式对话框还允许实现“取消”功能，允许继续接收事件，而实际的任务已被工作线程完成。_BackgroundWorker_恰好可以辅助完成这一功能。</p><p> 在没有用户界面的程序里，比如说Windows Service，  多线程在当一个任务有潜在的耗时，因为它在等待另台电脑的响应（比如一个应用服务器，数据库服务器，或者一个客户端）的实现特别有意义。用工作线程完成任务意味着主线程可以立即做其它的事情。</p><p> 另一个多线程的用途是在方法中完成一个复杂的计算工作。这个方法会在多核的电脑上运行的更快，如果工作量被多个线程分开的话（使用Environment.ProcessorCount属性来侦测处理芯片的数量）。</p><p> 一个C#程序称为多线程的可以通过2种方式：明确地创建和运行多线程，或者使用.NET framework的暗中使用了多线程的特性——比如_BackgroundWorker_类, _线程池<em>，</em>threading timer_，远程服务器，或Web Services或ASP.NET程序。在后面的情况，人们别无选择，必须使用多线程；一个单线程的ASP.NET web server不是太酷，即使有这样的事情；幸运的是，应用服务器中多线程是相当普遍的；唯一值得关心的是提供适当锁机制的静态变量问题。</p><p><strong>何时不要使用多线程</strong><br> 多线程也同样会带来缺点，最大的问题是它使程序变的过于复杂，拥有多线程本身并不复杂，复杂是的线程的交互作用，这带来了无论是否交互是否是有意的，都会带来较长的开发周期，以及带来间歇性和非重复性的bugs。因此，要么多线程的交互设计简单一些，要么就根本不使用多线程。除非你有强烈的重写和调试欲望。</p><p>当用户频繁地分配和切换线程时，多线程会带来增加资源和CPU的开销。在某些情况下，太多的I/O操作是非常棘手的，当只有一个或两个工作线程要比有众多的线程在相同时间执行任务块的多。稍后我们将实现生产者/耗费者  队列，它提供了上述功能。</p><p><strong>并行和并发的区别？</strong><br>并行：多核之间叫并行<br>并发：CPU分片的并发</p><h2 id="Thread线程"><a href="#Thread线程" class="headerlink" title="Thread线程"></a>Thread线程</h2><p>Thread类是C#语言对线程对象一个封装。</p><h3 id="硬件层面理解多线程"><a href="#硬件层面理解多线程" class="headerlink" title="硬件层面理解多线程"></a>硬件层面理解多线程</h3><p><strong>为什么可以多线程呢？</strong><br>1、Cpu有多个核；可以并行计算；</p><ul><li>双核四线程：这里的线程是模拟核，把一个CPU虚拟成两个核；</li></ul><p>2、cpu分片：某1s的处理能切分成1000份，操作系统调度去相应不同的任务；</p><ul><li>从宏观角度来说：感觉就有多个任务在并发执行；</li><li>从微观角度来说：一个物理cpu不能在某一刻为某一个任务服务</li></ul><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><ul><li><p>同步方法：发起调用，只有在调用的方法完成以后，才能继续执行一下一行代码，按照顺序执行；</p></li><li><p>异步方法：发起调用，不等待完成，直接进入下一行代码的执行，启动一个新的线程来完成计算。<br>对于同样一个委托方法，是一个比较耗时耗资源的私有方法，分别用同步和异步的方法去实现：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************DoSomethingLong Start  {name}  {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> lResult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线程等待</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************DoSomethingLong   End  {name}  {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")} {lResult}***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同步方法代码：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************btnSync_Click Start {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> l <span class="token operator">+</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">string</span> name <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>$<span class="token string">"btnSync_Click_{i}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************btnSync_Click   End {Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>异步方法代码：```csharpConsole.WriteLine($"****************btnAsync_Click Start {Thread.CurrentThread.ManagedThreadId.ToString("00")} {DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")}***************");//Action&lt;string&gt; action = new Action&lt;string&gt;(this.DoSomethingLong);Action&lt;string&gt; action = this.DoSomethingLong;//action.Invoke("大白");//action("蓝冰");//这个是同步方法for (int i = 0; i &lt; 5; i++){  action.BeginInvoke("btnAsync_Click", null, null);//第一个参数是委托自身需要的参数 异步方法}Console.WriteLine($"****************btnAsync_Click End   {Thread.CurrentThread.ManagedThreadId.ToString("00")} {DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")}***************");     </code></pre><p><strong>小结一下：</strong><br>异步方法：<br>1、同步方法卡界面：主线线程（UI线程）忙于计算，无暇他顾<br>     异步方法不卡界面：因为异步方法是新启动一个线程去完后计算，主线程闲置<br>     改善用户体验，winform程序点击某一个按钮，不会卡死界面；<br>     web开发 例如 发短信，发邮件可以交给一个子线程去完成</p><p>2、同步方法执行慢:只有一个线程完成计算<br>     异步方法执行快：多个线程去完成计算<br>     10000ms   3000ms   快了三倍多<br>     20000ms   15000ms  cpu密集型计算<br>     多线程是资源换性能 CPU占用的更多，资源不是无限的，资源调度损耗</p><p> 3、同步方法有序执行，异步多线程无顺序<br>      启动无序，线程资源是向操作系统申请的，操作系统有自己的调度策略，所以启动是随机的；<br>      同一个任务同一个线程，执行时间也不确定，CPU分片；<br>      以上两点得出： 启动无序，结束也是没有顺序。</p><h2 id="控制异步方法的顺序"><a href="#控制异步方法的顺序" class="headerlink" title="控制异步方法的顺序"></a>控制异步方法的顺序</h2><p><strong>思考一下：</strong>多线程在使用的时候，如果需要控制顺序呢？怎么实现? 以上面的异步方法为例，希望在执行完异步方法后输出点内容，如何实现？<br> <strong>方式一：回调</strong> 线程结束之后回调某个方法，做一些操作。<br> 回调是把后续的动作通过回调参数传递进去，子线程完成计算以后，去调用这个回调委托。<br> <code>BeginInvoke</code>的第二个参数就是callback，第三个参数是异步结果。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Action<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> action <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoSomethingLong<span class="token punctuation">;</span>AsyncCallback callback <span class="token operator">=</span> asyncResult <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"计算结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>asyncResult <span class="token operator">=</span> action<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token string">"btnAsyncAdvanced_Click"</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们看一下这个过程：callback 是一个委托，要求输入一个参数类型为IAsyncResult的参数，这里自定义委托action的异步调用方法在调用时，可以输入三个参数：一个是委托本身的输入参数string，第二个是callback委托，最后一个是object类型的回调参数。<br>不经会问：callback的输入参数在这个过程中没有看到啊，就是这个asyncResult ？这是如何理解呢？<br>这是因为BeginInvoke这个方法本身就会返回IAsyncResult这个类型的返回结果，所以这个callback中要求的传入参数asyncResult 就是BeginInvoke方法返回的IAsyncResult。<br>此外，还可以给回调方法callback传参，也就是这里action.BeginInvoke方法的第三个参数object。<br>下面可以进行验证。</p><pre class="line-numbers language-csharp"><code class="language-csharp">AsyncCallback callback <span class="token operator">=</span> ar <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"这里是beginInvoke的第三个参数{ar.AsyncState}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>ar<span class="token punctuation">,</span> asyncResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{Thread.CurrentThread.ManagedThreadId.ToString("</span><span class="token number">00</span><span class="token string">")} {DateTime.Now.ToString("</span>yyyy <span class="token operator">-</span> MM <span class="token operator">-</span> dd HH<span class="token punctuation">:</span> mm<span class="token punctuation">:</span>ss<span class="token punctuation">.</span>fff<span class="token string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"计算结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用的时候就可以这样来用,同时发现asyncResult 是BeginInvoke的返回值，它和ar实际上是同一个：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Action<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> action <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoSomethingLong<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果把自定义的参数传入到回调函数中去？</span>asyncResult <span class="token operator">=</span> action<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token string">"btnAsyncAdvanced_Click"</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">"八万公里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>方式二：IsCompleted 完成等待</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>asyncResult<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"正在玩命为你加载中。。。已经完成{++i * 10}%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"正在玩命为你加载中。。。已经完成99.9999%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"加载完成。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式三：WaitOne等待</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">asyncResult<span class="token punctuation">.</span>AsyncWaitHandle<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一直等待任务完成</span>asyncResult<span class="token punctuation">.</span>AsyncWaitHandle<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一直等待任务完成</span>asyncResult<span class="token punctuation">.</span>AsyncWaitHandle<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最多等待3000ms,如果超时了，就不等待了 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>方式四：EndInvoke</strong><br>EndInvoke不仅可以等待某次异步调用结束（即时等待），还可以获取委托返回值，但是一个异步操作只能End一次。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Thread.Sleep(5000);</span>  <span class="token keyword">return</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>func<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IAsyncResult asyncResult1 <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>ar <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//func.EndInvoke(ar);</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> iResult <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">EndInvoke</span><span class="token punctuation">(</span>asyncResult1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以获取委托的真实返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述过程中定义了一个没有输入参数的委托func,然后定义了一个空的AsyncCallBack委托ar,执行BeginInvoke方法得到返回结果asyncResult1 ，这样就可以使用func.EndInvoke(asyncResult1)来等待异步方法执行结束，甚至得到泛型委托func的int类型返回结果。<br>值得注意的是：可以写在回调里面<code>func.EndInvoke(ar);</code>，但是一个异步操作只能End一次。后面<code>func.EndInvoke(asyncResult1)</code>就不能写了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Thread </tag>
            
            <tag> Async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-10-IOSerialize</title>
      <link href="/2020/02/03/dotnet-advanced-series-1-10-ioserialize/"/>
      <url>/2020/02/03/dotnet-advanced-series-1-10-ioserialize/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 文件夹/文件 检查、新增、复制、移动、删除，递归编程技巧<br>2 文件读写，记录文本日志，读取配置文件<br>3 三种序列化器，xml和json<br>4 验证码、图片缩放</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="文件夹检测和管理"><a href="#文件夹检测和管理" class="headerlink" title="文件夹检测和管理"></a>文件夹检测和管理</h3><p><strong>配置文件AppSettings</strong>:会有一些在开发环境 测试环境 生产环境 不同，例如：数据库连接 路径 开关。最好有个配置类全部集中在一起进行配置。<br><strong>配置路径</strong>：<br>绝对路径：<br>相对路径： /然后拼装，相当于应用程序所在路径</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 集中管理系统的配置字段</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constant</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 配置绝对路径</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> LogPath <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"LogPath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> LogMovePath <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"LogMovePath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 序列化数据地址</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> SerializeDataPath <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"SerializeDataPath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检测文件和文件夹是否存在"><a href="#检测文件和文件夹是否存在" class="headerlink" title="检测文件和文件夹是否存在"></a>检测文件和文件夹是否存在</h4><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检测文件夹是否存在</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，另外一种判断文件夹的方式，不存在不会报错，仍然会创建一个对象。Directory是帮助类，但是DirectoryInfo是对象类。</p><pre class="line-numbers language-csharp"><code class="language-csharp">DirectoryInfo directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryInfo</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不存在不报错  注意exists属性</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> directory<span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> directory<span class="token punctuation">.</span>CreationTime<span class="token punctuation">,</span> directory<span class="token punctuation">.</span>LastWriteTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文件夹和文件的路径拼接：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">,</span> <span class="token string">"info.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//拼接</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和Directory一样，File同样是一个帮助类，而FileInfo是一个对象类：</p><pre class="line-numbers language-csharp"><code class="language-csharp">FileInfo fileInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInfo</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">,</span> <span class="token string">"info.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件不存在也会自动创建一个对象</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> fileInfo<span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> fileInfo<span class="token punctuation">.</span>CreationTime<span class="token punctuation">,</span> fileInfo<span class="token punctuation">.</span>LastWriteTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h4><p>文件夹的剪切，复制，删除等操作如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  DirectoryInfo directoryInfo <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一次性创建全部的子路径</span>  Directory<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">,</span> LogMovePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移动（剪切）  原文件夹就不在了</span>  Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>LogMovePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="File"><a href="#File" class="headerlink" title="File"></a>File</h4><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">string</span> fileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">,</span> <span class="token string">"log.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> fileNameCopy <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">,</span> <span class="token string">"logCopy.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> fileNameMove <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">,</span> <span class="token string">"logMove.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> isExists <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建了文件夹之后，才能创建里面的文件，打开文件流 （创建文件并写入）创建覆盖 OPen是打开。</p><pre class="line-numbers language-charp"><code class="language-charp">Directory.CreateDirectory(LogPath);using (FileStream fileStream = File.Create(fileName)){  string name = "12345567778890";  byte[] bytes = Encoding.Default.GetBytes(name);  fileStream.Write(bytes, 0, bytes.Length);  fileStream.Flush();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果文件不存在就创建，如果存在就新建一个覆盖掉:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token punctuation">(</span>FileStream fileStream <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//打开文件流 （创建文件并写入）</span><span class="token punctuation">{</span>  StreamWriter sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamWriter</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>  sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"1234567890"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sw<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流写入器（创建/打开文件并写入）</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token punctuation">(</span>StreamWriter sw <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//流写入器（创建/打开文件并写入）</span><span class="token punctuation">{</span>  <span class="token keyword">string</span> msg <span class="token operator">=</span> <span class="token string">"今天是2020年02月3号，今天天气不错！"</span><span class="token punctuation">;</span>  sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  sw<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token punctuation">(</span>StreamWriter sw <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//流写入器（创建/打开文件并写入）</span><span class="token punctuation">{</span>  <span class="token keyword">string</span> name <span class="token operator">=</span> <span class="token string">"0987654321"</span><span class="token punctuation">;</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  sw<span class="token punctuation">.</span>BaseStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>  sw<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读取文件：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">string</span> result <span class="token keyword">in</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">string</span> sResult <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> byteContent <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> sResultByte <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>byteContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读取大文件，文件太大，用工具去打开的时候，计算机直接卡死了：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token punctuation">(</span>FileStream stream <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">OpenRead</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//分批读取</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件拷贝，剪切，删除操作：</p><pre class="line-numbers language-csharp"><code class="language-csharp">File<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> fileNameCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>File<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> fileNameMove<span class="token punctuation">)</span><span class="token punctuation">;</span>File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>fileNameCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>fileNameMove<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尽量不要delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="硬盘信息DriveInfo"><a href="#硬盘信息DriveInfo" class="headerlink" title="硬盘信息DriveInfo"></a>硬盘信息DriveInfo</h4><pre class="line-numbers language-csharp"><code class="language-csharp">DriveInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> drives <span class="token operator">=</span> DriveInfo<span class="token punctuation">.</span><span class="token function">GetDrives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span>DriveInfo drive <span class="token keyword">in</span> drives<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>drive<span class="token punctuation">.</span>IsReady<span class="token punctuation">)</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"类型：{0} 卷标：{1} 名称：{2} 总空间：{3} 剩余空间：{4}"</span><span class="token punctuation">,</span> drive<span class="token punctuation">.</span>DriveType<span class="token punctuation">,</span> drive<span class="token punctuation">.</span>VolumeLabel<span class="token punctuation">,</span> drive<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> drive<span class="token punctuation">.</span>TotalSize<span class="token punctuation">,</span> drive<span class="token punctuation">.</span>TotalFreeSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"类型：{0}  is not ready"</span><span class="token punctuation">,</span> drive<span class="token punctuation">.</span>DriveType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="路径注意事项"><a href="#路径注意事项" class="headerlink" title="路径注意事项"></a>路径注意事项</h4><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回目录名，需要注意路径末尾是否有反斜杠对结果是有影响的</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span><span class="token string">@"d:\\abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将返回 d:\</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span><span class="token string">@"d:\\abc\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将返回 d:\abc</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetRandomFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将返回随机的文件名             Console.WriteLine(Path.GetFileNameWithoutExtension("d:\\abc.txt"));// 将返回abc</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetInvalidPathChars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将返回禁止在路径中使用的字符</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetInvalidFileNameChars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将返回禁止在文件名中使用的字符</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">,</span> <span class="token string">"log.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//合并两个路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例：日志"><a href="#实例：日志" class="headerlink" title="实例：日志"></a>实例：日志</h4><p>try catch旨在上端使用，保证对用户的展示<br>下端不要吞掉异常，隐藏错误是没有意义的，抓住再throw也没意义<br>除非这个异常对流程没有影响或者你要单独处理这个异常</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">string</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>  StreamWriter sw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span>  <span class="token punctuation">{</span>    <span class="token keyword">string</span> fileName <span class="token operator">=</span> <span class="token string">"log.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> totalPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>LogPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sw <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>totalPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果文件不存在，就新建一个文件，然后写入内容</span>    sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}:{1}"</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//log //建议在写日志的时候，把异常吞掉；</span>    <span class="token comment" spellcheck="true">//throw ex;</span>    <span class="token comment" spellcheck="true">//throw new exception("这里异常");</span>  <span class="token punctuation">}</span>  <span class="token keyword">finally</span><span class="token comment" spellcheck="true">//无论是否发生异常  全都都会执行</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sw <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      sw<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sw<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sw<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例：-找出全部的子文件夹"><a href="#实例：-找出全部的子文件夹" class="headerlink" title="实例： 找出全部的子文件夹"></a>实例： 找出全部的子文件夹</h4><p>递归：可以理解为类型，或者说是一种编程方式<br>获取“D:\Git_Work”路径下的所有文件夹：<br>1、在递归的时候，计算机是在高强度的计算；<br>2、一定要有跳出循环的判断，避免死循环；<br>3、在使用递归的时候，尽量避免多线程；</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>DirectoryInfo<span class="token operator">></span> <span class="token function">GetAllDirectory</span><span class="token punctuation">(</span><span class="token keyword">string</span> rootPath<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>DirectoryInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//一个存储路径信息的容器</span>  List<span class="token operator">&lt;</span>DirectoryInfo<span class="token operator">></span> directoryList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>DirectoryInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//容器</span>  DirectoryInfo directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryInfo</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//root文件夹</span>  directoryList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> directioryList <span class="token operator">=</span> <span class="token function">GetChilds</span><span class="token punctuation">(</span>directoryList<span class="token punctuation">,</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> directioryList<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>DirectoryInfo<span class="token operator">></span> <span class="token function">GetChilds</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>DirectoryInfo<span class="token operator">></span> directoryList<span class="token punctuation">,</span> DirectoryInfo directory<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> chaildArray <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">GetDirectories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>chaildArray <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> chaildArray<span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> child <span class="token keyword">in</span> chaildArray<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      directoryList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">GetChilds</span><span class="token punctuation">(</span>directoryList<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> directoryList<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归对内存会有压力：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 计算机的计算能力是超强，会死机</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Millisecond <span class="token operator">&lt;</span> <span class="token number">999</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//启动个多线程？？  会疯狂的启动多个子线程</span>    <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Thread.Sleep(5);//最多可能浪费4ms</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/10IOSerialize/Serialization.png" alt="Serialization"><br>简单一点说，从一个立体的数据变成字符串就叫做序列化，再从字符串变成立体的对象叫做反序列化。<br>下面介绍几种序列化与反序列化的方式，首先有个DataFactory,构造一些需要序列化的数据源：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//必须添加序列化特性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token punctuation">[</span>NonSerialized<span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//必须添加序列化特性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Programmer</span> <span class="token punctuation">:</span> Person<span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">string</span> Language <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//编程语言</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Description <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> <span class="token function">BuildProgrammerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Programmer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Programmer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>        Description<span class="token operator">=</span><span class="token string">"一班学生"</span><span class="token punctuation">,</span>        Name <span class="token operator">=</span> <span class="token string">"Chaoqiang"</span><span class="token punctuation">,</span>        Sex <span class="token operator">=</span> <span class="token string">"男"</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Add Programmers</span>     <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式一：二进制序列化器</strong><br>二进制序列化器 不一定跨平台 体积小:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BinarySerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//使用二进制序列化对象</span>  <span class="token keyword">string</span> fileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>SerializeDataPath<span class="token punctuation">,</span> <span class="token string">@"BinarySerialize.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件名称与路径</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span>Stream fStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要一个stream，这里是直接写入文件了</span>    List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> pList <span class="token operator">=</span> DataFactory<span class="token punctuation">.</span><span class="token function">BuildProgrammerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryFormatter binFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建二进制序列化器</span>    binFormat<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>fStream<span class="token punctuation">,</span> pList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span>Stream fStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要一个stream，这里是来源于文件</span>    BinaryFormatter binFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建二进制序列化器</span>    <span class="token comment" spellcheck="true">//使用二进制反序列化对象</span>    fStream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重置流位置</span>    List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> pList <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span><span class="token punctuation">)</span>binFormat<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>fStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反序列化对象</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二：soap序列化器</strong><br>soap序列化器 标准协议 跨平台的 体积大一些</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SoapSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//使用Soap序列化对象</span>  <span class="token keyword">string</span> fileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>SerializeDataPath<span class="token punctuation">,</span> <span class="token string">@"SoapSerialize.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件名称与路径</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span>Stream fStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> pList <span class="token operator">=</span> DataFactory<span class="token punctuation">.</span><span class="token function">BuildProgrammerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SoapFormatter soapFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建二进制序列化器</span>    <span class="token comment" spellcheck="true">//soapFormat.Serialize(fStream, list);//SOAP不能序列化泛型对象</span>    soapFormat<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>fStream<span class="token punctuation">,</span> pList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span>Stream fStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    SoapFormatter soapFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建二进制序列化器</span>    <span class="token comment" spellcheck="true">//使用二进制反序列化对象</span>    fStream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重置流位置</span>    List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> pList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Programmer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>soapFormat<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>fStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反序列化对象</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>两种序列化方式的特点：</strong></p><ul><li>BinaryFormatter序列化自定义类的对象时，序列化之后的流中带有空字符，以致于无法反序列化，反序列化时总是报错“在分析完成之前就遇到流结尾”（已经调用了stream.Seek(0, SeekOrigin.Begin);）。</li><li>改用XmlFormatter序列化之后，可见流中没有空字符，从而解决上述问题，但是要求类必须有无参数构造函数，而且各属性必须既能读又能写，即必须同时定义getter和setter，若只定义getter，则反序列化后的得到的各个属性的值都为null。</li></ul><p><strong>方式三：XML序列化器</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">XmlSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//使用XML序列化对象</span>  <span class="token keyword">string</span> fileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>SerializeDataPath<span class="token punctuation">,</span> <span class="token string">@"Student.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件名称与路径</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span>Stream fStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> pList <span class="token operator">=</span> DataFactory<span class="token punctuation">.</span><span class="token function">BuildProgrammerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XmlSerializer xmlFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlSerializer</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建XML序列化器，需要指定对象的类型</span>    xmlFormat<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>fStream<span class="token punctuation">,</span> pList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span>Stream fStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    XmlSerializer xmlFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlSerializer</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建XML序列化器，需要指定对象的类型</span>    <span class="token comment" spellcheck="true">//使用XML反序列化对象</span>    fStream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重置流位置</span>    List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> pList <span class="token operator">=</span> pList <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span><span class="token punctuation">)</span>xmlFormat<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>fStream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式四： Json序列化器</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> pList <span class="token operator">=</span> DataFactory<span class="token punctuation">.</span><span class="token function">BuildProgrammerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">string</span> result <span class="token operator">=</span> JsonHelper<span class="token punctuation">.</span>ObjectToString<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>pList<span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span> pList1 <span class="token operator">=</span> JsonHelper<span class="token punctuation">.</span>StringToObject<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Programmer<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体看一下JsonHelper的实现，既可以借助<code>Newtonsoft.Json</code>这个第三方库，也可以直接使用<code>JavaScriptSerializer</code>这个微软自带的类。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonHelper</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token generic-method function">ObjectToString<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    JavaScriptSerializer jss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaScriptSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> jss<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> T <span class="token generic-method function">StringToObject<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">string</span> content<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    JavaScriptSerializer jss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaScriptSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> jss<span class="token punctuation">.</span><span class="token generic-method function">Deserialize<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token generic-method function">ToJson<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> T <span class="token generic-method function">ToObject<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">string</span> content<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method function">DeserializeObject<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="画验证码"><a href="#画验证码" class="headerlink" title="画验证码"></a>画验证码</h2><p>绘图的原理很简单：Bitmap就像一张画布，Graphics如同画图的手，把Pen或Brush等绘图对象画在Bitmap这张画布上。<br>首先读取图片存储的配置路径：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">string</span> ImagePath <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"ImagePath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">string</span> VerifyPath <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"ImagePath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="画验证码和图片"><a href="#画验证码和图片" class="headerlink" title="画验证码和图片"></a>画验证码和图片</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Drawing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Bitmap bitmapobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bitmap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在Bitmap上创建一个新的Graphics对象</span>  Graphics g <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>bitmapobj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建绘画对象，如Pen,Brush等</span>  Pen redPen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//绘制图形</span>  g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>redPen<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">DrawEllipse</span><span class="token punctuation">(</span>Pens<span class="token punctuation">.</span>Black<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画椭圆</span>  g<span class="token punctuation">.</span><span class="token function">DrawArc</span><span class="token punctuation">(</span>Pens<span class="token punctuation">.</span>Black<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画弧线</span>  g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>Pens<span class="token punctuation">.</span>Black<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画直线</span>  g<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span>Pens<span class="token punctuation">.</span>Black<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画矩形</span>  g<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span><span class="token string">"我爱北京天安门"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SolidBrush</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PointF</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画字符串</span>  <span class="token comment" spellcheck="true">//g.DrawImage(</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>ImagePath<span class="token punctuation">)</span><span class="token punctuation">)</span>    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>ImagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  bitmapobj<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>ImagePath <span class="token operator">+</span> <span class="token string">"pic1.jpg"</span><span class="token punctuation">,</span> ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//释放所有对象</span>  bitmapobj<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">VerificationCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Bitmap bitmapobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bitmap</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在Bitmap上创建一个新的Graphics对象</span>  Graphics g <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>bitmapobj<span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span>Pens<span class="token punctuation">.</span>Black<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画矩形</span>  g<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span>Brushes<span class="token punctuation">.</span>White<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">DrawArc</span><span class="token punctuation">(</span>Pens<span class="token punctuation">.</span>Blue<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//干扰线</span>  <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"我"</span><span class="token punctuation">,</span> <span class="token string">"们"</span><span class="token punctuation">,</span> <span class="token string">"孝"</span><span class="token punctuation">,</span> <span class="token string">"行"</span><span class="token punctuation">,</span> <span class="token string">"白"</span><span class="token punctuation">,</span> <span class="token string">"到"</span><span class="token punctuation">,</span> <span class="token string">"国"</span><span class="token punctuation">,</span> <span class="token string">"中"</span><span class="token punctuation">,</span> <span class="token string">"来"</span><span class="token punctuation">,</span> <span class="token string">"真"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    i <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Brushes<span class="token punctuation">.</span>Red<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PointF</span><span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  bitmapobj<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>VerifyPath<span class="token punctuation">,</span> <span class="token string">"Verif.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>  bitmapobj<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按比例缩放图片"><a href="#按比例缩放图片" class="headerlink" title="按比例缩放图片"></a>按比例缩放图片</h3><p>按比例缩放,图片不会变形，会优先满足原图和最大长宽比例最高的一项。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CompressPercent</span><span class="token punctuation">(</span><span class="token keyword">string</span> oldPath<span class="token punctuation">,</span> <span class="token keyword">string</span> newPath<span class="token punctuation">,</span> <span class="token keyword">int</span> maxWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> maxHeight<span class="token punctuation">)</span><span class="token punctuation">{</span>  Image _sourceImg <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span>oldPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> _newW <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>maxWidth<span class="token punctuation">;</span>  <span class="token keyword">double</span> _newH <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>maxHeight<span class="token punctuation">;</span>  <span class="token keyword">double</span> percentWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_sourceImg<span class="token punctuation">.</span>Width <span class="token operator">></span> maxWidth <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>maxWidth <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_sourceImg<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_sourceImg<span class="token punctuation">.</span>Height <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>percentWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_sourceImg<span class="token punctuation">.</span>Width <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>maxHeight<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    _newH <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>maxHeight<span class="token punctuation">;</span>    _newW <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>maxHeight <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_sourceImg<span class="token punctuation">.</span>Height <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_sourceImg<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    _newW <span class="token operator">=</span> percentWidth<span class="token punctuation">;</span>    _newH <span class="token operator">=</span> <span class="token punctuation">(</span>percentWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_sourceImg<span class="token punctuation">.</span>Width<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>_sourceImg<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Image bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bitmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>_newW<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>_newH<span class="token punctuation">)</span><span class="token punctuation">;</span>  Graphics g <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span>InterpolationMode <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>InterpolationMode<span class="token punctuation">.</span>High<span class="token punctuation">;</span>  g<span class="token punctuation">.</span>SmoothingMode <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>SmoothingMode<span class="token punctuation">.</span>HighQuality<span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>_sourceImg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>_newW<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>_newH<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _sourceImg<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> _sourceImg<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> GraphicsUnit<span class="token punctuation">.</span>Pixel<span class="token punctuation">)</span><span class="token punctuation">;</span>  _sourceImg<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bitmap<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Imaging<span class="token punctuation">.</span>ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>  bitmap<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照指定大小对图片进行缩放，可能会图片变形。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ImageChangeBySize</span><span class="token punctuation">(</span><span class="token keyword">string</span> oldPath<span class="token punctuation">,</span> <span class="token keyword">string</span> newPath<span class="token punctuation">,</span> <span class="token keyword">int</span> newWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> newHeight<span class="token punctuation">)</span><span class="token punctuation">{</span>  Image sourceImg <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span>oldPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Image bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Bitmap</span><span class="token punctuation">(</span>newWidth<span class="token punctuation">,</span> newHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>  Graphics g <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span>InterpolationMode <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>InterpolationMode<span class="token punctuation">.</span>High<span class="token punctuation">;</span>  g<span class="token punctuation">.</span>SmoothingMode <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>SmoothingMode<span class="token punctuation">.</span>HighQuality<span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>sourceImg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newWidth<span class="token punctuation">,</span> newHeight<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sourceImg<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> sourceImg<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> GraphicsUnit<span class="token punctuation">.</span>Pixel<span class="token punctuation">)</span><span class="token punctuation">;</span>  sourceImg<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  g<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bitmap<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Imaging<span class="token punctuation">.</span>ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>  bitmap<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> IOSerialize </tag>
            
            <tag> Linq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-9-Expression</title>
      <link href="/2020/01/26/dotnet-advanced-series-1-9-expression/"/>
      <url>/2020/01/26/dotnet-advanced-series-1-9-expression/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 什么是表达式目录树Expression<br>2 动态拼装Expression<br>3 基于Expression扩展应用<br>4 ExpressionVisitor解析表达式目录树<br>5 解析Expression生成Sql<br>6 Expression扩展拼装链接</p><h2 id="表达式目录树Expression"><a href="#表达式目录树Expression" class="headerlink" title="表达式目录树Expression"></a>表达式目录树Expression</h2><p>先看一下在linq中的两个例子：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Linq To Object </span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>People<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span>Id <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"Hyl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Linq To Sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对比一下：<br><code>Func&lt;int, int, int&gt; func = (m, n) =&gt; m * n + 2;</code>lambda实例化委托 匿名方法;<br><code>Expression&lt;Func&lt;int, int, int&gt;&gt; exp = (m, n) =&gt; m * n + 2;</code>Expresssion<tdelegate>，这里面的泛型委托就是<code>Func&lt;int, int, int&gt;</code>;<br>结合下面这个图看一下这里面的概念：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/09Expression/Expression.png" alt="Expression"><br>声明一个表达式目录树;<br><strong>快捷方式</strong>的声明 数据结构；<br>类似于一个树形结构，描述不同变量和常量之间的关系  数据结构；<br>表达式目录树：语法树，或者说是一种数据结构;<br>PS: 如果在调试的时候需要看表达式的具体内容，可以通过这个工具<strong>ExpressionTreeVisualizer</strong>。<br>另外，Expression中不能有语句体，即只能有一行，不能有多行。</tdelegate></p><p><strong>表达式目录树变成委托</strong><br>通过Compile（）方法可以将目录树变成委托：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> iResult1 <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//exp.Compile()=> 委托； </span><span class="token keyword">int</span> iResult2 <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//12 * 23 +2  278</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="手动拼装表达式目录树"><a href="#手动拼装表达式目录树" class="headerlink" title="手动拼装表达式目录树"></a><strong>手动拼装表达式目录树</strong></h3><ol><li>首先来一个简答一点的拼装，就实现123+234这个加法：</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Expression&lt;Func&lt;int>> expression = () => 123 + 234; </span>ConstantExpression left <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ConstantExpression right <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> plus <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">></span> expression <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>plus<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ParameterExpression</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> iResult <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> iResult1 <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，这个Expression.Lambda方法是这样的<code>public static Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt;(Expression body,params ParameterExpression[] parameters)</code>,返回一个泛型的表达式目录树。</p><ol start="2"><li>然后再来个稍微复杂点的表达式目录树拼装例子：</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Expression&lt;Func&lt;int, int, int>> expression = (m, n) => m * n + m + n + 2; </span>ParameterExpression m <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ParameterExpression n <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ConstantExpression constant2 <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> multiply <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> plus1 <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>multiply<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> plus2 <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>plus1<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> plus <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>plus2<span class="token punctuation">,</span> constant2<span class="token punctuation">)</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">></span> expression <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>plus<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ParameterExpression</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>  m<span class="token punctuation">,</span>  n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> iResult <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>再来一个不是加减乘除的：<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//   Expression&lt;Func&lt;People, bool>> lambda = (x) => x.Id.ToString().Equals("5"); </span>ParameterExpression x <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FieldInfo field <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ConstantExpression constant5 <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fieldExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>MethodInfo toString <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"ToString"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MethodInfo equals <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Equals"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tostringExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>fieldExp<span class="token punctuation">,</span> toString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Expression</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> equalsExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>tostringExp<span class="token punctuation">,</span> equals<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Expression</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>constant5<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> expression <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>equalsExp<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ParameterExpression</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> bResult <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>Name <span class="token operator">=</span> <span class="token string">"德玛西亚"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>整个过程就是按照Lambda表达式的内容来写的<code>x.Id.ToString().Equals("5");</code>。其中，在找方法的时候要添加Type选择无参的：<code>GetMethod("ToString", new Type[] { })</code></li></ol><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a><strong>动态</strong></h3><p>有一个场景是：以前根据用户输入拼装条件，用户输入名称，为空就跳过：</p><ol><li>第一个时代：<br>通过sql语句来拼接。</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">string</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM USER WHERE 1=1"</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"用户输入个名称，为空就跳过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> name <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  sql <span class="token operator">+</span><span class="token operator">=</span> $<span class="token string">" and name like '%{name}%'"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"用户输入个账号，为空就跳过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> account <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  sql <span class="token operator">+</span><span class="token operator">=</span> $<span class="token string">" and account like '%{account}%'"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>第二个时代：</li></ol><p>界面上有好几处输入，多来几个条件就会没法写。<br>出现整个DBSet 暴露出来了，在使用的时候是非常危险。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Linq To Sql</span><span class="token keyword">var</span> DbSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>People<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后对表操作</span><span class="token comment" spellcheck="true">//Expression&lt;Func&lt;People, bool>> exp = a => a.Name.Contains("Richard") &amp;&amp; a.Id == 10; </span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> exp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"用户输入个名称，为空就跳过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> name <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//exp = a => a.Name.Contains(name); </span>  <span class="token comment" spellcheck="true">//DbSet = DbSet.Where(a => a.Name.Contains(name));</span><span class="token punctuation">}</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"用户输入个账号，为空就跳过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> account <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//exp = a => a.Account.Contains(account);</span><span class="token comment" spellcheck="true">//DbSet = DbSet.Where(a => a.Account.Contains(account));// 出现整个DBSet 暴露出来了，在使用的时候是非常危险</span><span class="token punctuation">}</span>exp <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span>Account<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有两个解决方案：</p><ul><li>以前有个表达式树的扩展，扩展了and 和 or，基于visitor实现</li><li>根据字符串和条件自动拼装出来</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp">Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> exp1 <span class="token operator">=</span> item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>Account<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"Richard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Account 不为空<span class="token punctuation">)</span>  <span class="token keyword">var</span> Account <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"Account"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> contains <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Contains"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ParameterExpression a <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> expression <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">AndAlso</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> Account<span class="token punctuation">,</span> <span class="token punctuation">(</span>MethodInfo<span class="token punctuation">)</span>MethodBase<span class="token punctuation">.</span><span class="token function">GetMethodFromHandle</span><span class="token punctuation">(</span><span class="token function">ldtoken</span><span class="token punctuation">(</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Expression</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>  Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>MethodInfo<span class="token punctuation">)</span>MethodBase<span class="token punctuation">.</span><span class="token function">GetMethodFromHandle</span><span class="token punctuation">(</span><span class="token function">ldtoken</span><span class="token punctuation">(</span><span class="token function">get_Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>MethodInfo<span class="token punctuation">)</span>MethodBase<span class="token punctuation">.</span><span class="token function">GetMethodFromHandle</span><span class="token punctuation">(</span><span class="token function">ldtoken</span><span class="token punctuation">(</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Expression</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>  Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"Richard"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ParameterExpression</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>  a<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个过程可以根据用户输入，封装成一个表达式目录树的自动生成。</p><p>下面再看一个关于实体类和实体类DTO的例子，现有两个类People和PeopleCopy:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// PeopleDTO</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeopleCopy</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在做转换的时候我们是不可以强制转换的，要么是逐个赋值来进行转换的：</p><pre class="line-numbers language-csharp"><code class="language-csharp">People people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>  Name <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">,</span>  Age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">;</span>PeopleCopy peopleCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeopleCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//硬编码 //硬编码性能好，但是通用型差</span><span class="token punctuation">{</span>  Id <span class="token operator">=</span> people<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>  Name <span class="token operator">=</span> people<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>  Age <span class="token operator">=</span> people<span class="token punctuation">.</span>Age<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考</strong>：如果说有其他别的类型需要转换，那么不是为所有的类型都需要写这样代码？<br><strong>方法一： 反射+泛型方法</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionMapper</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> TOut <span class="token generic-method function">Trans<span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">></span></span><span class="token punctuation">(</span>TIn tIn<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    TOut tOut <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token generic-method function">CreateInstance<span class="token punctuation">&lt;</span>TOut<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> itemOut <span class="token keyword">in</span> tOut<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">var</span> propIn <span class="token operator">=</span> tIn<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>itemOut<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>      itemOut<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>tOut<span class="token punctuation">,</span> propIn<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>tIn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> itemOut <span class="token keyword">in</span> tOut<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">var</span> fieldIn <span class="token operator">=</span> tIn<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span>itemOut<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>      itemOut<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>tOut<span class="token punctuation">,</span> fieldIn<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>tIn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> tOut<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述这个泛型反射的方法，可以把目标DTO的所有属性和字段在实体中找到并赋值，完成实体到DTO的的转换。</p><pre class="line-numbers language-csharp"><code class="language-csharp">PeopleCopy peopleCopy1 <span class="token operator">=</span> ReflectionMapper<span class="token punctuation">.</span><span class="token generic-method function">Trans<span class="token punctuation">&lt;</span>People<span class="token punctuation">,</span> PeopleCopy<span class="token punctuation">></span></span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>方法二：序列化反序列化方式</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializeMapper</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> TOut <span class="token generic-method function">Trans<span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">></span></span><span class="token punctuation">(</span>TIn tIn<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method function">DeserializeObject<span class="token punctuation">&lt;</span>TOut<span class="token punctuation">></span></span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>tIn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过将实体对象people序列化得到一个json,然后再反序列化成peoplecopy。</p><pre class="line-numbers language-csharp"><code class="language-csharp">PeopleCopy peopleCopy2 <span class="token operator">=</span> SerializeMapper<span class="token punctuation">.</span><span class="token generic-method function">Trans<span class="token punctuation">&lt;</span>People<span class="token punctuation">,</span> PeopleCopy<span class="token punctuation">></span></span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面两个方法本质上都是通过反射来实现，在性能上肯定无法保证。那有没有什么方法既能保证通用又能保证性能呢？</p><pre class="line-numbers language-csharp"><code class="language-csharp">Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> PeopleCopy<span class="token operator">></span> exp1 <span class="token operator">=</span> p <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PeopleCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Id <span class="token operator">=</span> p<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>    Name <span class="token operator">=</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>    Age <span class="token operator">=</span> p<span class="token punctuation">.</span>Age  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>PeopleCopy peopleCopy3<span class="token operator">=</span>func<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述过程提供了一个思路：想办法去动态拼装这个委托，然后缓存下委托，后面再次转换时就没有性能损耗了。</p><p><strong>方法三： 泛型方法+表达式目录 = 既可以通用，效率高</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionMapper</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 字典缓存--hash分布  </span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">></span> _Dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//超过一定的数量之后  在字典中获取值就会有性能损耗</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> TOut <span class="token generic-method function">Trans<span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">></span></span><span class="token punctuation">(</span>TIn tIn<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">string</span> key <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"funckey_{0}_{1}"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_Dic<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//动态的生成表达式</span>      ParameterExpression parameterExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>MemberBinding<span class="token operator">></span> memberBindingList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>MemberBinding<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        MemberExpression property <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MemberBinding memberBinding <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>        memberBindingList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>memberBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        MemberExpression property <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MemberBinding memberBinding <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>        memberBindingList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>memberBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      MemberInitExpression memberInitExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">MemberInit</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> memberBindingList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token operator">></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>memberInitExpression<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ParameterExpression</span><span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">{</span>        parameterExpression      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span> func <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼装是一次性的</span>      _Dic<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> func<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token punctuation">)</span>_Dic<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>tIn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过动态地拼装委托，可以把表达式缓存起来，提高性能。但是字典缓存的方式是通过hash分布来寻址，当查找次数比较大的时候，会有性能问题。</p><p><strong>方法四：泛型缓存+表达式目录</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionGenericMapper</span><span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token comment" spellcheck="true">//Mapper`2 //正对于每两个不同类型的组合都会生成副本</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span> _FUNC <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在每个副本中都有一个委托</span>  <span class="token keyword">static</span> <span class="token function">ExpressionGenericMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//静态构造函数 生成表达式目录树 </span>  <span class="token punctuation">{</span>    ParameterExpression parameterExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>MemberBinding<span class="token operator">></span> memberBindingList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>MemberBinding<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      MemberExpression property <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MemberBinding memberBinding <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>      memberBindingList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>memberBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      MemberExpression property <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MemberBinding memberBinding <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>      memberBindingList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>memberBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    MemberInitExpression memberInitExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">MemberInit</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>memberBindingList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token operator">></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>memberInitExpression<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ParameterExpression</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>      parameterExpression    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _FUNC <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼装是一次性的   转换成委托以后放入副本的静态变量中去</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> TOut <span class="token function">Trans</span><span class="token punctuation">(</span>TIn t<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 直接获取副本的静态变量（委托）</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_FUNC</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型缓存的优点在第一小节已经演示过了，下面可以做个试验来验证上述四种方式的性能：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"****************************性能测试结果***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>People people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>  Name <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">,</span>  Age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">long</span> common <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> generic <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> cache <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> reflection <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> serialize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">{</span>  Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  PeopleCopy peopleCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeopleCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Id <span class="token operator">=</span> people<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>    Name <span class="token operator">=</span> people<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>    Age <span class="token operator">=</span> people<span class="token punctuation">.</span>Age  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  common <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    PeopleCopy peopleCopy <span class="token operator">=</span> ReflectionMapper<span class="token punctuation">.</span><span class="token generic-method function">Trans<span class="token punctuation">&lt;</span>People<span class="token punctuation">,</span> PeopleCopy<span class="token punctuation">></span></span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  reflection <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    PeopleCopy peopleCopy <span class="token operator">=</span> SerializeMapper<span class="token punctuation">.</span><span class="token generic-method function">Trans<span class="token punctuation">&lt;</span>People<span class="token punctuation">,</span> PeopleCopy<span class="token punctuation">></span></span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  serialize <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    PeopleCopy peopleCopy <span class="token operator">=</span> ExpressionMapper<span class="token punctuation">.</span><span class="token generic-method function">Trans<span class="token punctuation">&lt;</span>People<span class="token punctuation">,</span> PeopleCopy<span class="token punctuation">></span></span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cache <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    PeopleCopy peopleCopy <span class="token operator">=</span> ExpressionGenericMapper<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> PeopleCopy<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">Trans</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  generic <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span><span class="token punctuation">}</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"common = { common} ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"reflection = { reflection} ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"serialize = { serialize} ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"cache = { cache} ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"generic = { generic} ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示：硬编码方法是27ms，反射方法是2195ms，序列化方法是3589ms，字典缓存方法是556ms，泛型缓存是91ms。</p><p><strong>小结一下：</strong></p><ul><li>通过拼接表达式目录树+ 泛型缓存性能最高！</li><li>硬编码性能最高，为了通用，动态生成硬编码（表达式目录树拼装）==最完美</li></ul><p>以上内容都是围绕表达式目录树的拼装来展开，下半部分是围绕表达式目录树的解析来展开的。<br>首先我们来想个问题：为什么在封装SQL查询的时候，各种查询条件没有具体实现呢，一般只有一个Id呢？因为写不出来。<br>属性可能是ID Name Accound State等；值也可能是int string datetime等类型；操作也可能是大于 小于 等于包含等；那么有可能是一个条件，两个条件，或者说N个条件。是没法写出来通用的封装方法的。<br>值得注意的是，这里我们不考虑传递sql语句，例如id=3这种。<br>如果非要解决这个问题，可以用个土办法，就是把需要的内容封装成一个对象，例如 colum operation value，然后接受一个集合，再去解析这个集合，执行操作，这是所谓土办法。<br>那么表达式目录树的出现就很好的解决了这个问题，它定义了一种数据结构；调用方会有各种的条件需要传递下去，底层需要解析调用传递的东西，所以需要一个数据结构（语法/约定），上端去组装，下端去解析。</p><p>再次回到刚才的问题，假设有<code>public List&lt;T&gt; FindWhere&lt;T&gt;()</code>需要传递一些规则进去，就可以通过表达式目录树来实现：<code>public List&lt;T&gt; FindWhere&lt;T&gt;(Expression&lt;Func&lt;T,bool&gt;&gt;expression)</code>,例如这里<code>expression=x=&gt;x.Id&lt;5&amp;&amp; x.Age&gt;5</code>去做约束。</p><p>那么问题来了：下是如何去解析表达式目录树呢？</p><h2 id="ExpressionVisitor解析表达式目录树"><a href="#ExpressionVisitor解析表达式目录树" class="headerlink" title="ExpressionVisitor解析表达式目录树"></a>ExpressionVisitor解析表达式目录树</h2><p>ExpressionVisitor访问者类，Visit是一个入口，先判断，进一步的解析，然后</p><ol><li>lambada会区分参数和方法体，调度到更加专业的方法中解析；</li><li>根据表达式的类型，调度到更加专业的方法中解析；</li><li>默认根据旧的模式产生一个<strong>新的</strong>表达式目录树；也可以自行扩展，把一些解读操作进行变化。</li><li>表达式目录树是一个二叉树，visit做的事就是一层层地解析下去，一直到最终的叶节点。</li></ol><p>还是回到这个图，现在是看如何解析这颗树，从根节点往下拆。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/09Expression/Expression.png" alt="Expression"><br>首先有个内置的<code>ExpressionVisitor</code>这个类表示表达式树的访问者或重写者。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationsVisitor</span> <span class="token punctuation">:</span> ExpressionVisitor<span class="token punctuation">{</span>  <span class="token keyword">public</span> Expression <span class="token function">Modify</span><span class="token punctuation">(</span>Expression expression<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">override</span> Expression <span class="token function">Visit</span><span class="token punctuation">(</span>Expression node<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Visit {node.ToString()}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Expression <span class="token function">VisitBinary</span><span class="token punctuation">(</span>BinaryExpression b<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>NodeType <span class="token operator">==</span> ExpressionType<span class="token punctuation">.</span>Add<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Expression left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会产生一个新的表达式目录树</span>      Expression right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">Subtract</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>NodeType<span class="token operator">==</span>ExpressionType<span class="token punctuation">.</span>Multiply<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Expression left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会产生一个新的表达式目录树</span>      Expression right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">Divide</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VisitBinary</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认的二元访问，其实什么都不干</span>    <span class="token keyword">return</span> express<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Expression <span class="token function">VisitConstant</span><span class="token punctuation">(</span>ConstantExpression node<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VisitConstant</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后具体使用：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//修改表达式目录树</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">></span> exp <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> m <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>OperationsVisitor visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationsVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//visitor.Visit(exp);</span>Expression expNew <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">Modify</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析一下这个过程：Visit是个入口，解读node表达式<br>根据表达式的类型，将表达式调度到此类中更专用的访问方法之一的表达式。<br>在本例中，读到是m<em>n+2是一个二元表达式，base.Visit()方法就会调用这个<code>VisitBinary()</code>方法。<br>本例的扩展可以检测二元的操作如果是相加就改成相减，如果是相乘就改成相除。<br>接着调用this.Visit()这个方法，继续调用base.visit()这个方法，即继续判断Expression的类型，是否是二元运算式，如果是的话，还会走到VisitBinary这个方法中，继续改掉运算符号。<br>最后再调用base.VisitBinary()这个默认的二元访问，什么的不干。<br>这样一来最后`m</em>n+2<code>变成了</code>m*n-2`这个表达式了。<br>Visit本身不做什么，就是去递归遍历，我们可以通过override在访问的时候去修改一些内容。这里的例子只是为了演示访问的过程，为下面的扩展应用做一些铺垫。</p><h2 id="解析Expression生成Sql"><a href="#解析Expression生成Sql" class="headerlink" title="解析Expression生成Sql"></a>解析Expression生成Sql</h2><p><strong>思考一下：Visit的意义是什么？应用场景在哪？</strong><br>写成这样的表达式目录树怎么变成sql呢？<br><code>Expression&lt;Func&lt;People, bool&gt;&gt; lambda = x =&gt; x.Age &gt; 5;</code><br><code>select * from People where Age&gt;5</code><br><code>new List&lt;People&gt;().AsQueryable().Where(x =&gt; x.Age &gt; 5 &amp;&amp; x.Id == 10);</code><br>要完成这个sql需要三个要素，一个是age 一个是大于符号 一个是5 还有x是来自于泛型类型的。这就变成了要从表达式目录树里面获取这三要素。换句话说，这里是ORM的具体实现。</p><pre class="line-numbers language-csharp"><code class="language-csharp">ConditionBuilderVisitor vistor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionBuilderVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vistor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>vistor<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面就来具体看下这个扩展的<code>ConditionBuilderVisitor</code>的实现：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionBuilderVisitor</span> <span class="token punctuation">:</span> ExpressionVisitor<span class="token punctuation">{</span>  <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> _StringStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">string</span> condition <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> condition<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//((((( [Age]  > 5) AND ( [Id]  > 5)) AND ( [Name]  LIKE '1%')) AND ( [Name]  LIKE '%1')) AND ( [Name]  LIKE '%1%'))</span>  <span class="token comment" spellcheck="true">// 二元表达式</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Expression <span class="token function">VisitBinary</span><span class="token punctuation">(</span>BinaryExpression node<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"BinaryExpression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解析右边</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>NodeType<span class="token punctuation">.</span><span class="token function">ToSqlOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解析左边</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//变量表达式</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Expression <span class="token function">VisitMember</span><span class="token punctuation">(</span>MemberExpression node<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"MemberExpression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">" ["</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>Member<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">"] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//常量表达式</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Expression <span class="token function">VisitConstant</span><span class="token punctuation">(</span>ConstantExpression node<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"ConstantExpression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span> node<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 方法表达式</span>  <span class="token keyword">protected</span> <span class="token keyword">override</span> Expression <span class="token function">VisitMethodCall</span><span class="token punctuation">(</span>MethodCallExpression m<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"MethodCallExpression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> format<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">"StartsWith"</span><span class="token punctuation">:</span>          format <span class="token operator">=</span> <span class="token string">"({0} LIKE '{1}%')"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"Contains"</span><span class="token punctuation">:</span>          format <span class="token operator">=</span> <span class="token string">"({0} LIKE '%{1}%')"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"EndsWith"</span><span class="token punctuation">:</span>          format <span class="token operator">=</span> <span class="token string">"({0} LIKE '%{1}')"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotSupportedException</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>NodeType <span class="token operator">+</span> <span class="token string">" is not supported!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在遍历表达式目录树的时候顺便把SQL也拼装出来了，ORM就是在做这样的事情。Linq to SQL 的意义就是希望使用者不用关注SQL语句，可以直接从可读性很强的lambda表达式出发。本例中是通过栈来从右往左进行遍历。<br>这样一来，上述实现可以应对更加复杂的表达式目录树：<br>例子一：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//select * from People where Age>5 and Id>5</span>  Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">5</span>                                             <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Id <span class="token operator">></span> <span class="token number">5</span>                                             <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>                                             <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>                                             <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">string</span> sql <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"Delete From [{0}] WHERE {1}"</span>     <span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">.</span>Name     <span class="token punctuation">,</span> <span class="token string">" [Age]>5 AND [ID] >5"</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span>  ConditionBuilderVisitor vistor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionBuilderVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  vistor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>vistor<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子二：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//且或非</span>  Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">"A"</span> <span class="token operator">||</span> x<span class="token punctuation">.</span>Id <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>  ConditionBuilderVisitor vistor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionBuilderVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  vistor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>vistor<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">"A"</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Id <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ConditionBuilderVisitor vistor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionBuilderVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  vistor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>vistor<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">||</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">"A"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Id <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>  ConditionBuilderVisitor vistor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionBuilderVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  vistor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>vistor<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表达式链接"><a href="#表达式链接" class="headerlink" title="表达式链接"></a>表达式链接</h2><pre class="line-numbers language-csharp"><code class="language-csharp">Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda1 <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda2 <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Id <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda3 <span class="token operator">=</span> lambda1<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>lambda2<span class="token punctuation">)</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda4 <span class="token operator">=</span> lambda1<span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>lambda2<span class="token punctuation">)</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> lambda5 <span class="token operator">=</span> lambda1<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Do1</span><span class="token punctuation">(</span>lambda3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Do1</span><span class="token punctuation">(</span>lambda4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Do1</span><span class="token punctuation">(</span>lambda5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Do1</span><span class="token punctuation">(</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>People<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> func<span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>People<span class="token operator">></span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>People<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"234"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Id<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"345"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>People<span class="token operator">></span> peopleList <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这三个操作，通常是进行扩展的：</p><ul><li>合并表达式 expr1 AND expr2</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> <span class="token generic-method function">And<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> expr1<span class="token punctuation">,</span> Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> expr2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//return expression.lambda&lt;func&lt;t, bool>>(expression.andalso(expr1.body, expr2.body), expr1.parameters);</span>  <span class="token comment" spellcheck="true">//先判断非空 空不能visit </span>  ParameterExpression newParameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  NewExpressionVisitor visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewExpressionVisitor</span><span class="token punctuation">(</span>newParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> left <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>expr1<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重新生成了一个表达式目录树</span>  <span class="token keyword">var</span> right <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>expr2<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> body <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> newParameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>合并表达式 expr1 or expr2</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> <span class="token generic-method function">Or<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> expr1<span class="token punctuation">,</span> Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> expr2<span class="token punctuation">)</span><span class="token punctuation">{</span>ParameterExpression newParameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>NewExpressionVisitor visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewExpressionVisitor</span><span class="token punctuation">(</span>newParameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> left <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>expr1<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> right <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>expr2<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> body <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> newParameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表达式Not操作</p></li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> <span class="token generic-method function">Not<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span> expr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> candidateExpr <span class="token operator">=</span> expr<span class="token punctuation">.</span>Parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> body <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span>expr<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> candidateExpr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Linq </tag>
            
            <tag> Expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-8-LambdaLinq</title>
      <link href="/2020/01/22/dotnet-advanced-series-1-8-lambdalinq/"/>
      <url>/2020/01/22/dotnet-advanced-series-1-8-lambdalinq/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 匿名方法 lambda表达式<br>2 匿名类 var 扩展方法<br>3 linq to object  </p><h2 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h2><h3 id="lambda演变历史"><a href="#lambda演变历史" class="headerlink" title="lambda演变历史"></a>lambda演变历史</h3><p>首先我们定义了如下这么些委托,还有DoNothing和Study方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">NoReturnNoPara</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">NoReturnWithPara</span><span class="token punctuation">(</span><span class="token keyword">string</span> x<span class="token punctuation">,</span> <span class="token keyword">string</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 声明委托</span><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">int</span> <span class="token function">WithReturnNoPara</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">string</span> <span class="token function">WithReturnWithPara</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第一阶段： .NetFramework1.0/1.1时代，是像下面这么写的：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">NoReturnNoPara method <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnNoPara</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>DoNothing<span class="token punctuation">)</span><span class="token punctuation">;</span>NoReturnWithPara noReturnWithPara <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnWithPara</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Study<span class="token punctuation">)</span><span class="token punctuation">;</span>noReturnWithPara<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">,</span> <span class="token string">"ZhengChaoqiang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时候是需要先定义一个方法DoNothing，然后进行绑定到委托的。</p><p><strong>第二阶段： .NetFramework2.0  匿名方法，增加了一个delgate关键字 可以访问局部变量</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>NoReturnWithPara noReturnWithPara <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnWithPara</span><span class="token punctuation">(</span><span class="token keyword">delegate</span> <span class="token punctuation">(</span><span class="token keyword">string</span> x<span class="token punctuation">,</span> <span class="token keyword">string</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匿名方法可以访问局部变量</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is Study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>noReturnWithPara<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">,</span> <span class="token string">"ZhengChaoqiang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三阶段： .NetFramework3.0  去掉delegate关键字，添加了一个=&gt;  goes to</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">NoReturnWithPara noReturnWithPara <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnWithPara</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">string</span> x<span class="token punctuation">,</span> <span class="token keyword">string</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is Study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>noReturnWithPara<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">,</span> <span class="token string">"ZhengChaoqiang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更进一步的优化，省略参数类型，是编译器的语法糖（根据委托约束的）：</p><pre class="line-numbers language-csharp"><code class="language-csharp">NoReturnWithPara noReturnWithPara <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnWithPara</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is Study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>noReturnWithPara<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">,</span> <span class="token string">"ZhengChaoqiang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果方法体只有一行，可以去掉大括号和分号去掉，new NoReturnWithPara也可以省略：</p><pre class="line-numbers language-csharp"><code class="language-csharp">NoReturnWithPara noReturnWithPara <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is Study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>noReturnWithPara<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">,</span> <span class="token string">"ZhengChaoqiang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>针对一些特殊情况：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Action<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> action <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{x}_{y}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Action<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> action1 <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{x}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果只有一个参数的时候，可以省略小括号 </span>Func<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> func <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"杰克"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果有返回值，而且方法体只有一行，可以省略return; </span>Func<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> func1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"杰克"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果有返回值，而且方法体只有一行，可以省略return;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>lambda表达式就是什么？<br>其实是一个方法， 在中间语言中，为其分配了一个方法名称；<br>通过反编译之后，发现Lambda表达式生成在一个名称为&lt;&gt; 密封类中的一个方法；<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/08Lambda/lambdaIL.png" alt="LambdaIL"></p><h3 id="lambda在多播委托中的应用"><a href="#lambda在多播委托中的应用" class="headerlink" title="lambda在多播委托中的应用"></a>lambda在多播委托中的应用</h3><pre class="line-numbers language-csharp"><code class="language-csharp">NoReturnWithPara noReturnWithPara <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnWithPara</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Study<span class="token punctuation">)</span><span class="token punctuation">;</span>noReturnWithPara <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Study<span class="token punctuation">;</span>noReturnWithPara <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{x}_{y}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>noReturnWithPara <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Study<span class="token punctuation">;</span>noReturnWithPara <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{x}_{y}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//lambda表达式在多播委托中不能被移除</span><span class="token function">noReturnWithPara</span><span class="token punctuation">(</span><span class="token string">"Chaoqiang"</span><span class="token punctuation">,</span> <span class="token string">"ZhengChaoqiang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lambda表达式在多播委托中不能被移除，因为在编译器中生成了两个不同的方法。</p><h2 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h2><p><strong>第一阶段：3.0出了个匿名类</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">object</span> model <span class="token operator">=</span> <span class="token keyword">new</span><span class="token comment" spellcheck="true">//3.0    </span><span class="token punctuation">{</span>  Id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Name <span class="token operator">=</span> <span class="token string">"undefined"</span><span class="token punctuation">,</span>  Age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>  ClassId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Teacher <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候我们发现，是无法访问属性值。object中肯定有Id/Name，C#是强类型语言，编译器不认可，</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//会出错</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第二阶段：4.0的时候出了dynamic这个动态类型，可以解决上面匿名类的不能访问属性的问题，因为dynamic避开编译器检查。</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">dynamic</span> dModel <span class="token operator">=</span> <span class="token keyword">new</span><span class="token comment" spellcheck="true">//</span><span class="token punctuation">{</span>  Id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Name <span class="token operator">=</span> <span class="token string">"undefined"</span><span class="token punctuation">,</span>  Age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>  ClassId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>dModel<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token number">134</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dModel<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dModel<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Console.WriteLine(dModel.Js);// 编译没问题，运行会报异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三阶段：var语法糖</strong><br>利用var构造匿名类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> model1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token comment" spellcheck="true">//不能声明方法</span><span class="token punctuation">{</span>  Id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Name <span class="token operator">=</span> <span class="token string">"undefined"</span><span class="token punctuation">,</span>  Age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>  ClassId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Teacher <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>model1<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>model1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>model1<span class="token punctuation">.</span>Id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是：var匿名不能声明方法，字段也只有在初始化的时候指定。<br>1 var 配合匿名类型使用<br>2 var 偷懒，复杂类型的使用 </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> i1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//var就是个语法糖，由编译器自动推算</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"Richard"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//var aa;//var声明的变量必须初始化，必须能推算出类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h2><p>扩展方法：添加一个第三方静态类，把当前需要扩展的类作为参数添加方法，在第一个参数前加一个this<br>下面我们先看一个实例，一开始有个Student类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> ClassId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1}我们一起学习.net开发"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">StudyHard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1}我们一起学习.net开发"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随着业务的修改，如果我们需要增加一些方法，会频繁修改原来的代码，代码就很不稳定。这时候，常见的方法就是增加一个扩展方法，可以像下面这么来操作：<br>首先有个静态类，然后有个静态方法，再在第一个参数前面加上this</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExtendMethod</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StudyPractise</span><span class="token punctuation">(</span><span class="token keyword">this</span> Student student<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1}我们一起学习.net开发-扩展方法"</span>"<span class="token punctuation">,</span> student<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> student<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来，我们可以在外面调用这个扩展方法，看起来就像和实例方法是一样的：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Name <span class="token operator">=</span> <span class="token string">"Mr.zhang"</span><span class="token punctuation">,</span>  Age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>  ClassId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">StudyPractise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//扩展方法；看起来跟实例方法调用方式一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展方法调用，用起来很像实例方法，就像扩展了Student的逻辑,一般来说，有以下场景：</p><ol><li>第三方的类，不适合修改源码，可以通过扩展方法增加逻辑；需要注意的是：有限调用实例方法，最怕扩展方法增加了，然后原来的类后来有被修改了。</li><li>适合组建时开发的扩展（。NET Core）,定义接口或者类，是按照最小需求，但是在开发的时候又经常需要一些方法，就是通过扩展方法context.Response.WriteAsync 中间件的注册。</li><li>扩展一些常见的操作</li></ol><p>例如下面对int的一个非空判断扩展方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">int</span><span class="token operator">?</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> k <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//if (k == null)</span>  <span class="token comment" spellcheck="true">//{</span>  <span class="token comment" spellcheck="true">//    return 0;</span>  <span class="token comment" spellcheck="true">//}</span>  <span class="token comment" spellcheck="true">//else</span>  <span class="token comment" spellcheck="true">//{</span>  <span class="token comment" spellcheck="true">//    return k.Value;</span>  <span class="token comment" spellcheck="true">//}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用的时候就可以直接<code>int x = k.ToInt() + y;</code>这么来用。</p><p>又例如对string做一个扩展方法，用于截取特定长度的字符串：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">ToStringNew</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">string</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 默认参数</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>Length <span class="token operator">></span> length<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> $<span class="token string">"{str.Substring(0, length)}...."</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用的时候可以这么来用:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">string</span> str <span class="token operator">=</span> <span class="token string">"中华人名共和国万岁"</span><span class="token punctuation">;</span><span class="token keyword">string</span> str1 <span class="token operator">=</span> <span class="token string">"中华人名共和国..."</span><span class="token punctuation">;</span> str1<span class="token punctuation">.</span><span class="token function">ToStringNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>又例如泛型扩展方法，对任意类型都可以增加一个扩展方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token generic-method function">GenericExtend<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> T t<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 默认参数</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">is</span> Guid<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">///.....</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用的时候可以这么来写<code>str1.GenericExtend</code>,对object进行扩展的时候会污染基础类型，一般少为object ，没有约束的泛型去扩展。</p><p>思考：匿名方法或者lamdba表达式是不是只能是无返回值的</p><pre class="line-numbers language-csharp"><code class="language-csharp">Action action <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Action<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> action1 <span class="token operator">=</span> s <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> func0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Day<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果方法只有一行，去掉大括号分号return</span><span class="token keyword">int</span> iResult <span class="token operator">=</span> func0<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> func1 <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">;</span>iResult<span class="token operator">=</span>func1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Linq"><a href="#Linq" class="headerlink" title="Linq"></a>Linq</h2><p>Linq To Object<br>.NetFramework3.0的一个非常重大的改变<br>Linq专门用来做数据处理</p><h3 id="Where筛选"><a href="#Where筛选" class="headerlink" title="Where筛选"></a>Where筛选</h3><p>先看一个例子体会一下，首先有个student的列表<code>List&lt;Student&gt; studentList = new List&lt;Student&gt;()</code>，然后要做一些数据过滤，正常来说，下面两个都是常见的操作。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">{</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token generic-method function">Where<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Name={0}  Age={1}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> item<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">from</span> s <span class="token keyword">in</span> studentList             <span class="token keyword">where</span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">30</span>             <span class="token keyword">select</span> s<span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Name={0}  Age={1}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> item<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这里的时候，可能会赞叹，这个<code>Where&lt;Student&gt;</code>真不错，不仅见名知意，并且代码简介。我们先通过委托泛型表达式的知识想一想，我们自己要实现这个扩展方法，可以怎么做？</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token generic-method function">JerryWhere<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> resource<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> func<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> resource<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  </span><span class="token comment" spellcheck="true">/* if (item.Age &lt; 30)*/</span><span class="token comment" spellcheck="true">//bool //item做为一个参数  返回一个bool </span>    <span class="token punctuation">{</span>      list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个扩展方法就是传递一个Func委托进去，然后逐个遍历，通过委托的方法去判断是否添加到list里面去，最后统一返回一个list容器。<br>更进一步的，这里的List还不够generic,我们可以采用这个IEnumerable，并结合迭代器(模式)，写成下面这样：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IEnumerable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token generic-method function">JerryWhereIterator<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> IEnumerable<span class="token operator">&lt;</span>T<span class="token operator">></span> resource<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> func<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> resource<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"开始检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">yield</span> <span class="token keyword">return</span> item<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// yield 和Enumerabl 是配合使用，按需获取/延时加载</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过在foreach中加<code>Console.WriteLine("开始检查")</code>可以发现，上述两种方法，前者是全部检查完了再返回，后者是按需获取，在用的时候采取执行，也就是延迟加载，逐个返回的。<br>后者的另外一个优点是只要实现了IEnumerable接口的类型，都可以用，例如数据，集合等。</p><h3 id="Select投影"><a href="#Select投影" class="headerlink" title="Select投影"></a>Select投影</h3><p>例如在上例中，筛选出的一堆学生要转换成另一个对象：<br>写法一：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//var 在这里是为了匿名类</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">from</span> s <span class="token keyword">in</span> studentList           <span class="token keyword">where</span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">30</span>           <span class="token keyword">select</span> <span class="token keyword">new</span>           <span class="token punctuation">{</span>             IdName <span class="token operator">=</span> s<span class="token punctuation">.</span>Id <span class="token operator">+</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>             ClassName <span class="token operator">=</span> s<span class="token punctuation">.</span>ClassId <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"Normal Class"</span> <span class="token punctuation">:</span> <span class="token string">"Other Class"</span>           <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Name={0}  Age={1}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>ClassName<span class="token punctuation">,</span> item<span class="token punctuation">.</span>IdName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写法二：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> list <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token generic-method function">Where<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//条件过滤</span>                      <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span><span class="token comment" spellcheck="true">//投影</span>                      <span class="token punctuation">{</span>                      Id <span class="token operator">=</span> s<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>                      ClassId <span class="token operator">=</span> s<span class="token punctuation">.</span>ClassId<span class="token punctuation">,</span>                      IdName <span class="token operator">=</span> s<span class="token punctuation">.</span>Id <span class="token operator">+</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>                      ClassName <span class="token operator">=</span> s<span class="token punctuation">.</span>ClassId <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span>  <span class="token string">"Normal Class"</span> <span class="token punctuation">:</span> <span class="token string">"Other Class"</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//排序</span>                      <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token operator">></span>s<span class="token punctuation">.</span>ClassId<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//降序 只会生效最后一个</span>                      <span class="token comment" spellcheck="true">//.ThenBy//2个都生效</span>                      <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>ClassId<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//倒排 只会生效最后一个</span>                      <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//跳过几条 </span>                      <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取几条</span>                      <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组group-by"><a href="#分组group-by" class="headerlink" title="分组group by"></a>分组group by</h3><p>同样有两种写法，首先筛选年级小于30的学生集合s，其次按照学生的班级进行分组，得到sg。<br>方法一：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">from</span> s <span class="token keyword">in</span> studentList           <span class="token keyword">where</span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">30</span>           <span class="token keyword">group</span> s by s<span class="token punctuation">.</span>ClassId <span class="token keyword">into</span> sg           <span class="token keyword">select</span> <span class="token keyword">new</span>           <span class="token punctuation">{</span>             key <span class="token operator">=</span> sg<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>             maxAge <span class="token operator">=</span> sg<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> t<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"key={item.key}  maxAge={item.maxAge}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> list <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>ClassId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>sg <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span><span class="token punctuation">{</span>  key <span class="token operator">=</span> sg<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>  maxAge <span class="token operator">=</span> sg<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> t<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"key={item.key}  maxAge={item.maxAge}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，这里的<code>sg</code>，实现了<code>IEnumerable</code>接口，可以进行foreach操作；并且这个key就是班级编号，可以这么进行验证：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> data <span class="token keyword">in</span> sg<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> data<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{item.Id} {item.Name} {item.Age}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join查询"><a href="#join查询" class="headerlink" title="join查询"></a>join查询</h3><p>多表查询join学生的班级关联班级，然后组成匿名类，包含学生姓名，班级名称：<br>方法一：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">from</span> s <span class="token keyword">in</span> studentList           <span class="token keyword">join</span> c <span class="token keyword">in</span> classList on s<span class="token punctuation">.</span>ClassId equals c<span class="token punctuation">.</span>Id <span class="token comment" spellcheck="true">//条件的比较 只能使用 equals  不能用==</span>           <span class="token keyword">select</span> <span class="token keyword">new</span>           <span class="token punctuation">{</span>             Name <span class="token operator">=</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>             CalssName <span class="token operator">=</span> c<span class="token punctuation">.</span>ClassName           <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Name={item.Name},CalssName={item.CalssName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> list <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>classList<span class="token punctuation">,</span> s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>ClassId<span class="token punctuation">,</span> c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span><span class="token punctuation">{</span>  Name <span class="token operator">=</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>  CalssName <span class="token operator">=</span> c<span class="token punctuation">.</span>ClassName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Name={item.Name},CalssName={item.CalssName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><p>从学生列表的班级Id去join班级，是以学生列表为准，如果学生列表中的班级ID在班级列表中没有，则班级为空。<br>方法一：</p><pre class="line-numbers language-csharp"><code class="language-csharp"> <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">from</span> s <span class="token keyword">in</span> studentList            <span class="token keyword">join</span> c <span class="token keyword">in</span> classList on s<span class="token punctuation">.</span>ClassId equals c<span class="token punctuation">.</span>Id            <span class="token keyword">into</span> scList            <span class="token keyword">from</span> sc <span class="token keyword">in</span> scList<span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  在Linq语句中只有左连接  DefaultIfEmpty 关键字</span>            <span class="token keyword">select</span> <span class="token keyword">new</span>            <span class="token punctuation">{</span>              Name <span class="token operator">=</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>              CalssName <span class="token operator">=</span> sc <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">"无班级"</span> <span class="token punctuation">:</span> sc<span class="token punctuation">.</span>ClassName<span class="token comment" spellcheck="true">//c变sc，为空则用</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"Name={item.Name},CalssName={item.CalssName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> list <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>classList<span class="token punctuation">,</span> s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>ClassId<span class="token punctuation">,</span> c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span><span class="token punctuation">{</span>  Name <span class="token operator">=</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>  CalssName <span class="token operator">=</span> c<span class="token punctuation">.</span>ClassName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为空就没有了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结一下：<br><strong>Linq to object</strong><br>在Enumerable类，正对满足IEnumerable数据，指的是内存数据<br>Linq–Where: 把对数据过滤的通用操作完成，把可变的过滤逻辑交给委托；<br>Linq–Select:把对数据转化的通用操作完成，把可变的转换逻辑交给委托；<br>Linq–OrderBy,…<br>Linq其实就是把对数据操作的通用部分完成，把可变的交给委托，使用者只关心可变部分即可，Linq就是这样一个封装。</p><p><strong>Linq to SQL</strong><br>针对IQueryable数据，操作数据库<br>程序访问数据库，都需要Ado.net+Sql<br>封装一下通用数据库操作，可变的SQL语句，是通过表达式目录树来传递，这个可以被解析的。</p><pre class="line-numbers language-csharp"><code class="language-csharp">IQueryable<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token generic-method function">Where<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要注意的是：这里传递的是表达式目录树，不是匿名方法，需要可以被解析的。</p><p><strong>Linq to XML</strong><br>封装与喜爱通用的对XML文件的操作，可变的操作通过委托来传递</p><p>这是一种伟大的封装思想，希望通过一种模式完成一切数据源的访问。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Linq </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-7-Event</title>
      <link href="/2020/01/21/dotnet-advanced-series-1-7-event/"/>
      <url>/2020/01/21/dotnet-advanced-series-1-7-event/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><h2 id="一只猫的故事"><a href="#一只猫的故事" class="headerlink" title="一只猫的故事"></a>一只猫的故事</h2><p>这里有个例子，一只猫叫了一声，会有一系列的动作，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Miao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} Miao"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//狗叫了</span>  <span class="token keyword">new</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//老鼠跑了</span>  <span class="token keyword">new</span> <span class="token class-name">Baby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小孩哭了</span>  <span class="token keyword">new</span> <span class="token class-name">Mother</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wispher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Neighbor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Stealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下上面这个过程，有什么问题？<br>依赖太重，依赖太多的类型<br>职责不单，耦合太重，本身猫只应该做自己的事<br>如果任何一个环节发生改变，这个方法就得修改，导致这方法非常不稳定<br>其实也不应该这样，猫就是猫，只能Miao一声，剩下的动作，本来不是这个猫的事儿；<br>但是我们代码给全部限定了，还指定了顺序。</p><p>回归需求：只能Miao一声,剩下的动作来自于哪里，或者怎么执行，我们不管，只负责触发，调用。<br>把一堆动作按顺序执行，应该使用什么？多播委托</p><p>现在来改进一下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> Action CatMaioAction<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MiaoDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} Miao"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  CatMaioAction<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这样就可以在委托上添加方法了</span>CatMaioAction<span class="token operator">+</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Wang；CatMaioAction<span class="token operator">+</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Run；CatMaioAction<span class="token operator">+</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mother</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Wispher；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这其实是一种观察者模式，我们可以用面向接口编程的思路来看：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>IObject<span class="token operator">></span> _Observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>IObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddObserver</span><span class="token punctuation">(</span>IObject obserer<span class="token punctuation">)</span><span class="token punctuation">{</span>  _Observer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>obserer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MiaoAbserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} Miao"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//固定动作</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> _Observer<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    item<span class="token punctuation">.</span><span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>IObject</code>其实就是定义了一个接口，让Dog等类去实现其中的方法<code>DoAction</code>；然后在遍历所有observe中的DoAction方法，本质上和多播委托是一个用法:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IObject</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">DoAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件Event:就是一个委托的实例  加一个event关键字<br>事件也实现上面这个猫叫了以后发生的事儿；<br>event：可以限定权限，限定只能在事件所在类的内部Invoke;在外面是不行，包括子类也不行</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">event</span> Action CatMaioActionHandler<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MiaoEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} MiaoEvent"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>CatMaioActionHandler<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CatChild</span> <span class="token punctuation">:</span> Cat<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//base.CatMaioActionHandler.</span>    <span class="token comment" spellcheck="true">//base.CatMaioActionHandler = null; //在子类 也不行</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件和委托的区别"><a href="#事件和委托的区别" class="headerlink" title="事件和委托的区别"></a>事件和委托的区别</h2><p><strong>委托是一种类型，事件是委托类型的一个实例，加上了event的权限控制。</strong><br>Student是一种类型，Tony是Student类型的一个实例。</p><h2 id="事件的应用"><a href="#事件的应用" class="headerlink" title="事件的应用"></a>事件的应用</h2><p>e.g. winform控件无处不在，WPF WebForm服务端控件 请求级事件<br>事件（观察者模式）能把固定动作和可变动作分开，完成固定动作，把可变动作分离出去，由外部来控制。例如上例中，猫自己做的动作和别的动作。<br>搭建框架时。恰好就需要这个特点，可以通过实践去分离可变动作，支持扩展。</p><p>实例：winform<br>启动Form—初始化控件Button—Click事件—+=一个动作<br>点击按钮—鼠标操作—操作系统受到信号—发送给程序—程序接受信号，判断控件—（事件只能类的内部发生）Button类自己调用Click—肯定是出发了Click事件—动作就会执行</p><p>对于登陆和支付，2次按钮操作，大部分东西是一样的，就是具体业务不一样的；<br>封装的空间就完成了固定动作—接受信号和默认动作<br>可变的部分就是事件—是一个开放的接口，想扩展什么就添加什么。<br>event限制权限，避免外部乱来。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/07Event/Event.png" alt="Event"><br>下面定义一个标准事件：<br>首先有个Phone的类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//事件的发布者，发布事件并且在满足条件的情况下，触发事件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> _price<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Price  <span class="token punctuation">{</span>    <span class="token keyword">get</span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> _price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> _price<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//降价了</span>      <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>DiscountHandler<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          OldPrice <span class="token operator">=</span> _price<span class="token punctuation">,</span>          NewPrice <span class="token operator">=</span> <span class="token keyword">value</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_price <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">event</span> EventHandler DiscountHandler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打折事件</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面有个自定义的事件，自定的参数 EventArgs是个空的，一般会为特定事件封装个参数：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XEventArgs</span> <span class="token punctuation">:</span> EventArgs<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> OldPrice <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> NewPrice <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是学生和老师会关注这个事件，如果降价了，就会买，那么买这个方法的参数就要和事件的一致：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//下面是事件的订户 关注事件，事件发生之后，自己做出相应的动作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Buy</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Phone phone <span class="token operator">=</span> <span class="token punctuation">(</span>Phone<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"this is {phone.Name}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XEventArgs xEventArgs <span class="token operator">=</span> <span class="token punctuation">(</span>XEventArgs<span class="token punctuation">)</span>e<span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"之前的价格{xEventArgs.OldPrice}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"现在的价格{xEventArgs.NewPrice}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"买下来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Buy</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Phone phone <span class="token operator">=</span> <span class="token punctuation">(</span>Phone<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"this is {phone.Name}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XEventArgs xEventArgs <span class="token operator">=</span> <span class="token punctuation">(</span>XEventArgs<span class="token punctuation">)</span>e<span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"之前的价格{xEventArgs.OldPrice}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"现在的价格{xEventArgs.NewPrice}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"买下来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，还需要将订户和事件发布者关联起来：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Id <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>    Name <span class="token operator">=</span> <span class="token string">"华为P9"</span><span class="token punctuation">,</span>    Price <span class="token operator">=</span> <span class="token number">2499</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//订阅：就是把订户和事件发布者关联起来</span>  phone<span class="token punctuation">.</span>DiscountHandler <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Buy<span class="token punctuation">;</span>  phone<span class="token punctuation">.</span>DiscountHandler <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Buy<span class="token punctuation">;</span>  phone<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Event </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-6-Delegate</title>
      <link href="/2020/01/19/dotnet-advanced-series-1-6-delegate/"/>
      <url>/2020/01/19/dotnet-advanced-series-1-6-delegate/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><ol><li>委托的声明、实例化和调用</li><li>泛型委托–Func Action</li><li>委托的意义：解耦</li><li>委托的意义：异步多线程</li><li>委托的意义：多播委托</li><li>事件 观察者模式</li></ol><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><h3 id="委托的声明"><a href="#委托的声明" class="headerlink" title="委托的声明"></a>委托的声明</h3><p>委托在IL 中就是一个类，继承自父类(特殊类)MulticastDelegate<br>MulticastDelegate是特殊类， 不能被继承<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/06Delegate/DelegateClassIL.png" alt="DelegateClassIL"><br>声明委托的方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//委托声明 可以声明在类的外面也可以是在类内部</span><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">NoReturnNoPara</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">NoReturnWithPara</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 声明委托</span><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">int</span> <span class="token function">WithReturnNoPara</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">int</span> <span class="token function">WithReturnWithPara</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="委托的实例化"><a href="#委托的实例化" class="headerlink" title="委托的实例化"></a>委托的实例化</h3><p>假设预先定义好一个方法，是无参无返回值的，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DoNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is DoNothing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后实例化的时候要注意：要求传递一个和委托参数返回值完全一致的方法。</p><h3 id="委托的调用"><a href="#委托的调用" class="headerlink" title="委托的调用"></a>委托的调用</h3><p>思考：委托是一个类 为什么要用委托呢？<br>这个类的实例可以放入一个方法，实例invoke，就是调用方法，这看上去还是在执行方法，为什么要分成三个步骤呢？<br>唯一的差别，就是把方法放入一个对象/变量。</p><pre class="line-numbers language-csharp"><code class="language-csharp">NoReturnNoPara method <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnNoPara</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>DoNothing<span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 就是去调用方法</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以省略Invoke</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//和委托Invoke 是做的同一件事</span>method<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里是开启一个新的线程去执行方法</span>method<span class="token punctuation">.</span><span class="token function">EndInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待一个异步调用的结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面举一个例子来说明这样做的好处：<br>有一个学生类，里面有一些方法，需要根据不同的地区有不同的打招呼方式：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> ClassId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> PeopleType  <span class="token punctuation">{</span>    Chinese <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    American <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    Japanese <span class="token operator">=</span> <span class="token number">3</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> PeopleType peopleType<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"招手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>peopleType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> PeopleType<span class="token punctuation">.</span>Chinese<span class="token punctuation">:</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{name}:晚上好！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> PeopleType<span class="token punctuation">.</span>American<span class="token punctuation">:</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{name}:good evening！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> PeopleType<span class="token punctuation">.</span>Japanese<span class="token punctuation">:</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{name}:#@%￥%……%%…！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>遇到不认识的枚举，说明调用有问题，那就不要隐藏，直接异常          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"枚举不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中国人：晚上好<br>美国人：good evening!<br>通过枚举判断，执行各自的业务逻辑<br>如果新增一个国家的人，那么就修改这个方法<br>如果业务升级，方法需要频繁的修改，方法很不稳定<br>传参数peopleType 是判断之后执行逻辑，传参数是为了执行逻辑，参数不同逻辑又不一样，既然如此，能不能把这个逻辑直接传过来呢？逻辑是什么？逻辑不就是方法吗？如果把一个方法包裹之后传递呢？ 委托</p><p>用委托之前先构造一些方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SayHiChinese</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"招手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{name}:晚上好！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SayHiAmerican</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"招手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{name}:good evening！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SayHiJapanese</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"招手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{name}:#@%￥%……%%…！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写不同的方法，根据不同的人调用不同的方法 修改某个方法不影响别的方法；<br>和上面的实现方案比较好像好一点。<br>如果在问好之前需要做点什么？这里就需要在每个方法中增加一个动作，代码重复很多。<br>所以我们的出发点是说：既要增加公共逻辑方便，又要维护简单。</p><p>所以，再定义一个泛型委托：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SayHiShow</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> method<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"招手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看一下这个过程，委托的作用：<br>自上而下比较：逻辑解耦，方便维护升级，代码稳定！<br>自下往上：去掉重复代码 代码重用。</p><h2 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h2><h3 id="系统内置的委托："><a href="#系统内置的委托：" class="headerlink" title="系统内置的委托："></a><strong>系统内置的委托：</strong></h3><p>Action  Func  从.Netframework 3.0出现，是系统提供的委托</p><ul><li>Action:没有返回值， 参数可有可无</li><li>Func: 必须有返回值，参数可有可无</li></ul><p><strong>Action: 没有返回值，最多支持16个泛型参数：</strong><br><code>Action act = new Action(this.DoNothing);</code>或者可以直接这么写<code>Action act = this.DoNothing;</code>这是个语法糖。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Action<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> actInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>NoReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>Action<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">></span> action <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Func: 有（泛型）返回值，最多支持16个泛型参数，泛型参数列表的最后一个为委托返回值类型：</strong><br>Func<int> func1 = new Func<int>(ToInt);<br>Func&lt;int, int, string, DateTime, object, int, string, DateTime, object, int, string, DateTime, object, int, string, DateTime, object&gt; Func2 = null;<br>int iResult = func1.Invoke();</int></int></p><p>我们其实可以自定义委托呀，那系统为什么还要定义这两个委托呢？<br>先看一个例子：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Action action0<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>NoReturnNoPara method <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个方法 要求传入一个Action委托</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DoAction</span><span class="token punctuation">(</span>Action act<span class="token punctuation">)</span><span class="token punctuation">{</span>  act<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoAction</span><span class="token punctuation">(</span>action0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入action0没问题</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoAction</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入method方法是不行的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>委托的本质是类，Action和NoReturnNoPara是不同的类，虽然实例化都可以传递相同的方法，但是没有父子关系，所以不能替换的。<br>更进一步，框架中出现过N多个委托，委托的签名是一致的，实例化完的对象却不能通用；<br>本省实例化的时候，参数是一样的，但却是不同的类型，导致没法通用；<br>Action和Func 框架预定义 新的API一律基于这些委托来封装。<br>因为 .Net 向前兼容，以前的版本去不掉，保留着，这是历史包袱；<br>至此，就可以用通用的委托来使用。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadStart</span><span class="token punctuation">(</span>DoNothing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoReturnNoPara</span><span class="token punctuation">(</span>DoNothing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是不是重复声明？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="多种途径实例化"><a href="#多种途径实例化" class="headerlink" title="*多种途径实例化"></a><strong>*多种途径实例化</strong></h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//普通方法实例化委托</span>NoReturnNoPara method1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnNoPara</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>DoNothing<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态方法实例化委托</span>NoReturnNoPara method1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnNoPara</span><span class="token punctuation">(</span>DoNothingStatic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例方法实例化委托</span>NoReturnNoPara method1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnNoPara</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Study<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态方法实例化委托</span>NoReturnNoPara method1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoReturnNoPara</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>StudyAdvanced<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h3><p>多播委托 我们自定义的任何一个委托都是多播委托；<br>可以通过+=/-=  向委托中增加或者移除方法；<br>+=增加方法以后，让委托组成了一个方法链；<br>-=只能移除同一个实例里的方法，从方法链的尾部开始匹配，遇到第一个完全吻合的，移除，且只移除一个。如过没有可以移除的方法，就啥事儿也不发生；</p><p>下面是一些例子：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Action method1<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoNothing<span class="token punctuation">;</span>method1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoNothing<span class="token punctuation">;</span>method1 <span class="token operator">+</span><span class="token operator">=</span> student<span class="token punctuation">.</span>Study<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加括号就是调用    </span>method1 <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoNothing<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 表示当前实例的方法</span>method1 <span class="token operator">-</span><span class="token operator">=</span> student<span class="token punctuation">.</span>Study<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//仍然会执行 因为是两个不同的实例 不完全吻合</span>method1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span>NoReturnNoPara item <span class="token keyword">in</span> method1<span class="token punctuation">.</span><span class="token function">GetInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  item<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  item<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步来执行</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果func 委托在+= 形成一个方法链以后，在执行后，只能获取最后一个方法的返回值。多播委托一般不要返回值，因为前面几个的返回值会丢失。<br>多播委托不能异步，会报错。如果要异步执行的话，可以用上述foreach中的GetInvocationList方法来分别执行。<br>中间出现未捕获的方法，直接出现方法链结束。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Delegate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-5-Attribute</title>
      <link href="/2020/01/14/dotnet-advanced-series-1-5-attribute/"/>
      <url>/2020/01/14/dotnet-advanced-series-1-5-attribute/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><ol><li>特性attribute，和注释有什么区别</li><li>声明和使用attribute，AttributeUsage</li><li>运行中获取attribute：额外信息 额外操作</li><li>Remark封装、attribute验证</li></ol><h2 id="特性及其语法"><a href="#特性及其语法" class="headerlink" title="特性及其语法"></a>特性及其语法</h2><p>MVC-EF-WCF-IOC-AOP-SuperSocket 无处不在在。<br>特性很厉害，加了特性，可以影响编译器编译,还可以增加额外功能。<br>[Obsolete(“请不要使用这个了，请使用什么来代替”)]//系统<br>[Serializable]//可以序列化和反序列化 </p><p><strong>特性到底是什么</strong><br>特性其实就是一个类，需要直接/间接继承Attribute父类<br>声明特性的时候，约定俗称是以Attribute 结尾，标记时就可以省略<br>下面自己写一个特性类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CutomAttribute</span> <span class="token punctuation">:</span> Attribute<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">CutomAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"无参数构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">CutomAttribute</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Int类型构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">CutomAttribute</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">string</span> j<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"两个参数构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Remark <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Description<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"通过反射调用特性中的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CutomAttributeChild</span> <span class="token punctuation">:</span> CutomAttribute<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">CutomAttributeChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token number">345</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在外面就可以对特性Cutom进行应用：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// [Obsolete("请不要使用这个了，请使用什么来代替")]//系统</span><span class="token comment" spellcheck="true">//[Serializable]//可以序列化和反序列化  </span><span class="token punctuation">[</span><span class="token function">Cutom</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token string">"飞哥"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Cutom</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Cutom</span><span class="token punctuation">(</span><span class="token number">567</span><span class="token punctuation">,</span> Remark <span class="token operator">=</span> <span class="token string">".Net学习"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">".Net正在学习"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>CutomAttributeChild<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"这里是{this.Name}跟着Eleven老师学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//[return:Cutom]</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Answer</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Cutom<span class="token punctuation">]</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修饰参数 返回值</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> $<span class="token string">"This is {name}"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在标记的时候以中括号包裹，可以标记在元素<br>[AttributeUsage(AttributeTargets.All,AllowMultiple =true)]<br>AttributeTargets.Class设置标记的元素 指定修饰对象，建议明确的指定标记的元素</p><h2 id="特性的原理与作用"><a href="#特性的原理与作用" class="headerlink" title="特性的原理与作用"></a>特性的原理与作用</h2><p>Obsolete，Serializable是系统提供的，我们实现不了，这种是特例。<br>特性在代码运行的时候，究竟起什么作用？例如像框架中会有很多特性，是怎么工作的？</p><p>通过反编译工具可以看到：标记了特性的元素，都会在元素内部生成<code>.custom</code>,但是这个c#元素内部不能调用。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/05Attribute/AttributeIL.png" alt="AttributeIL"><br>至此，是不是感觉特性没啥？<br>那么各种框架集里面是如何使用特性？ <strong>反射</strong><br>反射确实可以调用特性，但是需要一个第三方的InvokeCenter,在这里主动去检测并且使用特性，才能提供功能。</p><ol><li>首先，看一下在vipstudent类中的特性的使用情况：</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Cutom</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Remark <span class="token operator">=</span> <span class="token string">".Net学习"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"正在学习特性"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentVip</span> <span class="token punctuation">:</span> Student<span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token function">Cutom</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Remark <span class="token operator">=</span> <span class="token string">".Vip"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"高级会员"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> VipGroup <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">[</span><span class="token function">Cutom</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Remark <span class="token operator">=</span> <span class="token string">".Vip"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"高级会员"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Homework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//.cutom</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Homework"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">[</span><span class="token function">SalaryAttribute</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token keyword">long</span> Salary <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>然后，再看一下具体的特性中是怎么写的？这里主要参考CutomAttribute 这个特性的内容。特性中有方法，字段，还有属性。</p></li><li><p>最后，研究一下，是如何发挥使用特性的？怎么用反射来调用特性中的内容。</p></li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">ManagerSudent<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T student<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> Student<span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">Answer</span><span class="token punctuation">(</span><span class="token string">"YZM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Type type <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>CutomAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先判断</span>  <span class="token punctuation">{</span>    <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aAttributeArry <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>CutomAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span>CutomAttribute attribute <span class="token keyword">in</span> aAttributeArry<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      attribute<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>CutomAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先判断</span>      <span class="token punctuation">{</span>        <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aAttributeArryprop <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>CutomAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span>CutomAttribute attribute <span class="token keyword">in</span> aAttributeArryprop<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          attribute<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> method <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>CutomAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先判断</span>      <span class="token punctuation">{</span>        <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aAttributeArryMethod <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>CutomAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span>CutomAttribute attribute <span class="token keyword">in</span> aAttributeArryMethod<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          attribute<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特性是在编译时确认，因此不能赋一个变量！<br>所以 MVC filter是不能注入的，在core里面才提供了注入了filter的方式</p><h2 id="特性的应用"><a href="#特性的应用" class="headerlink" title="特性的应用"></a>特性的应用</h2><p>第一个例子：通过特性提供额外信息。<br>首先举一个remark的实例,在绑定到界面上的时候，经常用到，例如用户的状态。<br>这里有一个特性，叫做RemarkAttribute，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemarkAttribute</span> <span class="token punctuation">:</span> Attribute    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Remark <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">RemarkAttribute</span><span class="token punctuation">(</span><span class="token keyword">string</span> remark<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Remark <span class="token operator">=</span> remark<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在用户状态中可以这么用特性：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> UserState<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// &lt;summary></span>  <span class="token comment" spellcheck="true">/// 正常状态</span>  <span class="token comment" spellcheck="true">/// &lt;/summary></span>  <span class="token punctuation">[</span><span class="token function">RemarkAttribute</span><span class="token punctuation">(</span><span class="token string">"正常状态"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  Normal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// &lt;summary></span>  <span class="token comment" spellcheck="true">/// 已冻结</span>  <span class="token comment" spellcheck="true">/// &lt;/summary></span>  <span class="token punctuation">[</span><span class="token function">RemarkAttribute</span><span class="token punctuation">(</span><span class="token string">"已冻结"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   Frozen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// &lt;summary></span>  <span class="token comment" spellcheck="true">/// 已删除</span>  <span class="token comment" spellcheck="true">/// &lt;/summary></span>  <span class="token punctuation">[</span><span class="token function">RemarkAttribute</span><span class="token punctuation">(</span><span class="token string">"已删除"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  Deleted <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了获取特性还需要封装一个方法来获取：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AttributeExtend</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">GetRemark</span><span class="token punctuation">(</span><span class="token keyword">this</span> Enum <span class="token keyword">value</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Type type <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个type是UserState</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从UserState这个类中获取字段，更具传进来的名字获取，一般是唯一的，例如这里是Deleted</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>RemarkAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从字段上判断是有特性 true 支持继承</span>    <span class="token punctuation">{</span>      RemarkAttribute attribute <span class="token operator">=</span> <span class="token punctuation">(</span>RemarkAttribute<span class="token punctuation">)</span>field<span class="token punctuation">.</span><span class="token function">GetCustomAttribute</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>RemarkAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取特性RemarkAttribute </span>      <span class="token keyword">return</span> attribute<span class="token punctuation">.</span>Remark<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面就来通过特性获取额外信息</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//特性获取额外的信息</span><span class="token keyword">string</span> remark1 <span class="token operator">=</span> AttributeExtend<span class="token punctuation">.</span><span class="token function">GetRemark</span><span class="token punctuation">(</span>UserState<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> remark2 <span class="token operator">=</span> AttributeExtend<span class="token punctuation">.</span><span class="token function">GetRemark</span><span class="token punctuation">(</span>UserState<span class="token punctuation">.</span>Frozen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> remark3 <span class="token operator">=</span> UserState<span class="token punctuation">.</span>Deleted<span class="token punctuation">.</span><span class="token function">GetRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//扩展方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：这个例子当中，其实特性的作用是提供了一些信息，一些额外的数据。，应用的特点是：</p><ul><li>数据展示——不想展示属性名字，而是一个中文描述；</li><li>想指定那个是主键，哪个是自增；</li><li>别名——数据库里面叫A 程序叫B 怎么映射起来</li></ul><p>第二个例子：通过特性提供额外行为。<br>例如QQ号码有个范围，可以通过特性来做验证。<br>在上面我们已经写了vipStudent这个类，里面有个field叫做QQ,有个属性叫Salary，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">LongAttribute</span><span class="token punctuation">(</span>_Max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> _Min <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">long</span> QQ<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token function">SalaryAttribute</span><span class="token punctuation">(</span><span class="token number">800000</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 公司的预算</span><span class="token keyword">public</span> <span class="token keyword">long</span> Salary <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有两个特性LongAttribute和SalaryAttribute ,他们分别继承自AbstratValidateAttribute，这个特性里面有个抽象方法叫做Validate，让前两个特性去实现验证，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstratValidateAttribute</span> <span class="token punctuation">:</span> Attribute<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">bool</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">object</span> oValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongAttribute</span> <span class="token punctuation">:</span> AbstratValidateAttribute<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> _Max <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> _Min <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">object</span> oValue<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> oValue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> oValue<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Length <span class="token operator">>=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> oValue<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Length <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalaryAttribute</span> <span class="token punctuation">:</span> AbstratValidateAttribute<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">long</span> _Salary <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 公司的预算 800000</span>  <span class="token keyword">public</span> <span class="token function">SalaryAttribute</span><span class="token punctuation">(</span><span class="token keyword">long</span> salary<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    _Salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">object</span> oValue<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> oValue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>oValue<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">long</span> lValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lValue <span class="token operator">&lt;</span> _Salary<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还需要写个泛型的扩展方法，来调用特性的这个验证方法，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token generic-method function">Validate<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> T t<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">class</span><span class="token punctuation">{</span>  Type type <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>AbstratValidateAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里先判断  是为了提高性能</span>    <span class="token punctuation">{</span>      <span class="token keyword">object</span> ovale <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span>AbstratValidateAttribute attribute <span class="token keyword">in</span> prop<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>AbstratValidateAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取特性的实例  上面先判断之后，再获取实例</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>attribute<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>ovale<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> field <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>AbstratValidateAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里先判断  是为了提高性能</span>    <span class="token punctuation">{</span>      <span class="token keyword">object</span> ovale <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span>AbstratValidateAttribute attribute <span class="token keyword">in</span> field<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>AbstratValidateAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取特性的实例  上面先判断之后，再获取实例</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>attribute<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>ovale<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样通过AbstratValidateAttribute可以获取到所有的特性，然后分别去获取属性和字段上的所有特性，依次去执行验证的方法，这就是抽象类的一个应用，分别是实现不同的validate方法。可以通过调用特性<code>student.Validate()</code>来验证。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Attribute </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial Object-Oriented-Programming</title>
      <link href="/2020/01/13/dotnet-advanced-series-1-4-object-oriented-programming/"/>
      <url>/2020/01/13/dotnet-advanced-series-1-4-object-oriented-programming/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><ol><li>封装&amp;继承&amp;多态理解</li><li>重写overwrite(new)  覆写override 重载overload</li><li>抽象类&amp;接口理解和选择</li></ol><h2 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h2><p>下面通过一个经典例子来对比一下面向过程和面向对象的区别：</p><ol><li>面向过程编程（POP, process-oriented programing）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/04ObjectOrientedProgramming/POP.png" alt="POP"></p><p>正常来说，我们思考解决这个问题的思路是：按照步骤来处理这个问题。<br>如何将大象装进冰箱？打开冰箱，把大象放进冰箱，关上冰箱，这是很符合人的常规思路的，这叫做面向过程。<br>但是，这个过程不能太复杂；步骤越多，变化就越多，是无法掌控的。<br> 面向过程：符合常规思维，但是随着业务的复杂度上去了，无法适应业务扩展需求</p><ol start="2"><li>面向对象编程（OOP, object-oriented programming）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/04ObjectOrientedProgramming/OOP.png" alt="OOP"></p><p>万物皆对象，首先定义了三个角色，定义了他们各自的方法。<br>OOP–对象封装，把属性/行为都包裹进去，类似于画格子。<br>格子自成体系，内部随便改动，不会影响到别人。<br>有了面向对象之后，有了一个收纳的概念。<br>一个个类—交互组成功能—系统—平台<br>一块块转—砌墙—房间—大厦</p><p><strong>下面可以从代码层面来理解一下区别：</strong><br>面向过程的写法：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面向对象编程开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"开始游侠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//......</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"正在游戏中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"游戏结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面向过程其实更加符合人的常规思维，不太方便扩展,尤其是项目项目复杂，代码修改会很频繁，很不稳定。</p><p>面向对象的写法：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Player player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每一个对象可以自由扩展自己内部的属性和动作，不用关心其他对象的内部实现<br>只要对外暴露的（开放的）接口不变，对象之前的访问就不影响<br>完全隔离开了,相对安全<br>降低耦合 ，提供代码重用性；</p><h2 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h2><ol><li>封装</li><li>继承</li><li>多态</li></ol><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p><strong>封装</strong>：就是把一部分动作，属性集中的放在一起,可以<strong>隔离</strong>，外部不用关心怎么实现，内部可以随意的扩展；<strong>安全</strong>，private protected 数据结构，只能通过公开的方法访问，而不是随便改改；<strong>降低耦合</strong>，尽量隐藏更多的东西。<br>private protected internal public 作用范围分别是什么？</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承：强继承，子类拥有父类的一切属性和行为，只能单继承，可以<strong>代码重用</strong>。<br>理解三个名词： <strong>重写 覆写 重载</strong><br>下面举一个例子来理解某些概念：<br>首次是一个父类，一个抽象父类，它不能被实例化，只有其子类才能被实例化，因为子类实现了抽象方法。<br>其中还包含了虚方法，虚方法必须包含实现，但是可以被重载。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ParentClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">ParentClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//普通方法</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">CommonMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ParentClass CommonMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// virtual  虚方法  必须包含实现 但是可以被重载</span>  <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">VirtualMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ParentClass VirtualMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">VirtualMethod</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ParentClass VirtualMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 抽象方法在子类是必须实现</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">AbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，有一个子类继承这个父类，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChildClass</span> <span class="token punctuation">:</span> ParentClass<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 实例化子类的时候，是先完成父类的实例化的</span>  <span class="token keyword">public</span> <span class="token function">ChildClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用父类的构造函数</span>  <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// new 隐藏(重写方法)</span>  <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token class-name">void</span> <span class="token function">CommonMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ChildClass CommonMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// base this</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// virtual 可以被覆写</span>  <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">VirtualMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ChildClass VirtualMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VirtualMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用父类的方法</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 抽象方法必须覆写</span>  <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">AbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ChildClass AbstractMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于此，判断下面的输出，分别执行了父类的方法还是子类的方法？</p><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"下面是instance.CommonMethod()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">CommonMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类new隐藏 执行父类方法 ，普通方法执行是由编译时决定，提高效率</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"下面是instance.VirtualMethod()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">VirtualMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类覆写的虚方法 执行子类方法 虚方法是由运行时决定</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"下面是instance.AbstractMethod()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">AbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子类实现的抽象方法， 执行子类方法，抽象方法由运行时决定--多态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，还有一个关键字，sealed，如果加上了密封，那么虚方法或者抽象方法就不能再被重写，以上面子类的AbstractMethod为例：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">VirtualMethod</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ParentClass VirtualMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重载方法就是方法名字一样，参数不一样，和返回值没关系。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><strong>多态：</strong>一个类可以用多个类型，就是多态<br>运行时的多态，编译时多态。<br>例如方法重载，就是编译时多态；抽象和虚方法只有在运行时才知道，就是运行时多态。<br>接口多态，继承多态。</p><p>接口抽象类：<br>子类都有这个方法，但是又各不相同。抽象方法：约束下有这个方法，但是又各不相同。</p><ul><li>抽象类：是一个父类+约束，不同的实现用抽象方法表达；单继承</li><li>接口：就是一个约束，只有多态变化；多实现</li><li>抽象类的出发点应该是代码重用，是为了当父类 is a；</li><li>接口纯粹是为了约束，告诉别人一定要有什么功能  can do;</li><li><em>经验*</em>：如果需要约束，一般选择接口，除非代码需要重用。</li></ul><p><strong>接口里面都可以写哪些成员</strong>：方法可以，属性可以，字段不可以，委托不可以，事件可以，索引器可以。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IExtend</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">PlayGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//string Remark;字段不行</span>  <span class="token comment" spellcheck="true">//delegate void Show();  委托不行</span>  <span class="token keyword">event</span> Action DoNothing<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 索引器可以</span>  <span class="token keyword">int</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">int</span> i<span class="token punctuation">]</span>  <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类和接口，如何选择？"><a href="#抽象类和接口，如何选择？" class="headerlink" title="抽象类和接口，如何选择？"></a>抽象类和接口，如何选择？</h3><h4 id="什么是接口？"><a href="#什么是接口？" class="headerlink" title="什么是接口？"></a>什么是<strong>接口</strong>？</h4><p>接口是包含一组虚方法的抽象类型，其中每一种方法都有其名称、参数和返回值。</p><p>接口方法不能包含任何实现，CLR允许接口可以包含事件、属性、索引器、静态方法、静态字段、静态构造函数以及常数。但是注意：C#中不能包含任何静态成员。</p><p>一个类可以实现多个接口，当一个类继承某个接口时，它不仅要实现该接口定义的所有方法，还要实现该接口从其他接口中继承的所有方法。</p><h4 id="什么是抽象类？"><a href="#什么是抽象类？" class="headerlink" title="什么是抽象类？"></a>什么是<strong>抽象类</strong>？</h4><p>抽象类提供多个派生类共享基类的公共定义，它既可以提供抽象方法，也可以提供非抽象方法。抽象类不能实例化，必须通过继承由派生类实现其抽象方法，因此对抽象类不能使用new关键字，也不能被密封。如果派生类没有实现所有的抽象方法，则该派生类也必须声明为抽象类。另外，实现抽象方法由overriding方法来实现。</p><h4 id="抽象类和接口的相同点与不同点"><a href="#抽象类和接口的相同点与不同点" class="headerlink" title="抽象类和接口的相同点与不同点"></a>抽象类和接口的相同点与不同点</h4><p><strong>相同点</strong></p><ol><li>都不能被直接实例化，都可以通过继承实现其抽象方法。</li><li>都是面向抽象编程的技术基础，实现了诸多的设计模式。</li></ol><p><strong>不同点</strong></p><ol><li>接口支持多继承；抽象类不能实现多继承。</li><li>接口只能定义抽象规则；抽象类既可以定义规则，还可能提供已实现的成员。</li><li>接口是一组行为规范；抽象类是一个不完全的类，着重族的概念。</li><li>接口可以用于支持回调；抽象类不能实现回调，因为继承不支持。</li><li>接口只包含方法、属性、索引器、事件的签名，但不能定义字段和包含实现的方法；抽象类可以定义字段、属性、包含有实现的方法。 </li><li>接口可以作用于值类型和引用类型；抽象类只能作用于引用类型。例如，Struct就可以继承接口，而不能继承类。</li></ol><h4 id="规则与场合"><a href="#规则与场合" class="headerlink" title="规则与场合"></a>规则与场合</h4><ol><li>请记住，面向对象思想的一个最重要的原则就是：<strong>面向接口编程</strong>。</li><li>借助接口和抽象类，23个设计模式中的很多思想被巧妙的实现了，我认为其精髓简单说来就是：面向抽象编程。</li><li>抽象类应主要用于关系密切的对象，而接口最适合为不相关的类提供通用功能。</li><li>接口着重于CAN-DO关系类型，而抽象类则偏重于IS-A式的关系；</li><li>接口多定义对象的行为；抽象类多定义对象的属性；</li><li>接口定义可以使用public、protected、internal 和private修饰符，但是几乎所有的接口都定义为public，原因就不必多说了。</li><li>在接口中，所有的方法都默认为public。</li><li>“接口不变”，是应该考虑的重要因素。所以，在由接口增加扩展时，应该增加新的接口，而不能更改现有接口。</li><li>尽量将接口设计成功能单一的功能块，以.NET Framework为例，IDisposable、IDisposable、IComparable、IEquatable、IEnumerable等都只包含一个公共方法。</li><li>接口名称前面的大写字母“I”是一个约定，正如字段名以下划线开头一样，请坚持这些原则。</li><li>如果预计会出现版本问题，可以创建“抽象类”。例如，创建了狗（Dog）、鸡（Chicken）和鸭（Duck），那么应该考虑抽象出动物（Animal）来应对以后可能出现风马牛的事情。而向接口中添加新成员则会强制要求修改所有派生类，并重新编译，所以版本式的问题最好以抽象类来实现。</li><li>从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实实现。</li><li>对抽象类不能使用new关键字，也不能被密封，原因是抽象类不能被实例化。</li><li>在抽象方法声明中不能使用 static 或 virtual 修饰符。</li></ol><h4 id="MSDN的几个建议："><a href="#MSDN的几个建议：" class="headerlink" title="MSDN的几个建议："></a>MSDN的几个建议：</h4><ol><li><strong>如果预计要创建组件的多个版本，则创建抽象类</strong>。抽象类提供简单易行的方法来控制组件版本。通过更新基类，所有继承类都随更改自动更新。另一方面，接口一旦创建就不能更改。如果需要接口的新版本，必须创建一个全新的接口。</li><li><strong>如果创建的功能将在大范围的全异对象间使用，则使用接口。抽象类应主要用于关系密切的对象，而接口最适合为不相关的类提供通用功能。</strong></li><li><strong>如果要设计小而简练的功能块，则使用接口。如果要设计大的功能单元，则使用抽象类</strong>。</li><li><strong>如果要在组件的所有实现间提供通用的已实现功能，则使用抽象类</strong>。抽象类允许部分实现类，而接口不包含任何成员的实现。</li></ol><h4 id="经典示例"><a href="#经典示例" class="headerlink" title="经典示例"></a>经典示例</h4><p>.NET Framework中关于接口和抽象类的使用：<br><strong>集合类**</strong>使用了基于<strong><strong>接口</strong></strong>的设计<strong>，请关注System.Collections中关于接口的设计实现；<br><strong>数据流</strong></strong>相关类使用了基于<strong><strong>抽象类</strong></strong>的设计**，请关注System.IO.Stream类的抽象类设计机制。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> OOP </tag>
            
            <tag> POP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-3-Generic-and-Reflection-Practice</title>
      <link href="/2020/01/13/dotnet-advanced-series-1-3-generic-and-reflection-practice/"/>
      <url>/2020/01/13/dotnet-advanced-series-1-3-generic-and-reflection-practice/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-2-Reflection</title>
      <link href="/2020/01/08/dotnet-advanced-series-1-2-reflection/"/>
      <url>/2020/01/08/dotnet-advanced-series-1-2-reflection/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><p>1 反射调用实例方法、静态方法、重载方法 选修:调用私有方法 调用泛型方法<br>2 反射字段和属性，分别获取值和设置值<br>3 反射的好处和局限</p><p>反射反射 程序员的快乐。<br>反射无处不在，MVC ASP.Net ORM IOC AOP几乎所有的框架都离不开反射。</p><h2 id="反编译工具-ILSpy"><a href="#反编译工具-ILSpy" class="headerlink" title="反编译工具 ILSpy"></a>反编译工具 ILSpy</h2><ol><li>反编译工具不是用的反射，是一个逆向工程</li><li>IL （中间语言）也是一种面向对象的语言，C#语言的对比，不太好阅读和编写<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/02Reflection/IL.png" alt="IL Language"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://netimprovingseries-1257411902.cos.ap-shanghai.myqcloud.com/02Reflection/CompilingPrinciple.png" alt="CompilingPrinciple"><br>编译过程如图，高级语言转换成中间语言，再到机器语言。<br>metadata:元数据, 数据清单，只是描述了类中有什么. CLR会读metadata。</li></ol><h2 id="反射的过程"><a href="#反射的过程" class="headerlink" title="反射的过程"></a>反射的过程</h2><p>反射：Reflection, System.Reflection命名空间，是微软.Net Framework提供的一个帮助类库，可以读取并使用metadata</p><p>下面看一个具体的例子：</p><ol><li>正常使用数据库查询的三部曲：</li></ol><ul><li>添加引用</li><li>创建对象</li><li>调用方法</li></ul><p>具体的示例代码如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">IDBHelper dBHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlServerHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IDBHelper dBHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySqlHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dBHelper<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种写法的主要问题是：如果MySqlHelper这个具体实现类发生变化，例如操作数据库使用SQL Server，就需要修改代码。<br>2. 再看一下反射的具体步骤：</p><ul><li>动态加载</li><li>获取类型</li><li>创建对象</li><li>类型转换</li><li>调用方法</li></ul><p>代码实现如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 1、动态加载</span>Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// dll名称  默认到当前目录下查找</span><span class="token comment" spellcheck="true">// 2、获取类型</span>Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.SqlServerHelper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3、创建对象</span><span class="token keyword">object</span> oDbHelper <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// oDbHelper.Query();// 为什么不能直接用query  编译器就不认可  c# 是强类型语言，不能Query </span><span class="token keyword">dynamic</span> dDbHelper <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>dDbHelper<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//dynamic 是一个动态类型，可以避开编译器的检查，运行时检查  存在安全问题 </span><span class="token comment" spellcheck="true">// 4、类型转换</span>IDBHelper iDBHelper <span class="token operator">=</span> oDbHelper <span class="token keyword">as</span> IDBHelper<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不报错 类型不对就返回null</span><span class="token comment" spellcheck="true">//5、调用方法</span>iDBHelper<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，动态加载呢又有好几种方法，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// dll名称  默认到当前目录下查找</span>Assembly assembly1 <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFile</span><span class="token punctuation">(</span><span class="token string">@"D:\软谋教育\Ruanmou\Advanced13Encrypt\20191010Advanced13Course3Reflection\20191010Advanced13Course3Reflection\MyReflection\MyReflection\bin\Debug\Ruanmou.DB.SqlServer.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 全名称= 全路径+dll名称 + 后缀</span>Assembly assembly2 <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 全名称</span>Assembly assembly3 <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span><span class="token string">@"D:\软谋教育\Ruanmou\Advanced13Encrypt\20191010Advanced13Course3Reflection\20191010Advanced13Course3Reflection\MyReflection\MyReflection\bin\Debug\Ruanmou.DB.SqlServer.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 全名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们获取到类型type之后，就可以遍历去获取metadata了。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">foreach</span> <span class="token punctuation">(</span>Type type <span class="token keyword">in</span> assembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span>MethodInfo method <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>封装<br>至此，我们可以封装一下反射的这个过程，通过 <strong>Factory +  config</strong> 代码可以不用编译发布。</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//封装</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimlpFactory</span><span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">string</span> IDBHelperConfig <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"IDBHelperConfig"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">string</span> DllName <span class="token operator">=</span> IDBHelperConfig<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">string</span> TypeName <span class="token operator">=</span> IDBHelperConfig<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> IDBHelper <span class="token function">CreateInstentce</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>DllName<span class="token punctuation">)</span><span class="token punctuation">;</span>    Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>TypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">object</span> oDbHelper <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> oDbHelper <span class="token keyword">as</span> IDBHelper<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span>IDBHelper iDBHelper <span class="token operator">=</span> SimlpFactory<span class="token punctuation">.</span><span class="token function">CreateInstentce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iDBHelper<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，如果需要换成别的数据库实现，我们只需要修改配置文件就可以了，不需要修改代码：</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IDBHelperConfig<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Ruanmou.DB.Orcale.OrcaleHelper,Ruanmou.DB.Orcale<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个封装的过程体现了程序的两大特性：</p><ul><li><p>程序的可配置<br>实现类必须是事先已有的，而且在目录下面<br>没有写死类型，而是通过配置文件执行，反射创建的</p></li><li><p>程序的可扩展<br>完全不修改原有代码，只是增加新的实现，copy，修改配置文件，就可以支持新功能<br>反射的动态加载和动态创建对象，以及配置文件的结合</p></li></ul><ol start="4"><li>反射的多构造函数用法<br>对于有多个构造函数的类，可以在创建实例的时候，指定使用哪个构造函数，如下：</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">object</span> oDbHelper <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认无参构造函数</span><span class="token keyword">object</span> oDbHelper1 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"杰克"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oDbHelper2 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"我是谁"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oDbHelper3 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数是int的构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以获取不同的构造函数，构造函数里面的参数等。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">foreach</span> <span class="token punctuation">(</span>ConstructorInfo item <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> parameter <span class="token keyword">in</span> item<span class="token punctuation">.</span><span class="token function">GetParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span>ParameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射破坏单例"><a href="#反射破坏单例" class="headerlink" title="反射破坏单例"></a>反射破坏单例</h2><p><strong>单例模式：类，能保证在整个进程中只有一个实例。</strong><br>怎么实现？<br>构造函数私有化，别人就无法调用。<br>对外公开一个静态方法，在这个方法里面去获得实例。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton _Singleton <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态实例</span>  <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//构造函数私有化</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Singleton被构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//静态构造函数，第一次调用这个类之前就初始化，只初始化一次</span>  <span class="token punctuation">{</span>    _Singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> _Singleton<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以发现，不管怎么实例化，得到的都是同一个实例化的类：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Singleton singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Singleton singleton1 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Singleton singleton2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Singleton singleton3 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Singleton singleton4 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>singleton1<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>singleton4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到的是相同的对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看下反射是怎么破坏单例的？</p><pre class="line-numbers language-csharp"><code class="language-csharp">Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.Singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个true 就表示 nonPublic，可以调用私有方法，这样就可以被多次实例化</span><span class="token keyword">object</span> oSingleton1 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//完全等价于 New Singleton</span><span class="token keyword">object</span> oSingleton2 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oSingleton3 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oSingleton4 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>oSingleton1<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>oSingleton4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//完全</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型在反射中的实例化"><a href="#泛型在反射中的实例化" class="headerlink" title="泛型在反射中的实例化"></a>泛型在反射中的实例化</h2><p>首先有一个泛型类，如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> W<span class="token punctuation">,</span> X<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> W w<span class="token punctuation">,</span> X x<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"t.type={0},w.type={1},x.type={2}"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> w<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看看这个泛型类在反射中怎么被调用？</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//泛型编译之后生成展位符  `1   `2    `3</span>GenericMethod genericMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>genericMethod<span class="token punctuation">.</span><span class="token generic-method function">Show<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type typeNull <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.GenericClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样找，type是null,要有占位符</span>Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.GenericClass`3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取一个泛型类型 </span><span class="token comment" spellcheck="true">//实例化需要指定类型</span>Type type1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">MakeGenericType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oGenericTest <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射中调用方法"><a href="#反射中调用方法" class="headerlink" title="反射中调用方法"></a>反射中调用方法</h2><p>首先在被反射的类中有如下这些方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show1"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show2</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show2"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show3</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//重载方法1</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show3"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show3</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//重载方法2</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show3_2"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show3</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//重载方法3</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show3_3"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show3</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//重载方法4</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show3_4"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//重载方法5</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show3_1"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Show4</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//私有方法</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show4"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Show5</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//静态方法</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这里是{0}的Show5"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>ReflectionTest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么在反射中怎么去调用呢？<br>反射创建实例，根据方法名称，反射调用方法。<br>dll名称——类名称——方法名称，调用方法。<br>MVC就是靠这一招，调用Action。<br><strong>例如</strong> </p><ol><li><a href="http://localhost:9999/home/index" target="_blank" rel="noopener">http://localhost:9999/home/index</a> 经过解析会调用HomeController类中Index方法。<br>浏览器输入时只告诉了服务器类名称和方法名称，肯定是反射。MVC在启动时会先加载，扫描全部的dll,找到全部的Controller存起来，用controller来匹配，dll+类型名称。<br>思考一下：MVC的局限性，如果Action重载，那么反射就无法区分方法。只能通过Httpget HttpPost等特性来区分。</li><li>AOP  反射调用方法时可以在前后插入逻辑。</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp">Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.ReflectionTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oTest <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得实例</span><span class="token comment" spellcheck="true">// 反射调用方法</span>MethodInfo show1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oTest<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 反射调用方法 ,需要参数的时候，参数类型必须和方法参数类型保持一致</span>MethodInfo show2 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show2<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oTest<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 反射调用重载方法:</span>MethodInfo show3 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show3"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show3<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oTest<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"飞哥"</span><span class="token punctuation">,</span> <span class="token number">134</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 反射调用私有方法 </span>MethodInfo show4 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show4"</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>NonPublic <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>CreateInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>show4<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oTest<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"Tenk"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 反射调用静态方法： 对象的实例oTest  可以传入，也可以传入null</span>MethodInfo show5 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show5<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oTest<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"彭于晏"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show5<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"Korey"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>反射中调用泛型方法：</strong><br>首先有如下两个类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericMethod</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token generic-method function">Show<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> W<span class="token punctuation">,</span> X<span class="token punctuation">></span></span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> W w<span class="token punctuation">,</span> X x<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"t.type={0},w.type={1},x.type={2}"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> w<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> W<span class="token punctuation">,</span> X<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> W w<span class="token punctuation">,</span> X x<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"t.type={0},w.type={1},x.type={2}"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> w<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通类中调用泛型方法：<br>泛型方法没有占位符，在泛型类，接口中才有占位符。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.GenericMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oTest <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>MethodInfo genericMethod <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MethodInfo genericMethod1 <span class="token operator">=</span> genericMethod<span class="token punctuation">.</span><span class="token function">MakeGenericMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定泛型方法的  具体参数 </span>genericMethod1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oTest<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"jun"</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入参数必须和声明的一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型类中调用泛型方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.GenericClass`3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取一个泛型类型                                                                                       </span>Type type1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">MakeGenericType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oGenericTest <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type1<span class="token punctuation">)</span><span class="token punctuation">;</span>MethodInfo genericMethod <span class="token operator">=</span> type1<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>genericMethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oGenericTest<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"子玉"</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要和T W X的顺序保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射中使用属性和字段"><a href="#反射中使用属性和字段" class="headerlink" title="反射中使用属性和字段"></a>反射中使用属性和字段</h2><p>首先，有一个实体类People:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}被创建"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Description<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常使用的写法，这里不再赘述。<br>反射中使用这种实体类，首先没有必要去加载dll了，因为实体类变了的话，代码肯定是要重构的了。因此直接引用：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Type type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">object</span> oPeople <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用属性</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span>PropertyInfo prop <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    prop<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>oPeople<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    prop<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>oPeople<span class="token punctuation">,</span> <span class="token string">"风之林"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改属性</span>  <span class="token punctuation">}</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"oPeople.{prop.Name}={prop.GetValue(oPeople)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取值</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用字段</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span>FieldInfo field <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Description"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    field<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>oPeople<span class="token punctuation">,</span> <span class="token string">".Net learner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Get 反射展示是有意义的，反射遍历，可以不用改代码</li><li>Set 感觉没啥用，但是实际还是有用的，下面通过一个数据库操作实例来体会这个作用。</li></ul><p><strong>数据库操作实例中应用反射</strong><br>首先有几个实体类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseModel</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">:</span> BaseModel<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> System<span class="token punctuation">.</span>DateTime CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> CreatorId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token operator">?</span> LastModifierId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> DateTime<span class="token operator">?</span> LastModifyTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> BaseModel<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Account <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Password <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Email <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Mobile <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> CompanyId <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在数据库帮助类中有：<br>这里只查询了Company,思考怎么用一个方法满足多个类型的需求？</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> Company <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">string</span> sql <span class="token operator">=</span> <span class="token string">@"SELECT   [Id]         ,[Name]         ,[CreateTime]         ,[CreatorId]         ,[LastModifierId]         ,[LastModifyTime]         FROM [SystemDB].[dbo].[Company] where Id="</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>  Type type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>Company<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">object</span> oCompany <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span>SqlConnection connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlConnection</span><span class="token punctuation">(</span>Customers<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    SqlCommand sqlCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlDataReader reader <span class="token operator">=</span> sqlCommand<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开始读取</span>    <span class="token punctuation">{</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        prop<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>oCompany<span class="token punctuation">,</span> reader<span class="token punctuation">[</span>prop<span class="token punctuation">.</span>Name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//if (prop.Name.Equals("Id"))</span>        <span class="token comment" spellcheck="true">//{</span>        <span class="token comment" spellcheck="true">//    prop.SetValue(oCompany, reader[prop.Name]);</span>        <span class="token comment" spellcheck="true">//}</span>        <span class="token comment" spellcheck="true">//else if (prop.Name.Equals("Name"))</span>        <span class="token comment" spellcheck="true">//{</span>        <span class="token comment" spellcheck="true">//    prop.SetValue(oCompany, reader[prop.Name]);</span>        <span class="token comment" spellcheck="true">//} </span>       <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//Console.WriteLine(reader["Id"]);</span>      <span class="token comment" spellcheck="true">//Console.WriteLine(reader["Name"]); </span>      <span class="token comment" spellcheck="true">//return new Company() { Id =(int)reader["Id"] };</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>Company<span class="token punctuation">)</span>oCompany<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面写一个泛型方法来实现上面的Find功能，支持多种类型的查询：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> T <span class="token generic-method function">Find<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> BaseModel<span class="token punctuation">{</span>  Type type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">object</span> oObject <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有可能是user 有可能是company</span>  <span class="token comment" spellcheck="true">//List&lt;string> </span>  <span class="token keyword">var</span> propNames <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">></span> $<span class="token string">"[{a.Name}]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">string</span> props <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> propNames<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">string</span> sql <span class="token operator">=</span> $<span class="token string">"SELECT {props } FROM [{type.Name}] where Id={id}"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成sql语句</span>  <span class="token keyword">using</span> <span class="token punctuation">(</span>SqlConnection connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlConnection</span><span class="token punctuation">(</span>Customers<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    SqlCommand sqlCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlDataReader reader <span class="token operator">=</span> sqlCommand<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开始读取</span>    <span class="token punctuation">{</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        prop<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>oObject<span class="token punctuation">,</span> reader<span class="token punctuation">[</span>prop<span class="token punctuation">.</span>Name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>oObject<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有几个注意点：</p><ul><li><code>$"SELECT {props } FROM [{type.Name}] where Id={id}</code>这里面的[]可以避免因为关键字产生的错误</li><li>propNames 是一个list,然后用<code>string.Join(",", propNames)</code>拼接成一个字符串</li></ul><h2 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点"></a>反射的优缺点</h2><p><strong>优点</strong> ：反射是动态，支持良好的扩展性</p><ul><li>减少对象和对象之间的依赖，只需要知道类名(字符串)、方法名(字符串)，就可以调用</li><li>还可以突破特定权限，可以做到普通方式无法做到的</li></ul><p><strong>缺点</strong> </p><ul><li>使用麻烦，编写比较困难，代码量大，可以封装一下</li><li>避开编译器检查，编写的时候容易出错</li><li>性能问题 性能损耗大</li></ul><p>下面用一个实例来验证一下性能：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"*******************Monitor*******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> commonTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> reflectionTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span>    Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 1_000_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      IDBHelper iDBHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlServerHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iDBHelper<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commonTime <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">{</span>    Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//缓存</span>    Assembly assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 动态加载</span>    Type dbHelperType <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Ruanmou.DB.SqlServer.SqlServerHelper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2 获取类型 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 1_000_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//Assembly assembly = Assembly.Load("Ruanmou.DB.SqlServer");//1 动态加载</span>      <span class="token comment" spellcheck="true">//Type dbHelperType = assembly.GetType("Ruanmou.DB.SqlServer.SqlServerHelper");//2 获取类型</span>      <span class="token keyword">object</span> oDBHelper <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>dbHelperType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3 创建对象</span>      IDBHelper dbHelper <span class="token operator">=</span> <span class="token punctuation">(</span>IDBHelper<span class="token punctuation">)</span>oDBHelper<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4 接口强制转换</span>      dbHelper<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5 方法调用</span>    <span class="token punctuation">}</span>    watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reflectionTime <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"commonTime={0} reflectionTime={1}"</span><span class="token punctuation">,</span> commonTime<span class="token punctuation">,</span> reflectionTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>经过测试：</strong> 发现反射确实性能损耗比较大 普通方式：140, 反射：34860，确实让人无法接受，经过缓存优化之后发现，普通方式：65   反射：628，对于性能损耗，要理性看待，因为执行的数量巨大，中间的这些性能损耗是可以忽略不计。<br><strong>缓存优化，把dll加载和类型获取，只执行一次。</strong><br><strong>MVC, Asp.Net ORM IOC AOP都在用反射，几乎都有缓存 ！</strong><br>MVC ORM启动很慢是因为完成了很多初始化，反射的那些东西。后面运行就会很快了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Covariant </tag>
            
            <tag> Contravariant </tag>
            
            <tag> Reflection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Advanced Tutorial 1-1 Generic</title>
      <link href="/2020/01/04/dotnet-advanced-series-1-1-generic/"/>
      <url>/2020/01/04/dotnet-advanced-series-1-1-generic/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容概要"><a href="#主要内容概要" class="headerlink" title="主要内容概要"></a>主要内容概要</h2><ul><li>引入泛型:延迟声明</li><li>如何声明和使用泛型</li><li>泛型的好处和原理</li><li>泛型类、泛型方法、泛型接口、泛型委托</li><li>泛型约束</li><li>协变 逆变(选修)</li><li>泛型缓存(选修)</li></ul><h2 id="为什么要有泛型"><a href="#为什么要有泛型" class="headerlink" title="为什么要有泛型"></a>为什么要有泛型</h2><p>很常见的比如List<int>, List<string>可以用List<t>来表示。<br>List<string>就是泛型，为什么要有泛型？<br>List<string>是一个集合，可能是一组int  也可能是一组string。<br>泛型就是用一个东西来满足多种不同类型的需求的。<br>下面举一个例子来说明一下，为何泛型会被引入。<br>在CommonMethod里面有三个方法，分别打印三种不同的类型，如下：</string></string></t></string></int></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonMethod</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 打印个int值 </span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> iParameter<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>       <span class="token keyword">typeof</span><span class="token punctuation">(</span>CommonMethod<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> iParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> iparameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//打印个string值</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowString</span><span class="token punctuation">(</span><span class="token keyword">string</span> sParameter<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>      <span class="token keyword">typeof</span><span class="token punctuation">(</span>CommonMethod<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> sParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> sParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//打印个DateTime值</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowDateTime</span><span class="token punctuation">(</span>DateTime dtParameter<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>      <span class="token keyword">typeof</span><span class="token punctuation">(</span>CommonMethod<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> dtParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> dtParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么在program中我们就可以这么来调用这三种方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> iValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">string</span> sValue <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span>DateTime dtValue <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span><span class="token keyword">object</span> oValue <span class="token operator">=</span> <span class="token string">"789"</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token function">ShowInt</span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token function">ShowString</span><span class="token punctuation">(</span>sValue<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token function">ShowDateTime</span><span class="token punctuation">(</span>dtValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个写法是不是感觉有点啰嗦呢，三个方法其实只有传入的参数不一样而已。此时，我们可能会考虑在common中这么来写一个函数，将object对象作为传入参数：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowObject</span><span class="token punctuation">(</span><span class="token keyword">object</span> oParameter<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>        <span class="token keyword">typeof</span><span class="token punctuation">(</span>CommonMethod<span class="token punctuation">)</span><span class="token punctuation">,</span> oParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> oParameter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在program中可以这么来调用：</p><pre class="line-numbers language-csharp"><code class="language-csharp">CommonMethod<span class="token punctuation">.</span><span class="token function">ShowObject</span><span class="token punctuation">(</span>oValue<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token function">ShowObject</span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token function">ShowObject</span><span class="token punctuation">(</span>sValue<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token function">ShowObject</span><span class="token punctuation">(</span>dtValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么用object 作为参数类型，调用的时候，可以把任何类型都传进来？</strong></p><ul><li>C#: 任何父类出现的地方，都可以用子类代替 </li><li>Object类型是一切类型的父类；</li></ul><p>这里使用object会有两个问题: </p><ul><li>第一是装箱拆箱，传入一个int值（栈）<br>object又在堆里面，如果把int传递进来，就会把值从栈里面copy到堆里，使用的时候，又需要用对象值，又会copy到栈(拆箱)；</li><li>类型安全问题，可能会有，因为传递的对象是没有限制的；</li></ul><h2 id="泛型简介"><a href="#泛型简介" class="headerlink" title="泛型简介"></a>泛型简介</h2><p>泛型（generic）是C#语言2.0和通用语言运行时(CLR)的一个新特性。泛型为.Net框架引入了类型参数（type parameters）的概念。类型阐述是的设计类和方法时，不必确定一个或多个具体参数，其具体参数可以延迟到客户代码中声明、实现。这意味着使用泛型的类型参数T,写一个类MyList<t>，客户代码可以这样调用，MyList<int>,MyList<string>或MyList<class>。这避免了运行时类型转换或装箱操作的代价和风险。</class></string></int></t></p><p>*<em>泛型只有：泛型方法、泛型类、泛型接口、泛型委托 *</em><br>泛型方法调用的时候，需要加上&lt;&gt;,而且需要指定具体的类型、指定的类型和传入的参数类型保持一致。<br>定义一个泛型方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">Show<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span>S<span class="token punctuation">,</span>ZCQ<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>    <span class="token keyword">typeof</span><span class="token punctuation">(</span>CommonMethod<span class="token punctuation">)</span><span class="token punctuation">,</span> tParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> tParameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后调用泛型方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp">CommonMethod<span class="token punctuation">.</span><span class="token generic-method function">Show<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果类型参数，可以通过参数类型推导出来，那么就可以省略,VS中会变灰</span><span class="token comment" spellcheck="true">// 下面的例子中类型错了 </span><span class="token comment" spellcheck="true">//CommonMethod.Show&lt;int>(sValue);</span>CommonMethod<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>sValue<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token generic-method function">Show<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">></span></span><span class="token punctuation">(</span>dtValue<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonMethod<span class="token punctuation">.</span><span class="token generic-method function">Show<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>oValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考一下，为什么泛型可以支持不同类型的参数？</strong><br>声明一般方法时，指定了参数类型，确定了只能传递某个类型；<br>泛型声明方法时，并没有写死类型，是什么类型，不知道；<br>只有在调用的时候才指定；<br>泛型这里的设计思想是<strong>延迟声明</strong>，这是架构设计推崇的思想：<strong>推迟一切可以推迟的</strong>！</p><h2 id="泛型原理"><a href="#泛型原理" class="headerlink" title="泛型原理"></a>泛型原理</h2><p>编译器编译（例如VS）,得到一些dll exe这种文件，这些文件要运行需要CLR/JIT进行转换（这个CLR是个环境），这个CLR会把中间语言转换成机器语言。<br>那么，泛型在编译时究竟编译成什么呢？<br>机器码的时候，类型必须是确定的，因为要分配内存；<br>编译时确实不知道是什么类型。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://netimproving.zhengchaoqiang.com/01generic/CompilingPrinciple.png" alt="CompilingPrinciple"></p><p>那么泛型在编译时，延迟声明究竟是怎么实现的呢？</p><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Dictionary<span class="token operator">&lt;</span><span class="token punctuation">,</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的输出结果如下:<br>System.Collections.Generic.List<code>1[T]System.Collections.Generic.Dictionary</code>2[TKey,TValue]</p><p>通过结果可以发现，<strong>所谓延迟声明实际上是通过占位符来实现的。</strong><br>泛型是.NetFramework2.0出来<br>包含了以下升级：</p><ul><li>编译器升级，能够支持类型参数，用占位符来表达<br>  `1、`2来表示</li><li>CLR升级才能支持占位符<br>  运行的时候，类型会确定，会把占位符给替换成具体的类型</li><li><em>泛型不是语法糖*</em> (语法糖是指编译器提供的便捷功能，例如 var i=2,编译器可以推断出来是int类型。)</li></ul><h2 id="泛型性能"><a href="#泛型性能" class="headerlink" title="泛型性能"></a>泛型性能</h2><p>下面比较一下泛型方法，object方法以及一般方法的性能：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Monitor</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"****************Monitor******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> iValue <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> commonSecond <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> objectSecond <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> genericSecond <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>       Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>         <span class="token function">ShowInt</span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       commonSecond <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token punctuation">{</span>       Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>         <span class="token function">ShowObject</span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       objectSecond <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">{</span>        Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100_000_000<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token generic-method function">Show<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>iValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      genericSecond <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"commonSecond={0},objectSecond={1},genericSecond={2}"</span>        <span class="token punctuation">,</span> commonSecond<span class="token punctuation">,</span> objectSecond<span class="token punctuation">,</span> genericSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token preprocessor property">#<span class="token directive keyword">region</span> PrivateMethod</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> iParameter<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//do nothing</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowObject</span><span class="token punctuation">(</span><span class="token keyword">object</span> oParameter<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//do nothing</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">Show<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//do nothing</span>  <span class="token punctuation">}</span>  <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的结果是:<code>commonSecond=363,objectSecond=696,genericSecond=362</code><br>可以发现泛型方法的性能和普通方法的性能是一致的，在一个数量级上，而object需要在内存中装箱，因此消耗的时间比较多。</p><h2 id="泛型缓存"><a href="#泛型缓存" class="headerlink" title="泛型缓存"></a>泛型缓存</h2><ul><li><p><strong>字典缓存</strong><br>字典缓存：静态属性常驻内存</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DictionaryCache</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> Dictionary<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> _TypeTimeDictionary <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token function">DictionaryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is DictionaryCache 静态构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _TypeTimeDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token generic-method function">GetCache<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Type type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_TypeTimeDictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    _TypeTimeDictionary<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}_{1}"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">,</span>           DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss.fff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> _TypeTimeDictionary<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>泛型缓存<br>会根据传入的不同类型，分别生成不同的副本。虽然是静态字段，但是遇到泛型类，也是不同的。<br>可以接受任何类型，需要根据不同类型缓存一部分数据就可以使用，效率更好。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericCache</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token function">GenericCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is GenericCache 静态构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _TypeTime <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}_{1}"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss.fff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">string</span> _TypeTime <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> _TypeTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>验证一下：第一次调用int string long等类型的时候会产生一个类，第二次的时候就不会进入构造函数了，这样就达到了类型缓存的目的。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericCacheTest</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span>DateTime<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>GenericCache<span class="token operator">&lt;</span>GenericCacheTest<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">GetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型缓存比字典缓存效率要高，字典缓存要用哈希，转换效率低。但是这种泛型缓存只能是为某一个类型进行缓存，有一定的局限性。</p><h2 id="泛型的应用"><a href="#泛型的应用" class="headerlink" title="泛型的应用"></a>泛型的应用</h2><ol><li><strong>泛型方法</strong><br>泛型方法：为了一个方法满足不同的类型的需求</li></ol><ul><li>一个方法完成多实体的查询</li><li>一个方法完成不同的类型的数据展示</li><li>任意一个实体，转换成一个Json字符串</li></ul><ol start="2"><li><p><strong>泛型类</strong><br>泛型类：一个类型，满足不同类型的需求；List Dictionary</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>泛型接口</strong><br>泛型接口：一个接口满足不同类型的需求</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GenericInterface</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>泛型委托</strong><br>泛型委托：就是一个委托 满足多个多个类型的需求</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token generic-method function">Do<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>泛型类、接口的继承</strong>，也要遵从相应的规则，例如：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChildClass</span><span class="token operator">&lt;</span>S<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">:</span> GenericClass<span class="token operator">/</span><span class="token operator">&lt;</span>S<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> GenericInterface<span class="token operator">&lt;</span>T<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>先看一个例子用object有什么样的弊端？任何类型都能传递进来可能不安全。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowObject</span><span class="token punctuation">(</span><span class="token keyword">object</span> oParameter<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Console.WriteLine(oParameter.Id);// 编译器就报错，因为C# 是强类型的语言，在编译的时候就要确定类型</span>  People people <span class="token operator">=</span> <span class="token punctuation">(</span>People<span class="token punctuation">)</span>oParameter<span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>    <span class="token keyword">typeof</span><span class="token punctuation">(</span>CommonMethod<span class="token punctuation">)</span><span class="token punctuation">,</span> oParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> oParameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面再看看泛型约束：<br>先定义一些类，接口，有人，日本人，中国人，湖北人：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISports</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">Pingpang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWork</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token punctuation">:</span> People<span class="token punctuation">,</span> ISports<span class="token punctuation">,</span> IWork<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hubei</span> <span class="token punctuation">:</span> Chinese<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Japanese</span> <span class="token punctuation">:</span> ISports<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以定义一些泛型约束：<br>where T:  BaseModel<br>基类约束；</p><ul><li>可以把T当成基类——权利</li><li>T必须是People 或者 其子类——约束<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">GenericShow<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span><span class="token keyword">where</span> T <span class="token punctuation">:</span> People<span class="token punctuation">{</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is {0},parameter={1},type={2}"</span><span class="token punctuation">,</span>  <span class="token keyword">typeof</span><span class="token punctuation">(</span>CommonMethod<span class="token punctuation">)</span><span class="token punctuation">,</span> tParameter<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> tParameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp">GenericConstraint<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>GenericConstraint<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>GenericConstraint<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>hubei<span class="token punctuation">)</span><span class="token punctuation">;</span>GenericConstraint<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>japanese<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里就会报错， Japanese传不进来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>泛型约束类型有：</p><ol><li><p>基类约束 <code>where T : People</code></p></li><li><p>接口约束 <code>where T : ISports</code></p></li><li><p>引用类型约束，值类型约束</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> T <span class="token generic-method function">GenericShow<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> T<span class="token punctuation">:</span> <span class="token keyword">class</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用类型</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> T <span class="token generic-method function">GenericShow<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> T<span class="token punctuation">:</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//值类型,不约束也可以这么用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>无参数构造函数约束</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">GenericShow<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span><span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 无参数构造偶函数约束</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><strong>约束中，密封的是不行的，没有子类就谈不上约束了，例如where T: string 是不对的！</strong></li><li><strong>约束的时候，父类只有一个，接口可以多个</strong></li><li><strong>泛型约束可以结合使用 ,用逗号分隔就OK</strong><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">GenericShow1<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span><span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 泛型约束可以结合使用 ,用逗号分隔就OK</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">GenericShow1<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span>S<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">)</span><span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> S <span class="token punctuation">:</span>People<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li>用泛型类型的参数来约束<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token generic-method function">ShowTS<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span>S<span class="token punctuation">></span></span><span class="token punctuation">(</span>T tParameter<span class="token punctuation">,</span>S sParameter<span class="token punctuation">)</span><span class="token keyword">where</span> T<span class="token punctuation">:</span> People<span class="token keyword">where</span> S<span class="token punctuation">:</span> T<span class="token comment" spellcheck="true">//用类型参数约束</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="泛型的协变与逆变"><a href="#泛型的协变与逆变" class="headerlink" title="泛型的协变与逆变"></a>泛型的协变与逆变</h2><p>Func&lt;int,string&gt;这是一个泛型委托，来看看这个定义：<br><code>public delegate TResult Func&lt;in T, out TResult&gt;(T arg)</code>简单理解，这个里面的 in 和out 就是协变与逆变。<br>下面举一个例子来具体阐述一下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sparrow</span> <span class="token punctuation">:</span> Bird<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp">Bird bird1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类实例化 麻雀当然是个bird</span>Bird bird2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sparrow sparrow1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Sparrow sparrow2 = new Bird()*/</span> <span class="token comment" spellcheck="true">//子类变量 不能用父类实例化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考：</strong> 一个麻雀是一个bird，难道一组麻雀不是一组鸟吗？语义应该是可以的。<br>但是语法上是通不过的，List<bird> 是一个类， List<sparrow> 是另外一个类，二者没有继承 没有父子关系。<br>如果非要这么实现一下，可以这么写：<code>List&lt;Bird&gt; birdList3 = new List&lt;Sparrow&gt;().Select(c =&gt; (Bird)c).ToList();</code><br>至此，会感觉泛型在使用的时候，会存在不和谐的地方。<br>更进一步，我们看一下，不用List声明，用IEnumerable来实现上例。可以这样写：</sparrow></bird></p><pre class="line-numbers language-csharp"><code class="language-csharp">IEnumerable<span class="token operator">&lt;</span>Bird<span class="token operator">></span> birdList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Bird<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IEnumerable<span class="token operator">&lt;</span>Bird<span class="token operator">></span> birdList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Sparrow<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为什么可以这么写呢？探究一下IEnumerable和List:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://netimproving.zhengchaoqiang.com/01generic/IEnumerable.png" alt="IEnumerable"><br>这里面IEnumerable的参数就是个out类型，修饰返回值，就是协变covariant。</p><p><strong>先给出协变逆变的几个结论：</strong></p><ul><li>协变逆变只有在接口或者委托的泛型参数前面用 out in来实现</li><li>out 协变covariant    修饰返回值</li><li>in  逆变contravariant  修饰传入参数</li></ul><ol><li>下面自己来写一个<strong>协变</strong>的实例：</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICustomerListOut</span><span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">></span><span class="token punctuation">{</span>  T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//void Show(T t);</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerListOut</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> ICustomerListOut<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">public</span> T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//public void Show(T t) { }</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述ICustomerListOut这个接口，用out修饰，就是协变，意味着T就只能做返回值 ，不能做参数。也就是说，不能再接口中定义<code>void Show(T t);</code>这样的方法，同样也不能在实现类中把T作为参数使用。<br>这样一来，<strong>通过协变，就可以像下面这样，可以把子类放在右边</strong>，这才是泛型该有的样子。</p><pre class="line-numbers language-csharp"><code class="language-csharp">ICustomerListOut<span class="token operator">&lt;</span>Bird<span class="token operator">></span> customerList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListOut</span><span class="token operator">&lt;</span>Bird<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ICustomerListOut<span class="token operator">&lt;</span>Bird<span class="token operator">></span> customerList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListOut</span><span class="token operator">&lt;</span>Sparrow<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们再来想一下这个过程，bird在ICustomerListOut<bird>这个接口中是作为返回值的，也就是返回结果要是一个bird;再看CustomerListOut<bird>()和CustomerListOut<sparrow>()这两个实现，当传入Bird时，返回Bird，当传入Sparrow时，返回Sparrow，Sparrow也是bird，这是没问题的。<br>如果在上述过程中，这个T可以作参数来用，例如我们有这么一个方法：<code>void Show(T t);</code>,这样，在接口ICustomerListOut<bird>中，T是作bird来用，但是在CustomerListOut<sparrow>()实现中，T又是作为Sparrow来用，肯定会出问题的。</sparrow></bird></sparrow></bird></bird></p><ol start="2"><li>下面再看一下<strong>逆变</strong>的实例：</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICustomerListIn</span><span class="token operator">&lt;</span><span class="token keyword">in</span> T<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//T Get();</span>  <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerListIn</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> ICustomerListIn<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//public T Get()</span>  <span class="token comment" spellcheck="true">//{</span>  <span class="token comment" spellcheck="true">//    return default(T);</span>  <span class="token comment" spellcheck="true">//}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>与协变相反，逆变是用in作修饰符，泛型T只能作输入参数，不能作返回值，可以让右边使用父类</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">ICustomerListIn<span class="token operator">&lt;</span>Sparrow<span class="token operator">></span> customerList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListIn</span><span class="token operator">&lt;</span>Sparrow<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ICustomerListIn<span class="token operator">&lt;</span>Sparrow<span class="token operator">></span> customerList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListIn</span><span class="token operator">&lt;</span>Bird<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>customerList1<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ICustomerListIn<span class="token operator">&lt;</span>Bird<span class="token operator">></span> birdList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerListIn</span><span class="token operator">&lt;</span>Bird<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>birdList1<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>birdList1<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来想一下上面这个过程：对customerList1来说，其实现类<code>CustomerListIn&lt;Bird&gt;()</code>会把Bird作为参数在方法<code>public void Show(T t)</code>中使用，所以这个时候传入Sparrow没问题，因为Sparrow也是bird。如果T作为返回值使用，那么接口中的T范围比实现类中的T范围大，就无法正常工作了。<br>对于birdList1来说，实现类和接口中T都是Bird,只会作参数使用，所以birdList1.Show(new Sparrow())中，传入Sparrow没有问题。</p><ol start="3"><li>最后再看一个协变逆变一起的实例：</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyList</span><span class="token operator">&lt;</span><span class="token keyword">in</span> inT<span class="token punctuation">,</span> <span class="token keyword">out</span> outT<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>inT t<span class="token punctuation">)</span><span class="token punctuation">;</span>  outT <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  outT <span class="token function">Do</span><span class="token punctuation">(</span>inT t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">////out 只能是返回值   in只能是参数</span>  <span class="token comment" spellcheck="true">//void Show1(outT t);</span>  <span class="token comment" spellcheck="true">//inT Get1();</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">:</span> IMyList<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> T2 <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> T2 <span class="token function">Do</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用的时候，可以这么用：</p><pre class="line-numbers language-csharp"><code class="language-csharp">IMyList<span class="token operator">&lt;</span>Sparrow<span class="token punctuation">,</span> Bird<span class="token operator">></span> myList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>Sparrow<span class="token punctuation">,</span> Bird<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myList1<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IMyList<span class="token operator">&lt;</span>Sparrow<span class="token punctuation">,</span> Bird<span class="token operator">></span> myList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>Sparrow<span class="token punctuation">,</span> Sparrow<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//协变</span>myList2<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IMyList<span class="token operator">&lt;</span>Sparrow<span class="token punctuation">,</span> Bird<span class="token operator">></span> myList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>Bird<span class="token punctuation">,</span> Bird<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//逆变</span>myList3<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IMyList<span class="token operator">&lt;</span>Sparrow<span class="token punctuation">,</span> Bird<span class="token operator">></span> myList4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>Bird<span class="token punctuation">,</span> Sparrow<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//协变+逆变</span>myList4<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述过程这里不再赘述，就是交叉着使用协变逆变，应该比较好理解了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Advanced Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Generic </tag>
            
            <tag> Covariant </tag>
            
            <tag> Contravariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的.Net Core技术路线</title>
      <link href="/2020/01/04/dotnet-advanced-series-introduction/"/>
      <url>/2020/01/04/dotnet-advanced-series-introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么写"><a href="#为什么写" class="headerlink" title="为什么写"></a>为什么写</h1><p>就像自己在2020年的计划书中描述的那样，自己的重要目标之一就是夯实基础，形成自己的知识体系，输出点什么。.Net是其中一个主要的技术栈维度，虽然自己此前了解一些C#，了解一些.Net，但是对于其中的细节深究的很少，距离掌握这个程度可以说相差甚远。工作中的代码输出不是非常多，更多的是在纠缠业务和为领导打杂，虽然无可否认这就是职场的一部分，但从自身出发，还是希望能够沉淀一些，充实一些，毕竟万丈高楼平地起，哪有那么多捷径可以走。所以写这个系列的理由很简单，回归本质，技术沉淀，铸好基石。</p><h1 id="写些什么"><a href="#写些什么" class="headerlink" title="写些什么"></a>写些什么</h1><p>缺什么写什么，其实还是更多的关注基础的知识，温故知新吧。这个系列就专注于把基础知识和基本原理搞搞扎实，希望可以建立起知识面。当然对于当前热门和前言的内容也会做些探究。结合相关书籍和教育机构的提纲，初步给自己制定了一个计划，希望后面可以逐步完善这个大纲。</p><h2 id="第一章-C-高级编程"><a href="#第一章-C-高级编程" class="headerlink" title="第一章 C#高级编程"></a>第一章 C#高级编程</h2><ul><li><a href="/2020/01/04/dotnet-advanced-series-1-1-generic/">Generic深入，最强泛型缓存，协变逆变</a></li><li><a href="http://www.zhengchaoqiang.com/2020/01/08/dotnet-advanced-series-1-2-reflection/">Reflection全解，搭建动态架构，搞定emit</a></li><li><a href="http://www.zhengchaoqiang.com/2020/01/14/dotnet-advanced-series-1-5-attribute/">Attribute解析，IL深入，花式扩展封装</a></li><li><a href="http://www.zhengchaoqiang.com/2020/01/19/DotNet-Advanced-Series-1-6-Delegate">Delegate封装解耦，Event驱动解析</a></li><li>MD5、RSA、DES解析应用，SSL三次握手</li><li><a href="http://www.zhengchaoqiang.com/2020/02/03/dotnet-advanced-series-1-10-ioserialize/">IO梳理，超大文件处理，Serialize优化</a></li><li><a href="http://www.zhengchaoqiang.com/2020/01/22/dotnet-advanced-series-1-8-lambdalinq/">Lambda前世今生，Linq深层次解读和扩展</a></li><li><a href="http://www.zhengchaoqiang.com/2020/01/26/dotnet-advanced-series-1-9-expression/">Expression动态拼接，自动解析，扩展LinqToSql</a></li><li>Structure对比解析，Algorithms整理升级</li><li><a href="http://www.zhengchaoqiang.com/2020/02/04/dotnet-advanced-series-1-11-async/">Threads各版本对比，运行模型深入</a></li><li><a href="http://www.zhengchaoqiang.com/2020/02/05/dotnet-advanced-series-1-14-threads03/">线程安全&amp;异常处理&amp;线程取消&amp;线程通信</a></li><li><a href="http://www.zhengchaoqiang.com/2020/02/06/dotnet-advanced-series-1-15-awaitasync/">await/async运行机制解析，搞定异步编程</a></li></ul><h2 id="第二章-设计进阶"><a href="#第二章-设计进阶" class="headerlink" title="第二章 设计进阶"></a>第二章 设计进阶</h2><ul><li><a href="http://www.zhengchaoqiang.com/2020/01/13/dotnet-advanced-series-1-4-object-oriented-programming/">OOP面向对象编程，生成解读程序封装设计</a></li><li>AOP面向切面编程，完成OOP+AOP思想升级</li><li>CLR核心机制解析，搞定性能优化</li><li>设计模式六大原则，掌握程序设计核心法则</li><li>面向对象23中设计模式，优化程序设计</li><li>数据库设计解读和实战，分库分表表分区设计</li><li>数据库优化，读写分离高可用</li><li>DDD领域驱动设计，基于EF完成领域模型设计</li></ul><h2 id="第三章-NetCore跨平台"><a href="#第三章-NetCore跨平台" class="headerlink" title="第三章 .NetCore跨平台"></a>第三章 .NetCore跨平台</h2><ul><li><a href="http://www.zhengchaoqiang.com/2020/04/04/dotnet-advanced-series-3-1-basictheory/">.Net Core 基础理论</a></li><li><a href="http://www.zhengchaoqiang.com/2020/04/04/dotnet-advanced-series-3-2-commandline/">.Net Core 命令行</a></li><li>.Net Core 源码解读及编译</li><li>Net Core 多线程</li><li>Net Core 异步操作</li><li>Net Core GC垃圾回收</li><li>Net Core 依赖注入</li><li>Net Core 文件系统</li><li>Net Core 配置选项</li><li>Net Core 诊断日志</li><li>Net Core 承载系统</li><li>Net Core 管道</li><li>Net Core 静态文件</li><li>Net Core 路由</li><li>Net Core 异常处理</li><li>Net Core 缓存</li><li>Net Core 会话</li><li>Net Core 认证与授权</li><li>Net Core 跨域资源共享</li><li>Net Core 健康检查</li><li>Net Core 多语言本地化</li></ul><h2 id="第三章-必备框架"><a href="#第三章-必备框架" class="headerlink" title="第三章 必备框架"></a>第三章 必备框架</h2><ul><li>Crawler原理和攻防实践，定制数据爬虫</li><li>Quartz.Net定时作业调度，定制项目必备组件</li><li>Cache深入，各级缓存解析，优化本地封装</li><li>Lucene.Net扩展订制，ElasticSearch实践</li><li>协议全解析，Http&amp;Socket&amp;WebSocket解读和实战</li><li>O/RM解析，EntityFramework6扩展和性能优化</li><li>IOC控制反转，DI依赖注入，扩展AOP面向切面编程</li><li>LayUI应用，结合WebApi完成前后端分离架构</li><li>MVC5应用解析，各种扩展封装搭建开发框架</li><li>ABP开源Web应用程序架构剖析，实战开发应用</li><li>Asp.Net核心机制，管道处理模型深层解析和扩展</li><li>MVC源码解读，全生命周期各个环节全面扩展订制</li></ul><h2 id="第五章-NetCore-微服务开发实战"><a href="#第五章-NetCore-微服务开发实战" class="headerlink" title="第五章 .NetCore 微服务开发实战"></a>第五章 .NetCore 微服务开发实战</h2><ul><li>从零开始 Net Core 3.1 </li><li><a href="http://www.zhengchaoqiang.com/2020/03/16/dotnet-advanced-series-5-2-microservice/">微服务架构解析，水平扩展高可用，最终一致性策略</a>)</li><li>Consul服务注册与发现，多均衡策略扩展</li><li>Ocelot网关，路由/认证鉴权/超时/限流/熔断/日志</li><li>Polly整合Ocelot，实现重试/断路/超时/缓存/降级</li><li>IdentityServer4解读，Token&amp;OAuth2.0&amp;OpenId&amp;JWT</li><li>Docker自动化打包和发布，持续集成部署</li><li>k8s容器集群的自动化部署，自动扩容缩容</li><li><a href="http://www.zhengchaoqiang.com/2020/04/19/netcore-programing-and-practice/">NetCore开发实战（1）——必备知识</a></li><li><a href="https://http://www.zhengchaoqiang.com/2020/04/19/netcore-programing-and-practice2/" target="_blank" rel="noopener">NetCore开发实战（2）——微服务实战</a></li><li>NetCore开发实战（3）——微服务部署</li></ul><h2 id="第六章-分布式"><a href="#第六章-分布式" class="headerlink" title="第六章 分布式"></a>第六章 分布式</h2><ul><li>SOA面向服务架构，Zookeeper完成服务治理</li><li>WebService/WCF/.NetRemoting/WebApi</li><li>SqlServer&amp;Mysql多模式完成读写分离</li><li>Redis五大数据结构实践，集群化和调优</li><li>RabbitMQ路由/排序/追溯/可视化/集群/事务/高可用</li><li>分布式锁实现，CAP解析、优化Redis分布式锁实现</li><li>分布式事务多种实现，MSDTC、强制性、事务补偿等</li></ul><h1 id="预期目标"><a href="#预期目标" class="headerlink" title="预期目标"></a>预期目标</h1><p>其实没有特别明确的预期，做这件事情的一方面是知识积累和储备，不管是产品经理，项目经理，还是技术售前，都需要牢靠的技术底子和积淀，所以这是大有裨益的一件事；另一方面这也是对自己毅力的一种考验，设定目标，长路漫漫，尤其考验一个人的执行力。喜欢老版的那两句话：上坡路都是难走的；极度的自律会带来意想不到的自信。2020年不管是生活还是工作都不会太轻松，希望自己可以保持初心，坚持自己想要的，养成一些好习惯吧。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>本来这是一个2020年的技术栈路线图，但是后续有越来越多的元素加入，于是把这个2020拿掉了，作为自己的Net Core技术栈的一个大纲，希望自己后面能完善起来。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tech Overview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net Core </tag>
            
            <tag> Tech stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我小结之再出发</title>
      <link href="/2019/10/10/selfreflection-20191010/"/>
      <url>/2019/10/10/selfreflection-20191010/</url>
      
        <content type="html"><![CDATA[<p>现在是北京时间10月10号晚上十一点五十分，哄完娃，收拾完，才终于得空坐在书房打开电脑写点东西。此刻的宁静来之不易，静得只剩敲击键盘的声音。我也喜欢这样面对自己，因为这个时候的自己是最纯粹的自己，是能静的下来的自己。</p><p>最近的一个月过得真的很快，沉浸在迎接小公主的喜悦中，也沉浸在被小公主折磨的疲惫中。身份的转变开始让自己有些变化和不太适应，有时候甚至有点措手不及。需要静下来想想，自己最近的状态怎么进行调整和改善。</p><p>成家和工作一年多以来，最大的感觉是自己正在变得越来越“不敢”，很多想法停留在脑子里，变得不敢去尝试。这背后的原因，一大部分是自己开始背负一些东西，例如每个月的巨额房贷，每个月娃的吃喝拉撒消费，老人的照料和医疗，金钱的压力也开始让自己变得“不敢”，不敢随便玩，不敢随便折腾，不敢有太多的情绪。每一个决定或者想法，首要考虑的是会不会影响这一切的正常运转，有没有风险，如果有，那么就停止。这样一想，可能自己真的正在或者已经陷入某种固化中，每天去勤勤恳恳上班，下了班就老婆孩子老人，留给自己的时间变得越来越少。</p><p>好爸爸，好儿子，好丈夫，好员工，这些角色都需要自己扮演好，越长大，意味着承担也越多。每次一想到责任，就会觉得沉重。我无比地想陪伴女儿成长，陪伴在妻子身边，但与此同时我又要做个好员工，做好自己的工作，主动去承担和学习，寻求更好的回报和发展。家庭和工作的矛盾以前很少在我身上出现，现在似乎这是一个不得不面对的问题。未来的一段时间，这种焦虑，这种矛盾，也许是我难以逃离的。</p><p>换个角度想一下，谁不是这样呢？有谁会是那么容易呢？我似乎一直在想自己是如何付出和承担的，好像这个过程中自己也得到了很多。这些责任的背后如果是无限美好，那这一切听起来也没有那么糟。女儿冲着我笑，妻子对我关心，老板对我点头，父母赞我懂事，这些美好即是责任的体现也是对我的一种回报吧。</p><p>“多陪陪孩子，毕竟他们依赖你的时间很短，转瞬即逝“，大宝老师的话时常在我耳边，我深知做个好爸爸不简单。除了要给孩子物质上的“尽可能”，更多的是陪伴，这是需要用心去经营的。接下来的一段时间，我极可能将徘徊在工作和孩子之间，我希望自己能保持耐心，坚持做好。</p><p>其实，除却这些客观因素，另一个让自己变得“不敢”的原因是，自己越来越偏安，安于现状，内心的恐惧和懒惰让自己没有办法直面挑战。成为更好的自己，不是立下目标，在脑子里想一下就会实现。我相信这个世界都会给每个人很多机会，但问题是不是每个人都能够抓得住。看看这过去一年，多少机会从自己手中溜走？是因为自己没有准备充分，是因为自己内心的这种“不敢”让自己望而却步。</p><p>如果有机会，就去突破自己，去挑战自己，这是从心理上的准备。我相信积极主动，相信天道酬勤，相信厚积薄发。如果周围环境真的都是虚与委蛇之类，那也无需留恋，毕竟这个世界很大，是千里马总有伯乐。回到正题，我相信承担和责任并不意味着失去自我，相反，这是实现自我的一部分。毕竟人之于社会就是若干角色和身份，做好这角色和身份就是自我价值的一大部分。</p><p>工作伊始，在这家公司，我给自己定了一个三年计划，此刻过去三分之一。这种自我修炼如果也分内功和外功的话，我想自己更多的要修炼自己的内功，学会掌控自己，规划自己，合理地发挥自己，而并不是一味地蛮干。这个世界有太多的牛人，太多的技能，不是也不可能都要精通，希望自己可以找到合适自己的标签，有的放矢，而不是乱使力气，钻牛角尖。</p><p>如果自我治愈（自我安慰）也是一种能力的话，那我应该还算可以。毕竟时间很有限，不要把时间都浪费在小情绪上面，因为要做的事情还有很多。比如此刻，还没来得及细想，娃又在哭了，只能改天继续了…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各类软件常用命令</title>
      <link href="/2019/08/15/software-commands/"/>
      <url>/2019/08/15/software-commands/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇博客笔记用来记录各类软件常用命令和使用技巧，持续更新…</p></blockquote><h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><hr><h2 id="1-常用"><a href="#1-常用" class="headerlink" title="1.常用"></a>1.常用</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global core.editor vim                     <span class="token comment" spellcheck="true"># 设置默认编辑器为vim（git默认用nano）</span><span class="token function">git</span> config core.ignorecase <span class="token boolean">false</span>                        <span class="token comment" spellcheck="true"># 设置大小写敏感</span><span class="token function">git</span> config --global user.name <span class="token string">"YOUR NAME"</span>               <span class="token comment" spellcheck="true"># 设置用户名</span><span class="token function">git</span> config --global user.email <span class="token string">"YOUR EMAIL ADDRESS"</span>     <span class="token comment" spellcheck="true"># 设置邮箱</span><span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">></span>                                         <span class="token comment" spellcheck="true"># 克隆远程版本库</span><span class="token function">git</span> init                                                <span class="token comment" spellcheck="true"># 初始化本地版本库</span><span class="token function">git</span> remote add origin git@github.com:shw2018/test.git   <span class="token comment" spellcheck="true"># 配置远程git版本库</span><span class="token function">git</span> pull origin master                                  <span class="token comment" spellcheck="true"># 下载代码及快速合并 </span><span class="token function">git</span> push origin master                                  <span class="token comment" spellcheck="true"># 上传代码及快速合并</span><span class="token function">git</span> fetch origin                                        <span class="token comment" spellcheck="true"># 从远程库获取代码</span><span class="token function">git</span> branch                                              <span class="token comment" spellcheck="true"># 显示所有分支</span><span class="token function">git</span> checkout master                                     <span class="token comment" spellcheck="true"># 切换到master分支</span><span class="token function">git</span> checkout -b dev                                     <span class="token comment" spellcheck="true"># 创建并切换到dev分支</span><span class="token function">git</span> commit -m <span class="token string">"first version"</span>                           <span class="token comment" spellcheck="true"># 提交</span><span class="token function">git</span> status                                              <span class="token comment" spellcheck="true"># 查看状态</span><span class="token function">git</span> log                                                 <span class="token comment" spellcheck="true"># 查看提交历史</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-别名Alias"><a href="#2-别名Alias" class="headerlink" title="2.别名Alias"></a>2.别名Alias</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global alias.br<span class="token operator">=</span><span class="token string">"branch"</span>                   <span class="token comment" spellcheck="true"># 创建/查看本地分支</span><span class="token function">git</span> config --global alias.co<span class="token operator">=</span><span class="token string">"checkout"</span>                 <span class="token comment" spellcheck="true"># 切换分支</span><span class="token function">git</span> config --global alias.cb<span class="token operator">=</span><span class="token string">"checkout -b"</span>              <span class="token comment" spellcheck="true"># 创建并切换到新分支</span><span class="token function">git</span> config --global alias.cm<span class="token operator">=</span><span class="token string">"commit -m"</span>                <span class="token comment" spellcheck="true"># 提交</span><span class="token function">git</span> config --global alias.st<span class="token operator">=</span><span class="token string">"status"</span>                   <span class="token comment" spellcheck="true"># 查看状态</span><span class="token function">git</span> config --global alias.pullm<span class="token operator">=</span><span class="token string">"pull origin master"</span>    <span class="token comment" spellcheck="true"># 拉取分支</span><span class="token function">git</span> config --global alias.pushm<span class="token operator">=</span><span class="token string">"push origin master"</span>    <span class="token comment" spellcheck="true"># 提交分支</span><span class="token function">git</span> config --global alias.log<span class="token operator">=</span><span class="token string">"git log --oneline --graph --decorate --color=always"</span> <span class="token comment" spellcheck="true"># 单行、分颜色显示记录</span><span class="token function">git</span> config --global alias.logg<span class="token operator">=</span><span class="token string">"git log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative"</span>  <span class="token comment" spellcheck="true"># 复杂显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-创建版本库"><a href="#3-创建版本库" class="headerlink" title="3.创建版本库"></a>3.创建版本库</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">></span>                 <span class="token comment" spellcheck="true"># 克隆远程版本库</span><span class="token function">git</span> init                        <span class="token comment" spellcheck="true"># 初始化本地版本库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-修改和提交"><a href="#4-修改和提交" class="headerlink" title="4.修改和提交"></a>4.修改和提交</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> status                      <span class="token comment" spellcheck="true"># 查看状态</span><span class="token function">git</span> <span class="token function">diff</span>                        <span class="token comment" spellcheck="true"># 查看变更内容</span><span class="token function">git</span> add <span class="token keyword">.</span>                       <span class="token comment" spellcheck="true"># 跟踪所有改动过的文件</span><span class="token function">git</span> add <span class="token operator">&lt;</span>file<span class="token operator">></span>                  <span class="token comment" spellcheck="true"># 跟踪指定的文件</span><span class="token function">git</span> <span class="token function">mv</span> <span class="token operator">&lt;</span>old<span class="token operator">></span> <span class="token operator">&lt;</span>new<span class="token operator">></span>              <span class="token comment" spellcheck="true"># 文件改名</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>                   <span class="token comment" spellcheck="true"># 删除文件</span><span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token operator">&lt;</span>file<span class="token operator">></span>          <span class="token comment" spellcheck="true"># 停止跟踪文件但不删除</span><span class="token function">git</span> commit -m “commit message”  <span class="token comment" spellcheck="true"># 提交所有更新过的文件</span><span class="token function">git</span> commit --amend              <span class="token comment" spellcheck="true"># 修改最后一次提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-查看提交历史"><a href="#5-查看提交历史" class="headerlink" title="5.查看提交历史"></a>5.查看提交历史</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> log                         <span class="token comment" spellcheck="true"># 查看提交历史</span><span class="token function">git</span> log -p <span class="token operator">&lt;</span>file<span class="token operator">></span>               <span class="token comment" spellcheck="true"># 查看指定文件的提交历史</span><span class="token function">git</span> blame <span class="token operator">&lt;</span>file<span class="token operator">></span>                <span class="token comment" spellcheck="true"># 以列表方式查看指定文件的提交历史</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-撤消与回退"><a href="#6-撤消与回退" class="headerlink" title="6.撤消与回退"></a>6.撤消与回退</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD           <span class="token comment" spellcheck="true"># 撤消工作目录中所有未提交文件的修改内容</span><span class="token function">git</span> reset --hard <span class="token operator">&lt;</span>version<span class="token operator">></span>      <span class="token comment" spellcheck="true"># 撤销到某个特定版本</span><span class="token function">git</span> checkout HEAD <span class="token operator">&lt;</span>file<span class="token operator">></span>        <span class="token comment" spellcheck="true"># 撤消指定的未提交文件的修改内容</span><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>file<span class="token operator">></span>          <span class="token comment" spellcheck="true"># 同上一个命令</span><span class="token function">git</span> revert <span class="token operator">&lt;</span>commit<span class="token operator">></span>             <span class="token comment" spellcheck="true"># 撤消指定的提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-分支与标签"><a href="#7-分支与标签" class="headerlink" title="7.分支与标签"></a>7.分支与标签</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch                      <span class="token comment" spellcheck="true"># 显示所有本地分支</span><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch/tag<span class="token operator">></span>       <span class="token comment" spellcheck="true"># 切换到指定分支或标签</span><span class="token function">git</span> branch <span class="token operator">&lt;</span>new-branch<span class="token operator">></span>         <span class="token comment" spellcheck="true"># 创建新分支</span><span class="token function">git</span> branch -d <span class="token operator">&lt;</span>branch<span class="token operator">></span>          <span class="token comment" spellcheck="true"># 删除本地分支</span><span class="token function">git</span> tag                         <span class="token comment" spellcheck="true"># 列出所有本地标签</span><span class="token function">git</span> tag <span class="token operator">&lt;</span>tagname<span class="token operator">></span>               <span class="token comment" spellcheck="true"># 基于最新提交创建标签</span><span class="token function">git</span> tag -a <span class="token string">"v1.0"</span> -m <span class="token string">"一些说明"</span>  <span class="token comment" spellcheck="true"># -a指定标签名称，-m指定标签说明</span><span class="token function">git</span> tag -d <span class="token operator">&lt;</span>tagname<span class="token operator">></span>            <span class="token comment" spellcheck="true"># 删除标签</span><span class="token function">git</span> checkout dev                <span class="token comment" spellcheck="true"># 合并特定的commit到dev分支上</span><span class="token function">git</span> cherry-pick 62ecb3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-合并与衍合"><a href="#8-合并与衍合" class="headerlink" title="8.合并与衍合"></a>8.合并与衍合</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator">></span>              <span class="token comment" spellcheck="true"># 合并指定分支到当前分支</span><span class="token function">git</span> merge --abort               <span class="token comment" spellcheck="true"># 取消当前合并，重建合并前状态</span><span class="token function">git</span> merge dev -Xtheirs          <span class="token comment" spellcheck="true"># 以合并dev分支到当前分支，有冲突则以dev分支为准</span><span class="token function">git</span> rebase <span class="token operator">&lt;</span>branch<span class="token operator">></span>             <span class="token comment" spellcheck="true"># 衍合指定分支到当前分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-远程操作"><a href="#9-远程操作" class="headerlink" title="9.远程操作"></a>9.远程操作</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote -v                   <span class="token comment" spellcheck="true"># 查看远程版本库信息</span><span class="token function">git</span> remote show <span class="token operator">&lt;</span>remote<span class="token operator">></span>        <span class="token comment" spellcheck="true"># 查看指定远程版本库信息</span><span class="token function">git</span> remote add <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span>   <span class="token comment" spellcheck="true"># 添加远程版本库</span><span class="token function">git</span> remote remove <span class="token operator">&lt;</span>remote<span class="token operator">></span>      <span class="token comment" spellcheck="true"># 删除指定的远程版本库</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>remote<span class="token operator">></span>              <span class="token comment" spellcheck="true"># 从远程库获取代码</span><span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span>      <span class="token comment" spellcheck="true"># 下载代码及快速合并</span><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span>      <span class="token comment" spellcheck="true"># 上传代码及快速合并</span><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">></span> :<span class="token operator">&lt;</span>branch/tag-name<span class="token operator">></span> <span class="token comment" spellcheck="true"># 删除远程分支或标签</span><span class="token function">git</span> push --tags                 <span class="token comment" spellcheck="true"># 上传所有标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-打包"><a href="#10-打包" class="headerlink" title="10.打包"></a>10.打包</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> archive --format<span class="token operator">=</span>zip --output <span class="token punctuation">..</span>/file.zip master    <span class="token comment" spellcheck="true"># 将master分支打包成file.zip文件，保存在上一级目录</span><span class="token function">git</span> archive --format<span class="token operator">=</span>zip --output <span class="token punctuation">..</span>/v1.2.zip v1.2      <span class="token comment" spellcheck="true"># 打包v1.2标签的文件，保存在上一级目录v1.2.zip文件中</span><span class="token function">git</span> archive --format<span class="token operator">=</span>zip v1.2 <span class="token operator">></span> <span class="token punctuation">..</span>/v1.2.zip             <span class="token comment" spellcheck="true"># 作用同上一条命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>git打包命令会自动忽略.gitignore中指定的目录和文件，以及.git目录。</p><h2 id="11-全局和局部配置"><a href="#11-全局和局部配置" class="headerlink" title="11.全局和局部配置"></a>11.全局和局部配置</h2><hr><pre class="line-numbers language-bash"><code class="language-bash">全局配置保存在：<span class="token variable">$Home</span>/.gitconfig本地仓库配置保存在：.git/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="12-远程与本地合并"><a href="#12-远程与本地合并" class="headerlink" title="12.远程与本地合并"></a>12.远程与本地合并</h2><hr><p>如果在远程创建了代码仓，而且已经初始化，本地是具体的源代码，那么工作流程应该是：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init                              <span class="token comment" spellcheck="true"># 初始化本地代码仓</span><span class="token function">git</span> add <span class="token keyword">.</span>                             <span class="token comment" spellcheck="true"># 添加本地代码</span><span class="token function">git</span> commit -m <span class="token string">"add local source"</span>      <span class="token comment" spellcheck="true"># 提交本地代码</span><span class="token function">git</span> pull origin master                <span class="token comment" spellcheck="true"># 下载远程代码</span><span class="token function">git</span> merge master                      <span class="token comment" spellcheck="true"># 合并master分支</span><span class="token function">git</span> push -u origin master             <span class="token comment" spellcheck="true"># 上传代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-测试C"><a href="#13-测试C" class="headerlink" title="13.测试C#"></a>13.测试C#</h2><hr><p>如果在远程创建了代码仓，而且已经初始化，本地是具体的源代码，那么工作流程应该是：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> EFCore<span class="token punctuation">.</span>DomainModels<span class="token punctuation">;</span><span class="token keyword">namespace</span> EFCore<span class="token punctuation">.</span>Data<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyContext</span><span class="token punctuation">:</span> DbContext    <span class="token punctuation">{</span>        <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Province<span class="token operator">></span> Provinces <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>City<span class="token operator">></span> Cities <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span>DbContextOptionsBuilder optionsBuilder<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            optionsBuilder<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span><span class="token string">"Server=(localdb)\\MSSQLLocalDB; Database=EFCoreDemo; Trusted_Connection=True;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tech Overview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> Commands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-4-5 Try 语句和异常</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-4-5/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-4-5/</url>
      
        <content type="html"><![CDATA[<p><strong>Try  语句</strong></p><ul><li>try语句指定了用来进行错误处理或清理的一个代码块。</li><li>try语句块后边必须紧接着一个catch块或者是一个finally块，或者两者都有。</li><li>当try块里发生错误的时候，catch块就会被执行。</li><li>finally块会在执行完try块之后执行，如果catch也执行了，那就在catch块后边执行。finally块用来执行一些清理代码，无论是否有错误发生。</li></ul><p><strong>Catch</strong></p><ul><li>catch块可以访问一个Exception对象，这个Exception对象里含有关于错误的信息。</li><li>catch块通常被用来对错误进行处理/补偿或者重新抛出异常。</li></ul><p><strong>Finally</strong></p><ul><li>finally块为你的程序增加了确定性：CLR总是尽力去执行它。它通常用来做一些清理任务。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="trycatch.png" alt="trycatch"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="trycatchdemo1.png" alt="trycatchdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="trycatchdemo2.png" alt="trycatchdemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="trycatchdemo3.png" alt="trycatchdemo3"></p><h2 id="当异常被抛出的时候"><a href="#当异常被抛出的时候" class="headerlink" title="当异常被抛出的时候"></a>当异常被抛出的时候</h2><ul><li>CLR会执行一个测试，当前是否执行在能够catch异常的try语句里？</li><li>如果是：当前执行就会传递给兼容的catch块里面，如果catch块完成了执行，那么执行会移动到try语句后边的语句。如果有finally块存在，会先执行finally块。</li><li>如果不是：执行会返回到函数的调用者，并重复这个测试过程（在执行完任何包裹这语句的finally块之后）。</li></ul><h2 id="catch子句（clause）"><a href="#catch子句（clause）" class="headerlink" title="catch子句（clause）"></a>catch子句（clause）</h2><ul><li>catch子句指定要捕获的异常的类型。这个异常必须是System.Exception或其子类。</li><li>捕获System.Exception这个异常的话就会捕获所有可能的错误。当处理下面几种情况时，这么做是很有用的：</li><li>无论是哪种类型的异常，你的程序都可能从错误中恢复。</li><li>你计划重新抛出异常（可能在你记录了log之后）。</li><li>你的错误处理器是程序终止运行前的最后一招。</li></ul><h2 id="catch子句"><a href="#catch子句" class="headerlink" title="catch子句"></a>catch子句</h2><ul><li>更典型的情况是，你会catch特定类型的异常。为的是避免处理那些你的处理程序并未针对设计的情况。</li><li>你可以使用多个catch子句来处理多个异常类型。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="trycatchdemo4.png" alt="trycatchdemo4"></p><ul><li>上例中，针对给定的异常，只有一个catch子句会执行。</li><li>如果你希望有一个兜底的catch可以捕获任何类型的异常，那么你需要把特定类型的异常捕获放在靠前的位置。</li><li>如果你不需要访问异常的属性，那么你可以不指定异常变量</li></ul><pre class="line-numbers language-CS"><code class="language-CS">catch(OverflowException){  ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更甚者，你可以把异常类型和变量都拿掉，这也意味着它会捕获所有的异常：</p><pre class="line-numbers language-CS"><code class="language-CS">catch{...}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="异常的过滤"><a href="#异常的过滤" class="headerlink" title="异常的过滤"></a>异常的过滤</h2><ul><li>从C#6开始，你可以在catch子句中添加一个when子句来指定一个异常过滤器：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="filter1.png" alt="filter1"></p><ul><li>此例中，如果WebException被抛出的话，那么when后边的bool表达式就会被执行估算。如果计算的结果是false，那么后边所有的catch子句都会在考虑范围内。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="filter2.png" alt="filter2"></p><h2 id="finally块"><a href="#finally块" class="headerlink" title="finally块"></a>finally块</h2><p><strong>finally块永远都会被执行，无论是否抛出异常，无论try块是否跑完，finally块通常用来写清理代码。</strong><br><strong>finally块会在以下情况被执行：</strong></p><ul><li>在一个catch块执行完之后，</li><li>因为跳转语句（例如return或goto），程序的执行离开了try块。</li><li>try块执行完毕后。</li></ul><p><strong>唯一可以不让finally块执行的东西就是无限循环，或者程序突然结束。</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="finally.png" alt="finally"></p><h2 id="using语句"><a href="#using语句" class="headerlink" title="using语句"></a>using语句</h2><ul><li>很多类都封装了非托管的资源，例如文件处理、图像处理、数据库连接等。这些类都实现了IDisposable接口，这个接口定义了一个无参的Dispose方法用来清理这些资源。</li><li>using语句提供了一个优雅的语法来在finally块里调用实现了IDisposable接口对象上的Dispose方法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="using1.png" alt="using1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="using2.png" alt="using2"></p><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><ul><li>异常可以被运行时或者用户抛出。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="throwexception.png" alt="throwexception"></p><p><strong>C#7 抛异常</strong></p><ul><li>C# 7 之前，throw 肯定是个语句。而现在它可以作为expression-bodied functions 里的一个表达式：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="CS7.png" alt="CS7"></p><ul><li>也可以出现在三元条件表达式里：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="CS72.png" alt="CS72"></p><h2 id="重新抛出异常"><a href="#重新抛出异常" class="headerlink" title="重新抛出异常"></a>重新抛出异常</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="rethrow.png" alt="rethrow"></p><ul><li>如果使用throw ex代替throw的话，程序仍可运行，但是新传递的异常的Stacktrace属性就不会反应原始错误了。</li><li>像上图这样重抛异常可以让你记录异常并且不会把它吞没，如果情况超出了你的预期，它允许你放弃在这里处理这个异常：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="rethrowdemo.png" alt="rethrowdemo"></p><ul><li>使用C#6+，你可以这样简洁的重写上例：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="CS6.png" alt="CS6"></p><ul><li>其它常见的情景是抛出一个更具体的异常类型：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="otherthrow.png" alt="otherthrow"></p><p><strong>注意：</strong></p><ul><li>在组建XmlException的时候，我把原异常ex，作为第二个参数传了进去，这样有助于调试。</li><li>有时候你会抛出一个更抽象的异常，通常是因为要穿越信任边界，防止信息泄露。</li></ul><h2 id="System-Exception的关键属性"><a href="#System-Exception的关键属性" class="headerlink" title="System.Exception的关键属性"></a>System.Exception的关键属性</h2><p><strong>StackTrace</strong></p><ul><li>它是一个字符串，展现了从异常发生地到catch块所有的被调用的方法。</li></ul><p><strong>Message</strong></p><ul><li>关于错误的描述信息</li></ul><p><strong>InnerException</strong></p><ul><li>引起外层异常的内层异常（如果存在的话）。而且InnerException本身还有可能含有InnerException</li></ul><h2 id="常见异常类型"><a href="#常见异常类型" class="headerlink" title="常见异常类型"></a>常见异常类型</h2><ul><li>System.ArgumentException 函数的参数不正确不合理的时候</li><li>System.ArgumentNullException 传递给函数的参数为null</li><li>System.ArgumentOutOfRangeException 数值类型的参数太大或者太小的时候  正数被传递了一个负数</li><li>System.InvalidOperationException 对象的状态不适合让方法继续操作的时候  例如要读取文件的内容  发现读取的时候文件还没有被打开</li><li>System.NotSupportedException 表示特定的功能不支持  比如说对一个只读的集合  进行添加</li><li>System.NotImplementedException 还没有实现的方法</li><li>System.ObjectDisposedException 你想要调用某个对象的功能  但这个时候这个对象已经被清理掉了</li><li>NullReferenceException 空指针 你也可以直接throw null，来抛出此类型的异常。</li></ul><h2 id="TryXXX模式"><a href="#TryXXX模式" class="headerlink" title="TryXXX模式"></a>TryXXX模式</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="try1.png" alt="try1"></p><ul><li>如果解析失败，Parse方法会抛出异常，而TryParse方法会返回false。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="try2.png" alt="try2"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial hapter-4-4 Lambda 表达式</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-4-4/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-4-4/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Lambda表达式"><a href="#什么是Lambda表达式" class="headerlink" title="什么是Lambda表达式"></a>什么是Lambda表达式</h1><p><strong>Lambda表达式其实就是一个用来代替委托实例的未命名的方法；</strong><br><strong>编译器会把Lambda表达式转化为以下二者之一：</strong></p><ul><li>一个委托实例</li><li>一个表达式树（expression tree），类型是Expression<tdelegate>，它表示了可遍历的对象模型中Lambda表达式里面的代码。它允许lambda表达式延迟到运行时再被解释。</tdelegate></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="whatlambda.png" alt="whatlambda"></p><ul><li>实际上，编译器会通过编写一个私有方法来解析这个lambda表达式，然后把表达式的代码移动到这个方法里。</li></ul><h2 id="Lambda表达式的形式"><a href="#Lambda表达式的形式" class="headerlink" title="Lambda表达式的形式"></a>Lambda表达式的形式</h2><ul><li>(parameters) =&gt; expression-or-statement-block</li><li>(参数)=&gt; 表达式或语句块</li><li>其中如果只有一个参数并且类型可推断的话，那么参数的小括号可以省略</li></ul><h2 id="lambda表达式与委托"><a href="#lambda表达式与委托" class="headerlink" title="lambda表达式与委托"></a>lambda表达式与委托</h2><ul><li>每个lambda表达式的参数对应委托的参数</li><li>表达式的类型对应委托的返回类型</li></ul><pre class="line-numbers language-CS"><code class="language-CS">x => x * x;delegate int Transformer(int i);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Lambda表达式-–-语句块"><a href="#Lambda表达式-–-语句块" class="headerlink" title="Lambda表达式 – 语句块"></a>Lambda表达式 – 语句块</h2><ul><li>Lambda表达式的代码也可以是语句块</li></ul><pre class="line-numbers language-CS"><code class="language-CS">x => {return x * X};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Func-和-Action"><a href="#Func-和-Action" class="headerlink" title="Func 和 Action"></a>Func 和 Action</h2><ul><li>Lambda表达式通常与Func和Action委托一起使用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="functionAction.png" alt="functionAction"></p><p><strong>显式指定Lambda表达式的参数类型</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="lambdademo1.png" alt="lambdademo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="lambdademo2.png" alt="lambdademo2"></p><h2 id="捕获外部变量"><a href="#捕获外部变量" class="headerlink" title="捕获外部变量"></a>捕获外部变量</h2><ul><li>lambda表达式可以引用本地的变量和所在方法的参数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="capture1.png" alt="capture1"></p><h2 id="被捕获的变量"><a href="#被捕获的变量" class="headerlink" title="被捕获的变量"></a>被捕获的变量</h2><ul><li>被Lambda表达式引用的外部变量叫做被捕获的变量（captured variables）。</li><li>捕获了外部变量的lambda表达式叫做闭包。</li><li>被捕获的变量是在委托被实际调用的时候才被计算，而不是在捕获的时候。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="capture2.png" alt="capture2"></p><ul><li>Lambda表达式本身也可以更新被捕获的变量</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="capture3.png" alt="capture3"></p><ul><li>被捕获的变量的生命周期会被延长到和委托一样</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="capture4.png" alt="capture4"></p><h2 id="捕获迭代变量"><a href="#捕获迭代变量" class="headerlink" title="捕获迭代变量"></a>捕获迭代变量</h2><ul><li>当捕获for循环的迭代变量时，C#会把这个变量当作是在循环外部定义的变量，这就意味着每次迭代捕获的都是同一个变量。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="capture5.png" alt="capture5"></p><p><strong>如何解决</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="how.png" alt="how"></p><p><strong>注意：foreach</strong></p><ul><li>C#4，和C#5+的区别</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="foreach.png" alt="foreach"></p><h2 id="Lambda表达式-vs-本地方法"><a href="#Lambda表达式-vs-本地方法" class="headerlink" title="Lambda表达式 vs 本地方法"></a>Lambda表达式 vs 本地方法</h2><p><strong>本地方法是C#7的一个新特性。它和Lambda表达式在功能上有很多重复之处，但它有*三个优点：</strong></p><ul><li>可以简单明了的进行递归</li><li>无需指定委托类型（那一堆代码）</li><li>性能开销略低一点</li></ul><p><strong>本地方法效率更高是因为它避免了委托的间接调用（需要CPU周期，内存分配）。本地方法也可以访问所在方法的本地变量，而且无需编译器把被捕获的变量hoist到隐藏的类。</strong></p><h2 id="匿名方法-vs-Lambda表达式"><a href="#匿名方法-vs-Lambda表达式" class="headerlink" title="匿名方法 vs Lambda表达式"></a>匿名方法 vs Lambda表达式</h2><p><strong>匿名方法和Lambda表达式很像，但是缺少以下三个特性：</strong></p><ul><li>隐式类型参数</li><li>表达式语法（只能是语句块）</li><li>编译表达式树的能力，通过赋值给Expression<t></t></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="lambdaExpression.png" alt="lambdaExpression"></p><h2 id="匿名方法-其它"><a href="#匿名方法-其它" class="headerlink" title="匿名方法 - 其它"></a>匿名方法 - 其它</h2><ul><li>捕获外部变量的规则和Lambda表达式是一样的。</li><li>但匿名方法可以完全省略参数声明，尽管委托需要参数</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public event EventHandler Clicked = delegate{};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这就避免了触发事件前的null检查</li></ul><pre class="line-numbers language-CS"><code class="language-CS">//Notice that we omit the parameters:Clicked += delegate {Console.Write("Clicked");};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-4-3 事件</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-4-3/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-4-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Event-事件"><a href="#Event-事件" class="headerlink" title="Event  事件"></a>Event  事件</h1><ul><li>使用委托的时候，通常会出现两个角色，一个广播者，一个订阅者</li></ul><h2 id="广播和订阅"><a href="#广播和订阅" class="headerlink" title="广播和订阅"></a>广播和订阅</h2><ul><li>使用委托的时候，通常会出现两个角色，一个广播者，一个订阅者</li><li>广播者这个类型包含一个委托字段，广播者通过调用委托来决定什么时候进行广播。</li><li>订阅者是方法目标的接收者，订阅者可以决定何时开始或结束监听，方式是通过在委托上调用+=和-=。</li><li>一个订阅者不知道和不干扰其它的订阅者。</li></ul><h2 id="Event-事件-1"><a href="#Event-事件-1" class="headerlink" title="Event  事件"></a>Event  事件</h2><ul><li><p>事件就是将上述模式正式化的一个语言特性。</p></li><li><p>事件是一种结构，为了实现广播者/订阅者模型，它只暴露了所需的委托特性的部分子集。</p></li><li><p>事件的主要目的就是防止订阅者之间互相干扰。</p><h2 id="声明事件"><a href="#声明事件" class="headerlink" title="声明事件"></a>声明事件</h2></li><li><p>最简单的声明事件的方式就是在委托前面加上event关键字</p></li></ul><p><strong>内外区别对待</strong></p><ul><li>Broadercaster类型里面的代码拥有对PriceChanged的完全访问权，在这里就可以把它当作委托。</li><li>而Broadercaster类型之外的代码只能对PriceChanged这个event执行+=或-=操作。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="inout.png" alt="inout"></p><p><strong>事件在内部是如何工作的？</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="eventhow1.png" alt="eventhow1"></p><ul><li>首先，编译器把事件的声明翻译成类似下面的代码：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="eventhow2.png" alt="eventhow2"></p><ul><li>add 和 remove 关键字代表着显式的事件访问器，有点像属性访问器。</li><li>然后编译器会查看Broadcaster内部对PriceChanged的引用，如果不是+=或-=的操作，那就直接把它们定向到底层的委托字段priceChanged。</li><li>第三点，编译器把作用在event上的+=和-=操作翻译成调用add或remove访问器。</li></ul><h2 id="标准的事件模式"><a href="#标准的事件模式" class="headerlink" title="标准的事件模式"></a>标准的事件模式</h2><ul><li>为编写事件，.NET定义了一个标准的模式</li><li>System.EventArgs，一个预定义的框架类，除了静态的Empty属性之外，它没有其它成员。</li><li>EventArgs是为事件传递信息的类的基类。</li></ul><p><strong>例子</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="case.png" alt="case"></p><p><strong>通常是根据所含有的信息进行命名，而不是所使用的事件</strong><br><strong>通常通过属性或只读字段来暴露数据</strong></p><h2 id="为事件选择或定义委托"><a href="#为事件选择或定义委托" class="headerlink" title="为事件选择或定义委托"></a>为事件选择或定义委托</h2><ul><li>返回类型是void；</li><li>接收两个参数，第一个参数类型是object，第二参数类型是EventArgs的子类。第一个参数表示事件的广播者，第二个参数包含需要传递的信息；</li><li>名称必须以EventHandler结尾。</li></ul><p><strong>System.EventHandler<t></t></strong></p><ul><li>Framework定一了一个范型委托System.EventHandler<t>，它满足上述规则。</t></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="eventhandler.png" alt="eventhandler"></p><h2 id="针对选择的委托定义事件"><a href="#针对选择的委托定义事件" class="headerlink" title="针对选择的委托定义事件"></a>针对选择的委托定义事件</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="defineevent.png" alt="defineevent"></p><h2 id="可触发事件的protected-virtual方法"><a href="#可触发事件的protected-virtual方法" class="headerlink" title="可触发事件的protected  virtual方法"></a>可触发事件的protected  virtual方法</h2><ul><li>方法名必须和事件一致，前面再加上On，接收一个EventArgs参数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="protectvirtualdemo1.png" alt="protectvirtualdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="protectvirtualdemo2.png" alt="protectvirtualdemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="protectvirtualdemo3.png" alt="protectvirtualdemo3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="protectvirtualdemo4.png" alt="protectvirtualdemo4"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="protectvirtualdemo5.png" alt="protectvirtualdemo5"></p><ul><li>多线程的场景下，你需要在测试或调用前，把委托赋给一个临时变量，来避免线程安全相关的错误：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="error1.png" alt="error1"></p><ul><li>在C#6之后，可以这样写：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="error2.png" alt="error2"></p><h2 id="非范型的EventHandler"><a href="#非范型的EventHandler" class="headerlink" title="非范型的EventHandler"></a>非范型的EventHandler</h2><ul><li>当事件不携带多余信息的时候，可以使用非范型的EventHandler委托。</li><li>EventArgs.Empty属性</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="EventArgsEmpty.png" alt="EventArgsEmpty"></p><h2 id="事件访问器"><a href="#事件访问器" class="headerlink" title="事件访问器"></a>事件访问器</h2><ul><li>事件访问器是事件的+=和-=函数的实现。</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public event EventHandler PriceChanged;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>编译器会把它转化为：</strong></p><ul><li>一个私有的委托字段</li><li>一对公共的事件访问器函数（add_PriceChanged和remove_PriceChanged），这两个函数的实现会把+=和-=操作交给私有的委托字段。</li><li>也可以显式的定义事件访问器</li></ul><h2 id="显式定义的事件访问器"><a href="#显式定义的事件访问器" class="headerlink" title="显式定义的事件访问器"></a>显式定义的事件访问器</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="obviousDefine.png" alt="obviousDefine"></p><ul><li>当事件访问器仅仅是另一个广播事件的类的中继。</li><li>当类暴露大量event，但是大部分时候都只有少数的订阅者存在。</li><li>显式实现一个声明了事件的接口。</li></ul><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><ul><li>virtual，可以被重写；abstract，sealed，static。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="classFoo.png" alt="classFoo"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-4-2 委托（下）</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-4-2/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-4-2/</url>
      
        <content type="html"><![CDATA[<h1 id="实例方法目标和静态方法目标"><a href="#实例方法目标和静态方法目标" class="headerlink" title="实例方法目标和静态方法目标"></a>实例方法目标和静态方法目标</h1><ul><li>当一个实例方法被赋值给委托对象的时候，这个委托对象不仅要保留着对方法的引用，还要保留着方法所属实例的引用。</li><li>System.Delegate 的Target属性就代表着这个实例。</li><li>如果引用的是静态方法，那么Target属性的值就是null。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="delegate.png" alt="delegate"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="delegatedemo.png" alt="delegatedemo"></p><h2 id="泛型委托类型"><a href="#泛型委托类型" class="headerlink" title="泛型委托类型"></a>泛型委托类型</h2><ul><li>委托类型可以包含泛型类型参数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericdemo1.png" alt="genericdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericdemo2.png" alt="genericdemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericdemo3.png" alt="genericdemo3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericdemo4.png" alt="genericdemo4"><br><strong>这里可以自动推断出来  是int 根据参数</strong></p><h1 id="Func-和-Action-委托"><a href="#Func-和-Action-委托" class="headerlink" title="Func 和 Action 委托"></a>Func 和 Action 委托</h1><ul><li>使用泛型委托，就可以写出这样一组委托类型，它们可调用的方法可以拥有任意的返回类型和任意（合理）数量的参数。<h2 id="Func-和-Action"><a href="#Func-和-Action" class="headerlink" title="Func 和 Action"></a>Func 和 Action</h2></li><li>System 命名空间</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="system.png" alt="system"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="systemdemo1.png" alt="systemdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="systemdemo2.png" alt="systemdemo2"></p><p><strong>例子</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="case.png" alt="case"></p><h1 id="委托-vs-接口"><a href="#委托-vs-接口" class="headerlink" title="委托 vs 接口"></a>委托 vs 接口</h1><p><strong>委托可以解决的问题，接口都可以解决。</strong><br><strong>什么情况下更适合使用委托而不是接口呢？当下列条件之一满足时：</strong></p><ul><li>接口只能定义一个方法</li><li>需要多播能力</li><li>订阅者需要多次实现接口</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="delegateInterface.png" alt="delegateInterface"></p><h2 id="委托的兼容性-–-委托类型"><a href="#委托的兼容性-–-委托类型" class="headerlink" title="委托的兼容性 – 委托类型"></a>委托的兼容性 – 委托类型</h2><ul><li>委托类型之间互不相容，即使方法签名一样：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="deleteType.png" alt="deleteType"></p><h2 id="委托的兼容性-–-委托实例"><a href="#委托的兼容性-–-委托实例" class="headerlink" title="委托的兼容性 – 委托实例"></a>委托的兼容性 – 委托实例</h2><ul><li>如果委托实例拥有相同的方法目标，那么委托实例就认为是相等的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="delegateInstance.png" alt="delegateInstance"></p><h2 id="委托的兼容性-–-参数"><a href="#委托的兼容性-–-参数" class="headerlink" title="委托的兼容性 – 参数"></a>委托的兼容性 – 参数</h2><ul><li>当你调用一个方法时，你提供的参数（argument）可以比方法的参数（parameter）定义更具体。</li><li>委托可以接受比它的方法目标更具体的参数类型，这个叫ContraVariance。</li><li>和泛型类型参数一样，委托的variance仅支持引用转换。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="delegatePara1.png" alt="delegatePara1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="delegatePara2.png" alt="delegatePara2"></p><h2 id="委托的兼容性-–-返回类型"><a href="#委托的兼容性-–-返回类型" class="headerlink" title="委托的兼容性 – 返回类型"></a>委托的兼容性 – 返回类型</h2><ul><li>调用方法时，你可以得到一个比请求的类型更具体的类型的返回结果。</li><li>委托的目标方法可以返回比委托描述里更具体的类型的返回结果，Covariance。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="return.png" alt="return"></p><h2 id="泛型委托类型参数的variance"><a href="#泛型委托类型参数的variance" class="headerlink" title="泛型委托类型参数的variance"></a>泛型委托类型参数的variance</h2><ul><li>Covariance，out</li><li>ContraVariance，in</li><li>看一下func 和action的源码定义</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-4-1 委托（上）</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-4-1/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-4-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Delegates-委托"><a href="#Delegates-委托" class="headerlink" title="Delegates 委托"></a>Delegates 委托</h1><ul><li>委托是一个对象，它知道如何调用一个方法</li></ul><h2 id="委托类型和委托实例"><a href="#委托类型和委托实例" class="headerlink" title="委托类型和委托实例"></a>委托类型和委托实例</h2><ul><li>委托类型定义了委托实例可以调用的那类方法，具体来说，委托类型定义了方法的返回类型和参数。</li></ul><p><strong>例子</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="case.png" alt="case"></p><h2 id="委托实例"><a href="#委托实例" class="headerlink" title="委托实例"></a>委托实例</h2><p><strong>把方法赋值给委托变量的时候就创建了委托实例。</strong></p><pre class="line-numbers language-CS"><code class="language-CS">Transformer t=Square;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>调用</strong></p><pre class="line-numbers language-CS"><code class="language-CS">int answer = t(3);  //answer is 9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>完整的例子</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo1.png" alt="demo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo2.png" alt="demo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo3.png" alt="demo3"></p><ul><li>委托的实例其实就是调用者的委托：调用者调用委托，然后委托调用目标方法。</li><li>间接的把调用者和目标方法解耦合了。</li></ul><pre class="line-numbers language-CS"><code class="language-CS">Transformer t = Square;Trandformer t = new Transformer(Square);t(3)t.Invoke(3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写插件式的方法"><a href="#编写插件式的方法" class="headerlink" title="编写插件式的方法"></a>编写插件式的方法</h2><ul><li>方法是在运行时才赋值给委托变量的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="plugindemo1.png" alt="plugindemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="plugindemo2.png" alt="plugindemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="plugindemo3.png" alt="plugindemo3"></p><h2 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h2><ul><li>所有的委托实例都具有多播的能力。一个委托实例可以引用一组目标方法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="multiple.png" alt="multiple"></p><ul><li><ul><li>和 += 操作符可以合并委托实例</li></ul></li><li>调用d就会调用SomeMethod1和SomeMethod2</li><li>委托的调用顺序与它们的定义顺序一致</li><li><ul><li>和 -= 会把右边的委托从左边的委托里移除</li></ul></li></ul><pre class="line-numbers language-CS"><code class="language-CS">d-=SomeMethod1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>委托变量使用+或+=操作符时，其操作数可以是null。就相当于把一个新的值赋给了委托变量。</li></ul><pre class="line-numbers language-CS"><code class="language-CS">SomeDelegate d = null;d += SomeMethod1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>相当于：</strong></p><pre class="line-numbers language-CS"><code class="language-CS">d = SomeMethod1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>对单个目标方法的委托变量使用-=操作符时，就相当于把null值赋给了委托变量。</li><li>委托是不可变的</li><li>使用+=或-=操作符时，实际上是创建了新的委托实例，并把它赋给当前的委托变量。</li><li>如果多播委托的返回类型不是void，那么调用者从最后一个被调用的方法来接收返回值。前面的方法仍然会被调用，但是其返回值就被弃用了。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="multipledemo1.png" alt="multipledemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="multipledemo2.png" alt="multipledemo2"></p><h1 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h1><ul><li>所有的委托类型都派生于 System.MulticastDelegate，而它又派生于System.Delegate。</li><li>C#会把作用于委托的+，-，+=，-=操作编译成使用System.Delegate的Combine和Remove两个静态方法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="delegate.png" alt="delegate"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-13 协变  逆变  不变</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-13/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-13/</url>
      
        <content type="html"><![CDATA[<h1 id="Covariance，-Contravariance，-Invariance"><a href="#Covariance，-Contravariance，-Invariance" class="headerlink" title="Covariance， Contravariance， Invariance"></a>Covariance， Contravariance， Invariance</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo1.png" alt="demo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo2.png" alt="demo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo3.png" alt="demo3"></p><p><strong>T 既作为输入  又作为输出  是不对的  危险的</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo4.png" alt="demo4"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo5.png" alt="demo5"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo6.png" alt="demo6"></p><ul><li>Covariance 协变，当值作为返回值/out 输出</li><li>Contravariance 逆变，当值作为输入 input</li><li>Invariance 不变，当值既是输入又是输出</li><li>public interface IEnumerable<out t=""></out></li><li>public delegate void Action<in t=""></in></li><li>public interface IList<t></t></li></ul><h1 id="variance"><a href="#variance" class="headerlink" title="variance"></a>variance</h1><ul><li>variance 只能出现在接口和委托里。</li></ul><h1 id="Variance-转换"><a href="#Variance-转换" class="headerlink" title="Variance 转换"></a>Variance 转换</h1><ul><li>涉及到variance的转换就是variance转换。</li><li>Variance转换是引用转换的一个例子。引用转换就是指，你无法改变其底层的值，只能改变编译时类型。</li><li>identity conversion，对CLR而言从一个类型转化到相同的类型  本体转换</li></ul><h1 id="合理的转换"><a href="#合理的转换" class="headerlink" title="合理的转换"></a>合理的转换</h1><ul><li>如果从A到B的转换是本体转换或者隐式引用转换，那么从IEnumerable<a>到IEnumerable<b>的转换就是合理的：</b></a></li><li>IEnumerable<string> to IEnumerable<object></object></string></li><li>IEnumerable<string> to IEnumerable<iconvertible>:</iconvertible></string></li><li>IEnumerable<idisposable> to IEnumerable<object></object></idisposable></li></ul><h1 id="不合理的转换"><a href="#不合理的转换" class="headerlink" title="不合理的转换"></a>不合理的转换</h1><ul><li>IEnumerable<object> to IEnumerable<string></string></object></li><li>IEnumerable<string> to IEnumerable<stream></stream></string></li><li>IEnumerable<int> to IEnumerable<iconvertible> 装箱操作  不是引用转换</iconvertible></int></li><li>IEnumerable<int> to IEnumerable<long> 数值转换</long></int></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo7.png" alt="demo7"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo8.png" alt="demo8"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo9.png" alt="demo9"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo10.png" alt="demo10"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo11.png" alt="demo11"></p><ul><li>C#的泛型，生产类型（例如List<t>）可以被编译到dll里。这是因为这种在生产者和产制封闭类型的消费者之间的合成是发生在运行时的。</t></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-12 泛型约束  子类  自引用  静态数据  转换</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-12/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-12/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型的约束"><a href="#泛型的约束" class="headerlink" title="泛型的约束"></a>泛型的约束</h1><ul><li>默认情况下，泛型的类型参数（parameter）可以是任何类型的。</li><li>如果只允许使用特定的类型参数（argument），就可以指定约束。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="constraint.png" alt="constraint"></p><h2 id="泛型约束-例子"><a href="#泛型约束-例子" class="headerlink" title="泛型约束 例子"></a>泛型约束 例子</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Constraintcase.png" alt="Constraintcase"></p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericconstraint.png" alt="genericconstraint"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericconstraint2.png" alt="genericconstraint2"><br><strong>T是不可空的值类型  这个泛型代表了可空值类型</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericconstraint3.png" alt="genericconstraint3"><br><strong>T有一个无参的构造函数  可以new</strong></p><h2 id="裸类型约束"><a href="#裸类型约束" class="headerlink" title="裸类型约束"></a>裸类型约束</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Netconstraint.png" alt="Netconstraint"></p><h2 id="泛型类型的子类"><a href="#泛型类型的子类" class="headerlink" title="泛型类型的子类"></a>泛型类型的子类</h2><ul><li>泛型class可以有子类，在子类里，可以继续让父类的类型参数保持开放</li></ul><pre class="line-numbers language-CS"><code class="language-CS">class Stack<T>  {...}class SpecialStack<T> {...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在子类里，也可以使用具体的类型来关闭（封闭）父类的类型参数</li></ul><pre class="line-numbers language-CS"><code class="language-CS">class InStack: Stack<int>{...}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>子类型也可以引入新的类型参数</li></ul><pre class="line-numbers language-CS"><code class="language-CS">class List<T>class KeyedList<T,TKey>:List<T>{..}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="泛型类型的子类-1"><a href="#泛型类型的子类-1" class="headerlink" title="泛型类型的子类"></a>泛型类型的子类</h2><ul><li>技术上来讲，所有子类的类型参数都是新鲜的。你可以认为子类先把父类的类型参数（argument）给关闭了，然后又打开了。为这个先关闭后打开的类型参数（argument）带来新的名称或含义。</li></ul><pre class="line-numbers language-CS"><code class="language-CS">class List<T>{...}class KeyedList<TElement,TKey>:List<TElement>{..}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="自引用的泛型声明"><a href="#自引用的泛型声明" class="headerlink" title="自引用的泛型声明"></a>自引用的泛型声明</h2><ul><li>在封闭类型参数（argument）的时候，该类型可以把它自己作为具体的类型。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="selfreference.png" alt="selfreference"></p><h2 id="静态数据"><a href="#静态数据" class="headerlink" title="静态数据"></a>静态数据</h2><ul><li>针对每一个封闭类型，静态数据是唯一的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="staticdata.png" alt="staticdata"></p><h2 id="类型参数和转换"><a href="#类型参数和转换" class="headerlink" title="类型参数和转换"></a>类型参数和转换</h2><ul><li>C#的转换操作符支持下列转换：</li><li>数值转换</li><li>引用转换</li><li>装箱拆箱转换</li><li>自定义转换</li><li>决定采用的是哪种转换，发生在编译时，根据已知类型的操作数来决定。</li></ul><h2 id="类型参数和转换-1"><a href="#类型参数和转换-1" class="headerlink" title="类型参数和转换"></a>类型参数和转换</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Typechange.png" alt="Typechange"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Typechange2.png" alt="Typechange2"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-11 泛型为什么存在  类型参数  默认值</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-11/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-11/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型简介"><a href="#泛型简介" class="headerlink" title="泛型简介"></a>泛型简介</h1><h2 id="泛型的作用"><a href="#泛型的作用" class="headerlink" title="泛型的作用"></a>泛型的作用</h2><ul><li>跨类型可复用的代码：继承 和 泛型。</li><li>继承 –&gt; 基类</li><li>泛型 –&gt; 带有“（类型）占位符” 的“模板”</li></ul><h2 id="泛型类型（Generic-Types）"><a href="#泛型类型（Generic-Types）" class="headerlink" title="泛型类型（Generic Types）"></a>泛型类型（Generic Types）</h2><ul><li>泛型会声明类型参数 – 泛型的消费者需要提供类型参数（argument）来把占位符类型填充上。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericTypes1.png" alt="genericTypes1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericTypes2.png" alt="genericTypes2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericTypes3.png" alt="genericTypes3"></p><h2 id="Open-Type-amp-Closed-Type"><a href="#Open-Type-amp-Closed-Type" class="headerlink" title="Open Type &amp; Closed Type"></a>Open Type &amp; Closed Type</h2><ul><li>Stack<t> Open Type（开放类型）</t></li><li>Stack<int> Closed Type（封闭类型）</int></li><li>在运行时，所有的泛型类型实例都是封闭的（占位符类型已被填充了）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="OpenClose.png" alt="OpenClose"></p><p><strong>为什么泛型会出现？</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="whygeneric.png" alt="whygeneric"></p><ul><li>需要装箱和向下转换，这种转换在编译时无法进行检查</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="whygeneric2.png" alt="whygeneric2"></p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><ul><li>泛型方法在方法的签名内也可以声明类型参数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericMethod1.png" alt="genericMethod1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericMethod2.png" alt="genericMethod2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericMethod3.png" alt="genericMethod3"></p><ul><li>在泛型类型里面的方法，除非也引入了类型参数（type parameters），否则是不会归为泛型方法的。</li><li>只有类型和方法可以引入类型参数，属性、索引器、事件、字段、构造函数、操作符等都不可以声明类型参数。但是他们可以使用他们所在的泛型类型的类型参数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="genericMethod4.png" alt="genericMethod4"></p><h2 id="声明类型参数"><a href="#声明类型参数" class="headerlink" title="声明类型参数"></a>声明类型参数</h2><ul><li>在声明class、struct、interface、delegate的时候可以引入类型参数（Type parameters）。</li><li>其它的例如属性，就不可以引入类型参数，但是可以使用类型参数。</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public struct Nullable<T>{  public T Value {get;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="声明类型参数-1"><a href="#声明类型参数-1" class="headerlink" title="声明类型参数"></a>声明类型参数</h2><ul><li>泛型类型/泛型方法可以有多个类型参数：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="declaregeneric1.png" alt="declaregeneric1"></p><h2 id="声明泛型类型"><a href="#声明泛型类型" class="headerlink" title="声明泛型类型"></a>声明泛型类型</h2><ul><li>泛型类型/泛型方法的名称可以被重载，条件是参数类型的个数不同：</li></ul><pre class="line-numbers language-CS"><code class="language-CS">class A {}class A<T> {}class A<T1,T2> {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>按约定，泛型类型/泛型方法如果只有一个类型参数，那么就叫T。</li><li>当使用多个类型参数的时候，每个类型参数都使用T作为前缀，随后跟着具有描述性的一个名字。</li></ul><h2 id="Typeof-与-未绑定的泛型类型"><a href="#Typeof-与-未绑定的泛型类型" class="headerlink" title="Typeof 与 未绑定的泛型类型"></a>Typeof 与 未绑定的泛型类型</h2><ul><li>开放的泛型类型在编译后就变成了封闭的泛型类型。</li><li>但是如果作为Type对象，那么未绑定的泛型类型在运行时是可以存在的。（只能通过typeof操作符来实现）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="unbinding.png" alt="unbinding"></p><h2 id="泛型的默认值"><a href="#泛型的默认值" class="headerlink" title="泛型的默认值"></a>泛型的默认值</h2><ul><li>使用default关键字来获取泛型类型参数的默认值<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="default.png" alt="default"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-10 枚举和嵌套类型</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-10/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-10/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举简介"><a href="#枚举简介" class="headerlink" title="枚举简介"></a>枚举简介</h1><ul><li>枚举是一个特殊的值类型，它可以让你指定一组命名的数值常量。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="enum.png" alt="enum"></p><h1 id="枚举的底层原理"><a href="#枚举的底层原理" class="headerlink" title="枚举的底层原理"></a>枚举的底层原理</h1><ul><li>每个枚举都对应一个底层的整形数值(Enum.GetUnderlyingType())。默认：</li><li>是int类型</li><li>0，1，2…会按照枚举成员的声明顺序自动赋值</li><li>也可以指定其他的类型作为枚举的整数类型，例如byte：</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public enum BorderSide : byte {Left,Right,Top,Bottom}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>也可以单独指定枚举成员对应的整数值</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public enum BorderSide : byte {Left=1,Right=2,Top=10,Bottom=11}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>也可以只指定其中某些成员的数值，未被赋值的成员将接着它前面已赋值成员的值递增</li></ul><h1 id="枚举的转换"><a href="#枚举的转换" class="headerlink" title="枚举的转换"></a>枚举的转换</h1><ul><li>枚举可以显式的和其底层的数值相互转换</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="enumexchange.png" alt="enumexchange"></p><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><ul><li>在枚举表达式里，0数值会被编译器特殊对待，它不需要显式的转换：</li></ul><pre class="line-numbers language-CS"><code class="language-CS">BorderSide b=0;if(b==0)...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>因为枚举的第一个成员通常被当作“默认值”，它的值默认就是0</li><li>组合枚举里，0表示没有标志（flags）</li></ul><h2 id="Flags-Enum"><a href="#Flags-Enum" class="headerlink" title="Flags Enum"></a>Flags Enum</h2><ul><li>可以对枚举的成员进行组合</li><li>为了避免歧义，枚举成员的需要显式的赋值。典型的就是使用2的乘幂</li></ul><pre class="line-numbers language-CS"><code class="language-CS">[Flag]public enum BorderSide {None=0,Left=1,Right=2,Top=4,Bottom=8}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>flags enum，可以使用位操作符，例如 | 和 &amp;。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="flagenum.png" alt="flagenum"></p><p><strong>Flags enum 底层原理</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Flagenumdemo.png" alt="Flagenumdemo"></p><h2 id="Flags-属性"><a href="#Flags-属性" class="headerlink" title="Flags 属性"></a>Flags 属性</h2><ul><li>按约定，如果枚举成员可组合的话，flags 属性就应该应用在枚举类型上。</li><li>如果声明了这样的枚举却没有使用flags属性，你仍然可以组合枚举的成员，但是调用枚举实例的ToString()方法时，输出的将是一个数值而不是一组名称。</li><li>按约定，可组合枚举的名称应该是复数的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="flagdemo1.png" alt="flagdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="flagdemo2.png" alt="flagdemo2"></p><ul><li>在声明可组合枚举的时候，可以直接使用组合的枚举成员作为成员：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Flags.png" alt="Flags"></p><h2 id="枚举支持的操作符"><a href="#枚举支持的操作符" class="headerlink" title="枚举支持的操作符"></a>枚举支持的操作符</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operate.png" alt="operate"></p><ul><li>其中按位的、比较的、算术的操作符返回的都是处理底层值后得到的结果</li><li>加法操作符只允许一个枚举和一个整形数值相加，两个枚举相加是不可以的</li></ul><h2 id="类型安全的问题"><a href="#类型安全的问题" class="headerlink" title="类型安全的问题"></a>类型安全的问题</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeSafty.png" alt="TypeSafty"></p><ul><li>检查枚举值的合理性：Enum.IsDefined()静态方法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeSaftydemo.png" alt="TypeSaftydemo"><br><strong>据说不支持flags enum</strong></p><h1 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h1><ul><li>嵌套类型就是声明在另一个类型作用范围内的类型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Nesting.png" alt="Nesting"></p><h2 id="嵌套类型的特性"><a href="#嵌套类型的特性" class="headerlink" title="嵌套类型的特性"></a>嵌套类型的特性</h2><ul><li>可访问封闭类型的私有成员，以及任何封闭类型能访问的东西</li><li>可以使用所有的访问修饰符来声明，不仅仅是public和internal</li><li>嵌套类型的默认访问级别是private而不是internal</li><li>从封闭类型外边访问嵌套类型需要使用到封闭类型的名称</li></ul><h2 id="嵌套类型的例子"><a href="#嵌套类型的例子" class="headerlink" title="嵌套类型的例子"></a>嵌套类型的例子</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Nestingdemo1.png" alt="Nestingdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Nestingdemo2.png" alt="Nestingdemo2"></p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><pre class="line-numbers language-CS"><code class="language-CS">public enum BorderSide {Left,Right, Top, Bottom}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>如何把上面这个枚举类型变成一个含有其所有成员/底层数值的集合？</p></li><li><p>[BorderSide.Left, BorderSide.Right, BorderSide. Top, BorderSide. Bottom]</p></li><li><p>[0,1,2,3]</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharpb Basic Tutorial Chapter-3-9 接口简介</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-9/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-9/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h1><ul><li>接口与class类似，但是它只为其成员提供了规格，而没有提供具体的实现</li><li>接口的成员都是隐式抽象的</li><li>一个class或者struct可以实现多个接口</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interface.png" alt="interface"></p><h1 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h1><ul><li>接口的成员都是隐式public的，不可以声明访问修饰符</li><li>实现接口对它的所有成员进行public的实现：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interfaceImplement1.png" alt="interfaceImplement1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interfaceImplement2.png" alt="interfaceImplement2"></p><h2 id="对象与接口的转换"><a href="#对象与接口的转换" class="headerlink" title="对象与接口的转换"></a>对象与接口的转换</h2><ul><li>可以隐式的把一个对象转化成它实现的接口：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="objectInterface.png" alt="objectInterface"></p><p><strong>虽然Countdown是一个internal的class，但是可以通过把它的实例转化成IEnumerator接口来公共的访问它的成员。</strong></p><h2 id="接口的扩展"><a href="#接口的扩展" class="headerlink" title="接口的扩展"></a>接口的扩展</h2><ul><li>接口可以继承其它接口</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interfaceExpand.png" alt="interfaceExpand"></p><ul><li>IRedoable继承了IUndoable的所有成员</li></ul><h2 id="显式的接口实现"><a href="#显式的接口实现" class="headerlink" title="显式的接口实现"></a>显式的接口实现</h2><ul><li>实现多个接口的时候可能会造成成员签名的冲突。通过显式实现接口成员可以解决这个问题。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="obviousinterface1.png" alt="obviousinterface1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="obviousinterface2.png" alt="obviousinterface2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="obviousinterface3.png" alt="obviousinterface3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="obviousinterface4.png" alt="obviousinterface4"></p><ul><li>本例中，想要调用相应实现的接口方法，只能把其实例转化成相应的接口才行：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="obviousinterface5.png" alt="obviousinterface5"></p><p><strong>另一个显式实现接口成员的理由是故意隐藏那些对于类型来说不常用的成员。</strong></p><h2 id="virtual的实现接口成员"><a href="#virtual的实现接口成员" class="headerlink" title="virtual的实现接口成员"></a>virtual的实现接口成员</h2><ul><li>隐式实现的接口成员默认是sealed的。</li><li>如果想要进行重写的话，必须在基类中把成员标记为virtual或者abstract。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="virtual.png" alt="virtual"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="virtualdemo1.png" alt="virtualdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="virtualdemo2.png" alt="virtualdemo2"><br><strong>输出分别是 child parent parent 因为child里面写的方法相当于隐藏了子类的方法  所以接口最终调用的是父类的方法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="virtualdemo3.png" alt="virtualdemo3"><br><strong>Override 相当于覆盖了原来的方法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="virtualdemo4.png" alt="virtualdemo4"><br><strong>这三个都是输出 child</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="virtualdemo5.png" alt="virtualdemo5"><br><strong>最后两个输出都是parent</strong></p><h2 id="virtual的实现接口成员-1"><a href="#virtual的实现接口成员-1" class="headerlink" title="virtual的实现接口成员"></a>virtual的实现接口成员</h2><ul><li>无论是转化为基类还是转化为接口来调用接口的成员，调用的都是子类的实现:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="virtualimplement.png" alt="virtualimplement"></p><ul><li>显示实现的接口成员不可以被标记为virtual，也不可以通过寻常的方式来重写，但是可以对其进行重新实现。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="virtualimplementdemo.png" alt="virtualimplementdemo"></p><h2 id="在子类中重新实现接口"><a href="#在子类中重新实现接口" class="headerlink" title="在子类中重新实现接口"></a>在子类中重新实现接口</h2><ul><li>子类可以重新实现父类已经实现的接口成员</li><li>重新实现会“劫持”成员的实现（通过转化为接口然后调用），无论在基类中该成员是否是virtual的。无论该成员是显式的还是隐式的实现（但最好还是显式实现的）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childimplement.png" alt="childimplement"></p><ul><li>转化为接口后调用重新实现的成员，就是调用子类的实现</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childimplement2.png" alt="childimplement2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childimplementdemo1.png" alt="childimplementdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childimplementdemo2.png" alt="childimplementdemo2"><br><strong>输出Child Parent 既然已经转换为接口了  接口的直接实现就是它的父类  所以输出parent</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childimplementdemo3.png" alt="childimplementdemo3"><br><strong>输出  Child child 实例是child</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childimplementdemo4.png" alt="childimplementdemo4"><br><strong>输出 Child child parent</strong></p><h2 id="在子类中重新实现接口-1"><a href="#在子类中重新实现接口-1" class="headerlink" title="在子类中重新实现接口"></a>在子类中重新实现接口</h2><p><strong>如果Textbox是隐式实现的Undo：</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childrebuildinterface1.png" alt="childrebuildinterface1"><br><strong>那么：</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childrebuildinterface2.png" alt="childrebuildinterface2"></p><ul><li>说明重新实现接口这种劫持只对转化为接口后的调用起作用，对转化为基类后的调用不起作用。</li><li>重新实现适用于重写显式实现的接口成员。</li></ul><h2 id="重新实现接口的替代方案"><a href="#重新实现接口的替代方案" class="headerlink" title="重新实现接口的替代方案"></a>重新实现接口的替代方案</h2><ul><li>即使是显式实现的接口，接口的重新实现也可能有一些问题：</li><li>子类无法调用基类的方法</li><li>基类的开发人员没有预见到方法会被重新实现，并且可能不允许潜在的后果</li><li>最好的办法是设计一个无需重新实现的基类：</li><li>隐式实现成员的时候，按需标记virtual</li><li>显式实现成员的时候，可以这样做：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="childrebuildinterface3.png" alt="childrebuildinterface3"><br><strong>如果不想有子类，那么直接把class 给 sealed。</strong></p><h2 id="接口与装箱"><a href="#接口与装箱" class="headerlink" title="接口与装箱"></a>接口与装箱</h2><ul><li>把struct转化为接口会导致装箱</li><li>调用struct上隐式实现的成员不会导致装箱</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interfacebox.png" alt="interfacebox"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-8 struct 和访问修饰符</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-8/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-8/</url>
      
        <content type="html"><![CDATA[<h1 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h1><ul><li>struct和class差不多，但是有一些不同：</li><li>struct是值类型，class是引用类型</li><li>struct不支持继承（除了隐式的继承了object，具体点就是System.ValueType）</li></ul><h2 id="struct的成员"><a href="#struct的成员" class="headerlink" title="struct的成员"></a>struct的成员</h2><p><strong>class能有的成员，struct也可以有，但是以下几个不行：</strong></p><ul><li>无参构造函数</li><li>字段初始化器</li><li>终结器</li><li>virtual或protected成员</li></ul><h2 id="struct的构建"><a href="#struct的构建" class="headerlink" title="struct的构建"></a>struct的构建</h2><ul><li>struct有一个无参的构造函数，但是你不能对其进行重写。它会对字段进行按位归零操作。</li><li>当你定义struct构造函数的时候，必须显式的为每个字段赋值。</li><li>不可以有字段初始化器。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="structbuild.png" alt="structbuild"></p><p><strong>有三个错误的例子</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="errorcase.png" alt="errorcase"><br><strong>字段初始化  无参数构造函数  只有一个参数</strong></p><h2 id="5个访问修饰符"><a href="#5个访问修饰符" class="headerlink" title="5个访问修饰符"></a>5个访问修饰符</h2><ul><li>public，完全可访问。enum和interface的成员默认都是这个级别</li><li>internal，当前assembly或朋友assembly可访问，非嵌套类型的默认访问级别</li><li>private，本类可访问。class和struct的成员的默认访问级别。</li><li>protected，本类或其子类可以访问。</li><li>protected internal，联合了protected和internal的访问级别。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="describe.png" alt="describe"></p><h2 id="朋友assembly"><a href="#朋友assembly" class="headerlink" title="朋友assembly"></a>朋友assembly</h2><ul><li>通过添加System.Runtime.CompilerServices.InternalsVisibleTo 这个Assembly的属性，并指定朋友Assembly的名字，就可以把internal的成员暴露给朋友Assembly。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="friendassembly.png" alt="friendassembly"></p><ul><li>如果朋友Assembly有Strong name，那么就必须指定其完整的160字节的public key。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="friendassembly2.png" alt="friendassembly2"></p><h2 id="类型限制成员的访问级别会"><a href="#类型限制成员的访问级别会" class="headerlink" title="类型限制成员的访问级别会"></a>类型限制成员的访问级别会</h2><pre class="line-numbers language-CS"><code class="language-CS">class C {public void Foo() {} }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="访问修饰符的限制"><a href="#访问修饰符的限制" class="headerlink" title="访问修饰符的限制"></a>访问修饰符的限制</h2><ul><li>当重写父类的函数时，重写后的函数和被重写的函数的访问级别必须一致</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AccessLimit.png" alt="AccessLimit"></p><ul><li>有一个例外：当在其它Assembly重写protected internal的方法时，重写后的方法必须是protected。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-7 object类型</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-7/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-7/</url>
      
        <content type="html"><![CDATA[<h1 id="object类型"><a href="#object类型" class="headerlink" title="object类型"></a>object类型</h1><ul><li>object（System.Object）是所有类型的终极父类。</li><li>所有类型都可以向上转换为object。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="object.png" alt="object"></p><p><strong>后进先出，压栈  出栈</strong></p><h2 id="object是引用类型"><a href="#object是引用类型" class="headerlink" title="object是引用类型"></a>object是引用类型</h2><ul><li>但值类型可以转化为object，反之亦然。（类型统一）</li></ul><pre class="line-numbers language-CS"><code class="language-CS">stack.Push(3);int three = (int) stack.Pop();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在值类型和object之间转化的时候，CLR必须执行一些特殊的工作，以弥合值类型和引用类型之间语义上的差异，这个过程就叫做<strong>装箱</strong>和<strong>拆箱</strong>。</p><h2 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h2><ul><li>装箱就是把值类型的实例转化为引用类型实例的动作</li><li>目标引用类型可以是object，也可以是某个接口</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="box.png" alt="box"></p><h2 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h2><ul><li>拆箱正好相反，把那个对象转化为原来的值类型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="unbox.png" alt="unbox"></p><p><strong>拆箱需要显式的转换。</strong><br><strong>拆箱</strong></p><ul><li>运行时会检查这个值类型和object对象的真实类型是否匹配</li><li>如果不匹配就抛出InvalidCastException</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="unboxdemo.png" alt="unboxdemo"></p><p><strong>注意</strong></p><ul><li>装箱对于类型统一是非常重要的。但是系统不够完美</li><li>数组和泛型只支持引用转换，不支持装箱</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="attention.png" alt="attention"></p><h2 id="装箱拆箱的复制"><a href="#装箱拆箱的复制" class="headerlink" title="装箱拆箱的复制"></a>装箱拆箱的复制</h2><ul><li>装箱会把值类型的实例复制到一个新的对象</li><li>拆箱会把这个对象的内容再复制给一个值类型的实例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="copybox.png" alt="copybox"></p><h2 id="静态和运行时类型检查"><a href="#静态和运行时类型检查" class="headerlink" title="静态和运行时类型检查"></a>静态和运行时类型检查</h2><ul><li>C#的程序既会做静态的类型检查（编译时），也会做运行时的类型检查（CLR）</li><li>静态检查：不运行程序的情况下，让编译器保证你程序的正确性</li></ul><pre class="line-numbers language-CS"><code class="language-CS">int x = "5";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>运行时的类型检查由CLR执行，发生在向下的引用转换或拆箱的时候。</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="staticcheck.png" alt="staticcheck"></p><ul><li>运行时检查之所以可行是因为：每个在heap上的对象内部都存储了一个类型token。这个token可以通过调用object的GetType()方法来获取</li></ul><h2 id="GetType方法与typeof操作符"><a href="#GetType方法与typeof操作符" class="headerlink" title="GetType方法与typeof操作符"></a>GetType方法与typeof操作符</h2><ul><li>所有C#的类型在运行时都是以System.Type的实例来展现的</li><li>两种方式可以获得System.Type对象：</li><li>在实例上调用<strong>GetType()</strong>方法</li><li>在类型名上使用<strong>typeof</strong>操作符。</li><li>GetType是在运行时被算出的</li><li>typeof 是在编译时被算出（静态）（当涉及到泛型类型参数时，它是由JIT编译器来解析的）</li></ul><p><strong>System.TYPE</strong></p><ul><li>System.Type的属性有：类型的名称，Assembly，基类等等。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="systemType.png" alt="systemType"></p><p><strong>ToString方法</strong></p><ul><li>ToString()方法会返回一个类型实例的默认文本表示</li><li>所有的内置类型都重写了该方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="tostring1.png" alt="tostring1"></p><ul><li>可以在自定义的类型上重写ToString()方法</li><li>如果你不重写该方法，那就会返回该类型的名称</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="tostring2.png" alt="tostring2"></p><ul><li>当你调用一个被重写的object成员的时候，例如在值类型上直接调用ToString()方法，这时候就不会发生装箱操作</li><li>但是如果你进行了转换，那么装箱操作就会发生</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="tostring3.png" alt="tostring3"></p><h2 id="object的成员列表"><a href="#object的成员列表" class="headerlink" title="object的成员列表"></a>object的成员列表</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="objectList.png" alt="objectList"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-6 继承  抽象  隐藏成员 new sealed base 初始化顺序</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-6/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-6/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类和抽象成员"><a href="#抽象类和抽象成员" class="headerlink" title="抽象类和抽象成员"></a>抽象类和抽象成员</h1><ul><li>使用abstract声明的类是抽象类</li><li>抽象类不可以被实例化，只有其具体的子类才可以实例化</li><li>抽象类可以定义抽象成员</li><li>抽象成员和virtual成员很像，但是不提供具体的实现。子类必须提供实现，除非子类也是抽象的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="abstract.png" alt="abstract"></p><h2 id="隐藏被继承的成员"><a href="#隐藏被继承的成员" class="headerlink" title="隐藏被继承的成员"></a>隐藏被继承的成员</h2><ul><li>父类和子类可以定义相同的成员：</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public class A {public int Counter = 1;}public class B : A {public int Counter = 2;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>class B中的 Counter字段就隐藏了A里面的Counter字段（通常是偶然发生的）。例如子类添加某个字段之后，父类也添加了相同的一个字段。</li><li>编译器会发出警告</li><li>按照如下规则进行解析：</li><li>编译时对A的引用会绑定到A.Counter</li><li>编译时对B的引用会绑定到B.Counter</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo1.png" alt="demo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo2.png" alt="demo2"></p><p><strong>上面输出  1 2 1</strong></p><ul><li>如果想故意隐藏父类的成员，可以在子类的成员前面加上 new 修饰符</li><li>这里的 new 修饰符仅仅会抑制编译器的警告而已</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public class A {public int Counter = 1;}public class B : A {public new int Counter = 2;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="new-vs-override"><a href="#new-vs-override" class="headerlink" title="new vs override"></a>new vs override</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="newVSoverride.png" alt="newVSoverride"></p><h2 id="sealed"><a href="#sealed" class="headerlink" title="sealed"></a>sealed</h2><p>针对重写的成员，可以使用sealed关键字把它“密封”起来，防止它被其子类重写</p><pre class="line-numbers language-CS"><code class="language-CS">public sealed override decimal Liability{get{return Mortgage;}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以sealed 类本身，就隐式的sealed所有的virtual函数了</p><h2 id="base-关键字"><a href="#base-关键字" class="headerlink" title="base 关键字"></a>base 关键字</h2><p><strong>base 和 this 略像，base主要用于：</strong></p><ul><li>从子类访问父类里被重写的函数</li><li>调用父类的构造函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="base.png" alt="base"></p><p><strong>这种写法可保证，访问的一定是Asset的Liability属性，无论该属性是被重写还是被隐藏了</strong></p><h1 id="构造函数和继承"><a href="#构造函数和继承" class="headerlink" title="构造函数和继承"></a>构造函数和继承</h1><ul><li>子类必须声明自己的构造函数</li><li>从子类可访问父类的构造函数，但不是自动继承的</li><li>子类必须重新定义它想要暴露的构造函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo3.png" alt="demo3"></p><ul><li>调用父类的构造函数需要使用 base 关键字</li><li>父类的构造函数肯定会先执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo4.png" alt="demo4"></p><h2 id="隐式调用无参的父类构造函数"><a href="#隐式调用无参的父类构造函数" class="headerlink" title="隐式调用无参的父类构造函数"></a>隐式调用无参的父类构造函数</h2><ul><li>如果子类的构造函数里没有使用base关键字，那么父类的无参构造函数会被隐式的调用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="parentctor.png" alt="parentctor"></p><ul><li>如果父类没有无参构造函数，那么子类就必须在构造函数里使用base关键字</li></ul><h2 id="构造函数和字段初始化顺序"><a href="#构造函数和字段初始化顺序" class="headerlink" title="构造函数和字段初始化顺序"></a>构造函数和字段初始化顺序</h2><ul><li>对象被实例化时，初始化动作按照如下顺序进行：</li></ul><p><strong>从子类到父类：</strong></p><ul><li>字段被初始化</li><li>父类构造函数的参数值被算出</li></ul><p><strong>从父类到子类</strong></p><ul><li>构造函数体被执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="initorder.png" alt="initorder"></p><h2 id="重载和解析"><a href="#重载和解析" class="headerlink" title="重载和解析"></a>重载和解析</h2><ul><li>看例子：</li></ul><pre class="line-numbers language-CS"><code class="language-CS">static void Foo(Asset a){}static void Foo(House h){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>重载方法被调用时，更具体的类型拥有更高的优先级</strong></p><pre class="line-numbers language-CS"><code class="language-CS">House h= new House(...);Foo(h);    //Calls Foo(House)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>调用哪个重载方法是在编译时就确定下来的</strong></p><pre class="line-numbers language-CS"><code class="language-CS">Asset a=new House(...);Foo(a);    //Calls Foo(Asset);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-5 继承  多态  引用转换 virtual</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-5/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-5/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>一个类可以继承另一个类，从而对原有类进行扩展和自定义</li><li>可以叫做子类和父类</li><li>继承的类让你可以重用被继承类的功能</li><li>C#里，一个类只能继承于一个类，但是这个类却可以被多个类继承</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="1.png" alt="1"></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ul><li>引用是多态的，类型为x的变量可以引用其子类的对象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="2.png" alt="2"></p><ul><li>因为子类具有父类的全部功能特性，所以参数可以是子类</li><li>但是反过来是不行的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="3.png" alt="3"></p><h1 id="引用转换"><a href="#引用转换" class="headerlink" title="引用转换"></a>引用转换</h1><ul><li>一个对象的引用可以隐式的转换到其父类的引用（向上转换）</li><li>想转换到子类的引用则需要显式转换（向下转换）</li><li>引用转换：创建了一个新的引用，它也指向同一个对象</li></ul><h2 id="向上转换"><a href="#向上转换" class="headerlink" title="向上转换"></a>向上转换</h2><ul><li><p>从子类的引用创建父类的引用<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="4.png" alt="4"></p></li><li><p>变量a依然指向同一个Stock对象（msft也指向它）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="5.png" alt="5"></p><ul><li>尽管变量a和msft指向同一个对象，但是a的可视范围更小一些</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="6.png" alt="6"></p><h2 id="向下转换"><a href="#向下转换" class="headerlink" title="向下转换"></a>向下转换</h2><ul><li>从父类的引用创建出子类的引用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="7.png" alt="7"></p><ul><li>和向上转换一样，只涉及到引用，底层的对象不会受影响</li><li>需要显式转换，因为可能会失败</li><li>如果向下转换失败，那么会抛出 InvalidCastException（属于运行时类型检查）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="8.png" alt="8"></p><h2 id="as-操作符"><a href="#as-操作符" class="headerlink" title="as 操作符"></a>as 操作符</h2><ul><li>as 操作符会执行向下转换，如果转换失败，不会抛出异常，值会变为null</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="9.png" alt="9"></p><ul><li>as 操作符无法做自定义转换</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="10.png" alt="10"></p><h2 id="is-操作符"><a href="#is-操作符" class="headerlink" title="is 操作符"></a>is 操作符</h2><ul><li>is 操作符会检验引用的转换是否成功。换句话说，判断对象是否派生于某个类（或者实现了某个接口）</li><li>通常用于向下转换前的验证：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="11.png" alt="11"></p><ul><li>如果拆箱转换可以成功的话，那么使用is操作符的结果会是true</li></ul><h2 id="is-操作符和模式变量"><a href="#is-操作符和模式变量" class="headerlink" title="is 操作符和模式变量"></a>is 操作符和模式变量</h2><ul><li>C# 7里，在使用 is 操作符的时候，可以引入一个变量</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="12.png" alt="12"></p><ul><li>引入的变量可以立即“消费”<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="13.png" alt="13"></li></ul><h1 id="virtual函数成员"><a href="#virtual函数成员" class="headerlink" title="virtual函数成员"></a>virtual函数成员</h1><ul><li>标记为virtual的函数可以被子类重写，包括方法、属性、索引器、事件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="14.png" alt="14"></p><h1 id="override-重写"><a href="#override-重写" class="headerlink" title="override 重写"></a>override 重写</h1><ul><li>使用override修饰符，子类可以重写父类的函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="15.png" alt="15"></p><ul><li>virtual方法和重写方法的签名、返回类型、可访问程度必须是一样的</li><li>重写方法里使用base关键字可以调用父类的实现</li></ul><p><strong>注意</strong></p><ul><li>在构造函数里调用virtual方法可能比较危险，因为编写子类的开发人员可能不知道他们在重写方法的时候，面对的是一个未完全初始化的对象。</li><li>换句话说，重写的方法可能会访问依赖于还未被构造函数初始化的字段的属性或方法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo1.png" alt="demo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo2.png" alt="demo2"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-4 常量  静态构造函数和类  终结器  局部类和方法 nameof</title>
      <link href="/2019/08/11/csharp-learning-series-chapter-3-4/"/>
      <url>/2019/08/11/csharp-learning-series-chapter-3-4/</url>
      
        <content type="html"><![CDATA[<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><ul><li>一个值不可以改变的静态字段</li><li>在编译时值就已经定下来了。</li><li>任何使用常量的地方，编译器都会把这个常量替换为它的值</li><li>常量的类型可以是内置的数值类型、bool、char、string或enum</li><li>使用const关键字声明，声明的同时必须使用具体的值来对其初始化</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public class Test{  public const string Message = "Hello World";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常量与静态只读字段"><a href="#常量与静态只读字段" class="headerlink" title="常量与静态只读字段"></a>常量与静态只读字段</h2><ul><li>常量比静态只读字段更严格：</li><li>可使用的类型</li><li>字段初始化的语义上</li><li>常量是在编译时进行值的估算的</li></ul><p><strong>常量</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="1.png" alt="1"></p><p><strong>注意</strong></p><ul><li><p>当值有可能改变，并且需要暴露给其它Assembly的时候，静态只读字段是相对较好的选择</p><pre class="line-numbers language-CS"><code class="language-CS">public const decimal ProgramVersion = 2.3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果 Y Assembly引用了 X Assembly并且使用了这个常量，那么在编译的时候，2.3这个值就会被固化于Y Assembly里。这意味着，如果后来X重编译了，这个常量变成了2.4，如果Y不重新编译的话，Y将仍然使用2.3这个值，直到Y被重新编译，它的值才会变成2.4。静态只读字段就会避免这个问题的发生</p></li></ul><p><strong>本地常量</strong></p><ul><li>方法里可以有本地的常量</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="2.png" alt="2"></p><h2 id="静态构造函数"><a href="#静态构造函数" class="headerlink" title="静态构造函数"></a>静态构造函数</h2><ul><li>静态构造函数，每个类型执行一次</li><li>非静态构造函数，每个实例执行一次</li><li>一个类型只能定义一个静态构造函数</li><li>必须无参</li><li>方法名与类型一致</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="3.png" alt="3"></p><p><strong>在类型使用之前的一瞬间，编译器会自动调用类型的静态构造函数：</strong></p><ul><li>实例化一个类型</li><li>访问类型的一个静态成员</li></ul><p><strong>只允许使用 unsafe 和 extern 修饰符</strong><br><strong>注意</strong></p><ul><li>如果静态构造函数抛出了未处理的异常，那么这个类型在该程序的剩余生命周期内将无法使用了</li></ul><p><strong>初始化顺序</strong></p><ul><li>静态字段的初始化器在静态构造函数被调用之前的一瞬间运行</li><li>如果类型没有静态构造函数，那么静态字段初始化器在类型被使用之前的一瞬间执行，或者更早，在运行时突发奇想的时候执行</li><li>静态字段的初始化顺序与它们的声明顺序一致</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="4.png" alt="4"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="5.png" alt="5"></p><h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><ul><li><p>类也可以是静态的</p></li><li><p>其成员必须全是静态的</p></li><li><p>不可以有子类</p><p><strong>例如</strong></p></li><li><p>System.Console</p></li><li><p>System.Math</p></li></ul><h1 id="Finalizer-终结器"><a href="#Finalizer-终结器" class="headerlink" title="Finalizer 终结器"></a>Finalizer 终结器</h1><ul><li>Finalizer是class专有的一种方法</li><li>在GC回收未引用对象的内存之前运行</li><li>其实就是对object的Finalize()方法重写的一种语法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="6.png" alt="6"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="7.png" alt="7"></p><h1 id="Partial-Type-局部类型"><a href="#Partial-Type-局部类型" class="headerlink" title="Partial Type 局部类型"></a>Partial Type 局部类型</h1><ul><li>允许一个类型的定义分布在多个地方（文件）</li><li>典型应用：一个类的一部分是自动生成的，另一部分需要手动写代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="8.png" alt="8"></p><ul><li>每个分布的类都必须使用partial来声明</li><li>下面这个例子就会报错：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="9.png" alt="9"></p><ul><li>每个分布类的成员不能冲突，不能有同样参数的构造函数</li><li>各分布类完全靠编译器来进行解析：每个分布类在编译时必须可用，且在同一个Assembly里</li><li>如果有父类，可以在一个或多个分布类上指明，但必须一致</li><li>每个分布类可以独立的实现不同的接口</li><li>编译器无法保证各分布类的字段的初始化顺序</li></ul><h2 id="partial-method-局部方法"><a href="#partial-method-局部方法" class="headerlink" title="partial method 局部方法"></a>partial method 局部方法</h2><ul><li>partial 类型可以有partial method</li><li>自动生成的分布类里可以有partial method，通常作为“钩子”使用，在另一部分的partial method里，我们可以对这个方法进行自定义。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="10.png" alt="10"></p><ul><li>partial method由两部分组成：定义 和 实现。</li><li>定义部分 通常是生成的</li><li>实现部分 通常是手动编写的</li><li>如果partial method只有定义，没有实现，那么编译的时候该方法定义就没有了，调用该方法的代码也没有了。这就允许自动生成的代码可以自由的提供钩子，不用担心代码膨胀</li><li>partial method必须是void，并且隐式private的</li></ul><h1 id="nameof-操作符-C-6"><a href="#nameof-操作符-C-6" class="headerlink" title="nameof 操作符 C# 6"></a>nameof 操作符 C# 6</h1><ul><li>nameof 操作符会返回任何符号（类型、成员、变量…）的名字（string）</li><li>利于重构</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="11.png" alt="11"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-3 class 对象初始化 this 属性  索引器</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-3-3/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-3-3/</url>
      
        <content type="html"><![CDATA[<h2 id="对象初始化器"><a href="#对象初始化器" class="headerlink" title="对象初始化器"></a>对象初始化器</h2><p><strong>对象任何可访问的字段/属性在构建之后，可通过对象初始化器直接为其进行设定值</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="1.png" alt="1"></p><h2 id="编译器生成的代码"><a href="#编译器生成的代码" class="headerlink" title="编译器生成的代码"></a>编译器生成的代码</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="2.png" alt="2"></p><h2 id="对象初始化器-vs-可选参数"><a href="#对象初始化器-vs-可选参数" class="headerlink" title="对象初始化器 vs 可选参数"></a>对象初始化器 vs 可选参数</h2><ul><li>如果不使用初始化器，上例中的构造函数也可以使用可选参数：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="3.png" alt="3"></p><p><strong>可选参数方式</strong></p><ul><li>优点：可以让Bunny类的字段/属性只读</li><li>缺点：每个可选参数的值都被嵌入到了calling site，C#会把构造函数的调用翻译成：</li></ul><pre class="line-numbers language-CS"><code class="language-CS">Bunny b1 = new Bunny("Bo",true,false);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="This-引用"><a href="#This-引用" class="headerlink" title="This 引用"></a>This 引用</h2><ul><li>this引用指的是实例的本身。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="4.png" alt="4"></p><ul><li>this引用可以让你把字段与本地变量或参数区分开</li><li>只有class/struct的非静态成员才可以使用this</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public class Test{  string name;  public Test(string name){ this.name=name;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性-Propertyies"><a href="#属性-Propertyies" class="headerlink" title="属性 Propertyies"></a>属性 Propertyies</h2><ul><li>从外边来看，属性和字段很像。但从内部看，属性含有逻辑，就像方法一样</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="5.png" alt="5"></p><h2 id="属性的声明"><a href="#属性的声明" class="headerlink" title="属性的声明"></a>属性的声明</h2><ul><li>属性的声明和字段的声明很像，但多了一个 get set 块。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="6.png" alt="6"></p><h2 id="属性的get-set"><a href="#属性的get-set" class="headerlink" title="属性的get set"></a>属性的get set</h2><ul><li>get/set 代表属性的访问器</li><li>get访问器会在属性被读取的时候运行，必须返回一个该属性类型的值</li><li>set访问器会在属性被赋值的时候运行，有一个隐式的该类型的参数 value，通常你会把 value 赋给一个私有字段</li></ul><h2 id="属性与字段的区别"><a href="#属性与字段的区别" class="headerlink" title="属性与字段的区别"></a>属性与字段的区别</h2><ul><li>尽管属性的访问方式与字段的访问方式相同，但不同之处在于，属性赋予了实现者对获取和赋值的完全控制权。这种控制允许实现者选择任意所需的内部表示，不向属性的使用者公开其内部实现细节。</li></ul><h2 id="只读和计算的属性"><a href="#只读和计算的属性" class="headerlink" title="只读和计算的属性"></a>只读和计算的属性</h2><ul><li>如果属性只有get访问器，那么它是只读的</li><li>如果只有set访问器，那么它就是只写的（很少这样用）</li><li>属性通常拥有一个专用的“幕后”字段（backing field），这个幕后字段用来存储数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="7.png" alt="7"></p><h2 id="Expression-bodied-属性"><a href="#Expression-bodied-属性" class="headerlink" title="Expression-bodied 属性"></a>Expression-bodied 属性</h2><ul><li>从C# 6开始，你可以使用Expression-bodied形式来表示只读属性<pre class="line-numbers language-CS"><code class="language-CS">public decimal Worth => currentPrice * shareOwned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>C# 7，允许set访问器也可以使用该形式</strong></p><pre class="line-numbers language-CS"><code class="language-CS">public decimal Worth{  get => currentPrice * shareOwned;  set => sharesOwned = value/currentPrice;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动属性"><a href="#自动属性" class="headerlink" title="自动属性"></a>自动属性</h2><ul><li>属性最常见的一种实践就是：getter和setter只是对private field进行简单直接的读写</li><li>自动属性声明就告诉编译器来提供这种实现</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public class Stock{  ...  public decimal CurrentPrice{get;set;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编译器会自动生成一个私有的幕后字段，其名称不可引用（由编译器生成）</li><li>set 访问器也可以是private 或 protected</li></ul><h2 id="属性初始化器"><a href="#属性初始化器" class="headerlink" title="属性初始化器"></a>属性初始化器</h2><ul><li><p>从C# 6 开始，你可以为自动属性添加属性初始化器</p><pre class="line-numbers language-CS"><code class="language-CS">public decimal CurrentPrice{get;set;}= 123;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>只读的自动属性也可以使用（只读自动属性也可以在构造函数里被赋值）</p><pre class="line-numbers language-CS"><code class="language-CS">public int Maximun { get;}= 999;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="get-和-set的访问性"><a href="#get-和-set的访问性" class="headerlink" title="get 和 set的访问性"></a>get 和 set的访问性</h2><ul><li>get和set访问器可以拥有不同的访问级别</li><li>典型用法：public get，internal/private set</li><li>注意，属性的访问级别更“宽松”一些，访问器的访问级别更“严”一些</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="8.png" alt="8"></p><h2 id="CLR的属性实现"><a href="#CLR的属性实现" class="headerlink" title="CLR的属性实现"></a>CLR的属性实现</h2><ul><li>C#的属性访问器内部会编译成 get_XXX 和 set_XXX</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public decimal get_CurrentPrice{...}public void set_CurrentPrice(decimal value){...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简单的非virtual属性访问器会被JIT编译器进行内联（inline）操作，这会消除访问属性与访问字段之间的性能差异。内联是一种优化技术，它会把方法调用换成直接使用方法体。</p><h2 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h2><ul><li>索引器提供了一种可以访问封装了列表值或字典值的class/struct的元素的一种自然的语法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="9.png" alt="9"></p><ul><li>语法很像使用数组时用的语法，但是这里的索引参数可以是任何类型的</li><li>索引器和属性拥有同样的修饰符</li><li>可以按照下列方式使用null条件操作符：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="10.png" alt="10"></p><h2 id="实现索引器"><a href="#实现索引器" class="headerlink" title="实现索引器"></a>实现索引器</h2><ul><li>需要定义一个this属性，并通过中括号指定参数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="11.png" alt="11"></p><h2 id="使用索引器"><a href="#使用索引器" class="headerlink" title="使用索引器"></a>使用索引器</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="12.png" alt="12"></p><h2 id="多个索引器"><a href="#多个索引器" class="headerlink" title="多个索引器"></a>多个索引器</h2><ul><li>一个类型可以声明多个索引器，它们的参数类型可以不同</li><li>一个索引器可以有多个参数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="13.png" alt="13"></p><h2 id="只读索引器"><a href="#只读索引器" class="headerlink" title="只读索引器"></a>只读索引器</h2><ul><li>如果不写set访问器，那么这个索引器就是只读的</li><li>在C# 6以后，也可以使用 expression-bodied 语法</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public string this [int wordNum] => words[wordNum]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CLR的索引器实现"><a href="#CLR的索引器实现" class="headerlink" title="CLR的索引器实现"></a>CLR的索引器实现</h2><ul><li>索引器在内部会编译成get_Item和set_Item方法</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public string get_Item(int wordNum){...}public void set_Item(int wordNum, string value){...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-2 构造函数和解析函数</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-3-2/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-3-2/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul><li>在class或struct上运行初始化代码</li><li>和定义方法差不多，但构造函数的名和类型名一致，返回类型也和类型一致，并且返回类型就省略不写了</li><li>C#7，允许单语句的构造函数写成expression-bodied成员的形式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ctor1.png" alt="ctor1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ctor2.png" alt="ctor2"></p><h2 id="构造函数重载"><a href="#构造函数重载" class="headerlink" title="构造函数重载"></a>构造函数重载</h2><ul><li>class和struct可以重载构造函数</li><li>调用重载构造函数时使用this</li><li>当同一个类型下的构造函数A调用构造函数B的时候，B先执行</li><li>可以把表达式传递给另一个构造函数，但表达式本身不能使用this引用，因为这时候对象还没有被初始化，所以对象上任何方法的调用都会失败。但是可以使用static方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overridedemo1.png" alt="overridedemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overridedemo2.png" alt="overridedemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overridedemo3.png" alt="overridedemo3"><br><strong>因为这个时候还没有被初始化  所以不能用this</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overridedemo4.png" alt="overridedemo4"></p><h2 id="无参构造函数"><a href="#无参构造函数" class="headerlink" title="无参构造函数"></a>无参构造函数</h2><ul><li>对于class，如果你没有定义任何构造函数的话，那么C#编译器会自动生成一个无参的public构造函数。</li><li>但是如果你定义了构造函数，那么这个无参的构造函数就不会被生成了</li></ul><p><strong>构造函数和字段的初始化顺序</strong></p><ul><li>字段的初始化发生在构造函数执行之前</li><li>字段按照声明的先后顺序进行初始化</li></ul><p><strong>非public的构造函数</strong></p><ul><li>构造函数可以不是public的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="publicctor.png" alt="publicctor"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="publicctor2.png" alt="publicctor2"></p><h1 id="Deconstructor（C-7）"><a href="#Deconstructor（C-7）" class="headerlink" title="Deconstructor（C#7）"></a>Deconstructor（C#7）</h1><ul><li>C#7 引入了deconstructor 模式</li><li>作用基本和构造函数相反，它会把字段反赋给一堆变量</li><li>方法名必须是Deconstruct， 有一个或多个out参数</li><li>Deconstructor可以被重载</li><li>Deconstruct这个方法可以是扩展方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Deconstruct1.png" alt="Deconstruct1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Deconstruct2.png" alt="Deconstruct2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Deconstruct3.png" alt="Deconstruct3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Deconstruct4.png" alt="Deconstruct4"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Deconstruct5.png" alt="Deconstruct5"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Deconstruct6.png" alt="Deconstruct6"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Deconstruct7.png" alt="Deconstruct7"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-3-1 字段方法</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-3-1/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-3-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Main-content-of-Chapter-3"><a href="#Main-content-of-Chapter-3" class="headerlink" title="Main content of Chapter 3"></a>Main content of Chapter 3</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="content.png" alt="content"></p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p><strong>最常见的一种引用类型</strong></p><pre class="line-numbers language-CS"><code class="language-CS">class YourClassName{  //...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字段-Field"><a href="#字段-Field" class="headerlink" title="字段 Field"></a>字段 Field</h2><p><strong>是class 或 Struct 的成员，它是一个变量</strong></p><pre class="line-numbers language-CS"><code class="language-CS">class Octopus{  string name;  public int Age=10;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>readonly 修饰符</strong></p><ul><li>readonly 修饰符防止字段在构造之后被改变</li><li>readonly 字段只能在声名的时候被赋值，或在构造函数里被赋值</li></ul><p><strong>字段初始化</strong></p><ul><li>字段在声明的时候可以进行初始化</li><li>未初始化的字段有一个默认值</li><li>字段的初始化在构造函数之前运行</li></ul><p><strong>同时声明多个字段</strong></p><pre class="line-numbers language-CS"><code class="language-CS">static readonly int legs=8, eyes=2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>通常包含一些语句，会执行某个动作</li><li>可以传入参数</li><li>可以返回数据，返回类型</li><li>Void，不返回数据</li><li>ref/out 参数</li></ul><p><strong>方法的签名</strong></p><ul><li>一个类型内，其每个方法的签名必须是唯一的</li><li>签名：方法名、参数类型（含顺序，但与参数名称和返回类型无关）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo1.png" alt="demo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo2.png" alt="demo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo3.png" alt="demo3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo4.png" alt="demo4"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo5.png" alt="demo5"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo6.png" alt="demo6"></p><p><strong>Expression-bodied 方法</strong></p><pre class="line-numbers language-CS"><code class="language-CS">int Foo(int x){ return x*2;}int Foo(int x) => x*2;void Foo(int x) => Console.WriteLine(x);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>方法的重载 overload</strong></p><ul><li>类型里的方法可以进行重载（允许多个同名的方法同时存在），只要这些方法的签名不同就行<pre class="line-numbers language-CS"><code class="language-CS">void Foo(int x){...}void Foo(double x){...}void Foo(int x,float y){...}void Foo(float x, int y){...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-CS"><code class="language-CS">void Foo(int x){...}float Foo(int x){...}   //Compile-time error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>//方法签名不包含params 关键字<br>void Goo(int[] x){…}<br>voidFoo(params int[] x){…}   //Compile-time error</p><pre><code>## 按值传递 vs 按引用传递*   参数是按值传递的还是按引用传递的，也是方法签名的一部分```CSvoid Foo(int x){...}void Foo(ref int x){...}    //OK so farvoid Foo(int x){...}void Foo(ref int x){...}    //OK so farvoid Foo(out int x){...}    //Compile-time error</code></pre><h2 id="本地方法（C-7）"><a href="#本地方法（C-7）" class="headerlink" title="本地方法（C# 7）"></a>本地方法（C# 7）</h2><p><strong>这个方法只对大括号里面起作用  在属性  构造器里面一般会用</strong></p><pre class="line-numbers language-CS"><code class="language-CS">void WriteCubes(){  Console.WriteLine(Cube(3));  Console.WriteLine(Cube(4));  Console.WriteLine(Cube(5));  int Cube(int value) => value * value * value; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-12 Null</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-12/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-12/</url>
      
        <content type="html"><![CDATA[<h2 id="可空值类型和string-Null"><a href="#可空值类型和string-Null" class="headerlink" title="可空值类型和string Null"></a>可空值类型和string Null</h2><ul><li>可空值类型相关，Nullable<t>…</t></li><li>Null，空，空白string</li><li>可空值类型:</li><li>可空值类型是System.Nullable<t> 这个struct的实例</t></li><li>可空值类型除了可以正确的表示其底层数据类型的范围，还可以表示null</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="nullable.png" alt="nullable"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo1.png" alt="demo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo2.png" alt="demo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo3.png" alt="demo3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo4.png" alt="demo4"></p><ul><li>判断Null 和 空，空白string</li><li>if(name == null) {…}</li><li>if(string.isNullOrEmpty(name)) {…}</li><li>if(string.isNullOrWhiteSpace(name)) {…}</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="nulldemo1.png" alt="nulldemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="nulldemo2.png" alt="nulldemo2"></p><p><strong>False True</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullableT.png" alt="NullableT"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullableTdemo1.png" alt="NullableTdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullableTdemo2.png" alt="NullableTdemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullableTdemo3.png" alt="NullableTdemo3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullableTdemo4.png" alt="NullableTdemo4"></p><p><strong>Nullable<t>比较</t></strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullableTCompare1.png" alt="NullableTCompare1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullableTCompare2.png" alt="NullableTCompare2"></p><p><strong>Nullable<t>转换</t></strong></p><ul><li>T -&gt; Nullable<t> 隐式转换</t></li><li>Nullable<t> -&gt; T 显式转换</t></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullableTExchange1.png" alt="NullableTExchange1"></p><p><strong>检查Null的</strong></p><ul><li>?: 条件操作符</li><li>?? Null合并操作符</li><li>?. ?[ Null条件操作符</li></ul><p><strong>操作符</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="nulloperate.png" alt="nulloperate"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-11 命名空间</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-11/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-11/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="namespace1.png" alt="namespace1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="namespace2.png" alt="namespace2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="namespacedemo.png" alt="namespacedemo"></p><h2 id="using-指令"><a href="#using-指令" class="headerlink" title="using 指令"></a>using 指令</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="using.png" alt="using"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="usingdemo1.png" alt="usingdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="usingdemo2.png" alt="usingdemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="usingdemo3.png" alt="usingdemo3"></p><h2 id="using-static"><a href="#using-static" class="headerlink" title="using static"></a>using static</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="usingStatic.png" alt="usingStatic"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="usingdemo1.png" alt="usingdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="usingdemo2.png" alt="usingdemo2"></p><h2 id="命名空间里的规则"><a href="#命名空间里的规则" class="headerlink" title="命名空间里的规则"></a>命名空间里的规则</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="namespacerange.png" alt="namespacerange"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="namespacerangedemo1.png" alt="namespacerangedemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="namespcerangedemo2.png" alt="namespcerangedemo2"></p><h2 id="名称隐藏："><a href="#名称隐藏：" class="headerlink" title="名称隐藏："></a>名称隐藏：</h2><p><strong>如果同一个类型名同时出现在外层和内层的命名空间里，那么，直接使用类型名的时候，使用的是内层的。</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="namehidedemo.png" alt="namehidedemo"></p><h2 id="重复的命名空间"><a href="#重复的命名空间" class="headerlink" title="重复的命名空间"></a>重复的命名空间</h2><p><strong>可以重复声明命名空间，只要它们下面没有冲突的类型名就可以</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="duplicatenamespace.png" alt="duplicatenamespace"></p><h2 id="嵌套using指令"><a href="#嵌套using指令" class="headerlink" title="嵌套using指令"></a>嵌套using指令</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="qiantaousing.png" alt="qiantaousing"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="qiantaousingdemo.png" alt="qiantaousingdemo"></p><h2 id="为命名空间-类型起别名"><a href="#为命名空间-类型起别名" class="headerlink" title="为命名空间/类型起别名"></a>为命名空间/类型起别名</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="renameNamespace.png" alt="renameNamespace"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="renamedemo1.png" alt="renamedemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="renamedemo2.png" alt="renamedemo2"></p><h2 id="命名空间的高级特性"><a href="#命名空间的高级特性" class="headerlink" title="命名空间的高级特性"></a>命名空间的高级特性</h2><p><strong>Extern</strong><br><strong>Extern别名允许你的程序引用两个全名相同的类型名，通常这两个类型来自不同的Assembly</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="exten1.png" alt="exten1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="exten2.png" alt="exten2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="exten3.png" alt="exten3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="externdemo1.png" alt="externdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="externdemo2.png" alt="externdemo2"></p><h2 id="Extern-Alias"><a href="#Extern-Alias" class="headerlink" title="Extern Alias"></a>Extern Alias</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ExternAlina.png" alt="ExternAlina"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-10 语句 Statement</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-10/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-10/</url>
      
        <content type="html"><![CDATA[<h2 id="语句-Statement"><a href="#语句-Statement" class="headerlink" title="语句 Statement"></a>语句 Statement</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="statement.png" alt="statement"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="statement2.png" alt="statement2"></p><h2 id="声明语句"><a href="#声明语句" class="headerlink" title="声明语句"></a>声明语句</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="declarationStatement.png" alt="declarationStatement"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="declarationStatement2.png" alt="declarationStatement2"></p><h2 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="localvariable.png" alt="localvariable"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="localvariabledemo.png" alt="localvariabledemo"></p><h2 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="expressStatement.png" alt="expressStatement"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="expressStatement2.png" alt="expressStatement2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="expressstatementdemo.png" alt="expressstatementdemo"></p><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="select1.png" alt="select1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="if.png" alt="if"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ifdemo.png" alt="ifdemo"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="else.png" alt="else"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="elsedemo.png" alt="elsedemo"></p><p><strong>switch 语句</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="swaitch1.png" alt="swaitch1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="switch2.png" alt="switch2"></p><p><strong>Switch with patterns (C# 7.0)</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="switchcase.png" alt="switchcase"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="switchpatternsdemo1.png" alt="switchpatternsdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="switchpatternsdemo2.png" alt="switchpatternsdemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="switchpatternsdemo3.png" alt="switchpatternsdemo3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="switchpatternsdemo4.png" alt="switchpatternsdemo4"></p><h2 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Iteration1.png" alt="Iteration1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="literation2.png" alt="literation2"></p><p><strong>do…while</strong><br><strong>和while差不多，只不过bool表达式在代码体执行完之后才被检验</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="dowhiledemo1.png" alt="dowhiledemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="dowhiledemo2.png" alt="dowhiledemo2"></p><p><strong>for</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="for.png" alt="for"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="fordemo1.png" alt="fordemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="foedemo2.png" alt="foedemo2"></p><p><strong>*foreach</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="foreach.png" alt="foreach"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="foreachdemo.png" alt="foreachdemo"></p><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="drump.png" alt="drump"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="drump2.png" alt="drump2"></p><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p><strong>break语句可以结束迭代或switch语句的代码体</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="breakdemo.png" alt="breakdemo"></p><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p><strong>continue语句会放弃当前迭代中剩余语句的执行，直接从下一次迭代开始</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="continuedemo.png" alt="continuedemo"></p><h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="goto.png" alt="goto"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="gotodemo.png" alt="gotodemo"></p><h2 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="return.png" alt="return"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="returndemo1.png" alt="returndemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="returndemo2.png" alt="returndemo2"></p><h2 id="throw-语句"><a href="#throw-语句" class="headerlink" title="throw 语句"></a>throw 语句</h2><p><strong>抛出异常，表示发生了错误</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="throwdemo.png" alt="throwdemo"></p><h2 id="其它语句"><a href="#其它语句" class="headerlink" title="其它语句"></a>其它语句</h2><ul><li>using 语句</li><li>lock 语句</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-9 Null的操作符</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-9/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullMerge.png" alt="NullMerge"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullOperate.png" alt="NullOperate"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo.png" alt="demo"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NullOperate2.png" alt="NullOperate2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo2.png" alt="demo2"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-8 表达式和操作符</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-8/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="expressionandoperate.png" alt="expressionandoperate"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="expression.png" alt="expression"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operate.png" alt="operate"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="primaryexpression.png" alt="primaryexpression"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="voidexpression.png" alt="voidexpression"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="provideexpression.png" alt="provideexpression"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="provideexpression2.png" alt="provideexpression2"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operatepriority.png" alt="operatepriority"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="leftoperate.png" alt="leftoperate"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="rightoperate.png" alt="rightoperate"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operatetable.png" alt="operatetable"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operatetable2.png" alt="operatetable2"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-7 变量和参数</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-7/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="variable.png" alt="variable"></p><h2 id="Stack-VS-Heap"><a href="#Stack-VS-Heap" class="headerlink" title="Stack VS Heap"></a>Stack VS Heap</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="StackVsHeap.png" alt="StackVsHeap"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Stack.png" alt="Stack"><br><strong>每次都会进入都会有一块int被赋值</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Heap.png" alt="Heap"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="stackheapdemo.png" alt="stackheapdemo"></p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="memory.png" alt="memory"></p><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="GC.png" alt="GC"></p><h2 id="Static-字段"><a href="#Static-字段" class="headerlink" title="Static 字段"></a>Static 字段</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="static.png" alt="static"></p><h2 id="确定赋值"><a href="#确定赋值" class="headerlink" title="确定赋值"></a>确定赋值</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="assignment.png" alt="assignment"></p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="default.png" alt="default"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="default2.png" alt="default2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="defaultdemo1.png" alt="defaultdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="defaultdemo2.png" alt="defaultdemo2"></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>一个方法可以多个参数（parameters），参数（parameters）定义了必须为该方法提供的参数（arguments）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="parademo.png" alt="parademo"></p><h2 id="参数传递的方式"><a href="#参数传递的方式" class="headerlink" title="参数传递的方式"></a>参数传递的方式</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="parademo.png" alt="parademo"></p><h2 id="按值传递"><a href="#按值传递" class="headerlink" title="按值传递"></a>按值传递</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ValuePass.png" alt="ValuePass"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ValuePassdemo.png" alt="ValuePassdemo"></p><h2 id="按值传递引用类型-argument"><a href="#按值传递引用类型-argument" class="headerlink" title="按值传递引用类型 argument"></a>按值传递引用类型 argument</h2><p><strong>复制的是引用，不是对象</strong><br><strong>下面这个例子 输出的是test 传进去的是引用  改了内存里面的值</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ValuePassdemo2.png" alt="ValuePassdemo2"></p><h2 id="按引用传递-ref"><a href="#按引用传递-ref" class="headerlink" title="按引用传递 ref"></a>按引用传递 ref</h2><p><strong>想要按引用传递，可以使用ref 参数修饰符</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="refdemo.png" alt="refdemo"><br><strong>无论是引用类型还是值类型的参数，都可以按值或按引用传递</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="out.png" alt="out"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="outdemo.png" alt="outdemo"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="outVariable.png" alt="outVariable"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="outVariabledemo1.png" alt="outVariabledemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="outVariabledemo2.png" alt="outVariabledemo2"></p><h2 id="按引用类型进行传递的含义"><a href="#按引用类型进行传递的含义" class="headerlink" title="按引用类型进行传递的含义"></a>按引用类型进行传递的含义</h2><p><strong>当你按引用传递arguments的时候，相当于给现有变量的存储位置起了个别名，而不是创建了一个新的存储位置</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="referencePassDemo1.png" alt="referencePassDemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="referencePassDemo2.png" alt="referencePassDemo2"></p><h2 id="params修饰符"><a href="#params修饰符" class="headerlink" title="params修饰符"></a>params修饰符</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="params.png" alt="params"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="paramsdemo1.png" alt="paramsdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="paramsdemo2.png" alt="paramsdemo2"></p><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="optioanparams.png" alt="optioanparams"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="optioanparams2.png" alt="optioanparams2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="optioanparams3.png" alt="optioanparams3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="optiondemo1.png" alt="optiondemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="optiondemo2.png" alt="optiondemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="optiondemo3.png" alt="optiondemo3"></p><h2 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NameParams.png" alt="NameParams"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NameParamsdemo1.png" alt="NameParamsdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NameParamsdemo2.png" alt="NameParamsdemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NameParamsdemo3.png" alt="NameParamsdemo3"></p><h2 id="ref-Locals"><a href="#ref-Locals" class="headerlink" title="ref Locals"></a>ref Locals</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="refLocals.png" alt="refLocals"></p><h2 id="ref-returns"><a href="#ref-returns" class="headerlink" title="ref returns"></a>ref returns</h2><p><strong>可以从方法返回ref local，这就叫做ref return</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="refreturndemo1.png" alt="refreturndemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="refreturndemo2.png" alt="refreturndemo2"></p><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="var.png" alt="var"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="vardemo1.png" alt="vardemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="vardemo2.png" alt="vardemo2"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-6 数组</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-6/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="array1.png" alt="array1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="array2.png" alt="array2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="arraydemo1.png" alt="arraydemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="arraydemo2.png" alt="arraydemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="strengthfixed.png" alt="strengthfixed"></p><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="arraryinitdemo.png" alt="arraryinitdemo"></p><h2 id="默认元素的初始化"><a href="#默认元素的初始化" class="headerlink" title="默认元素的初始化"></a>默认元素的初始化</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="arrayinit.png" alt="arrayinit"><br><strong>下面例子中  一个是默认为0 一个是空字符  所以两个都是true</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="elementinitdemo.png" alt="elementinitdemo"></p><h2 id="值类型-VS-引用类型"><a href="#值类型-VS-引用类型" class="headerlink" title="值类型 VS 引用类型"></a>值类型 VS 引用类型</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeVsReference.png" alt="TypeVsReference"><br><strong>这时候输出是 0</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/TypeVsReferencedemo1.png" alt="TypeVsReferencedemo1"><br><strong>修改point的类型  换成引用类型</strong><br><strong>这时候会报异常 空值</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeVsReferencedemo2.png" alt="TypeVsReferencedemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeVsReferencedemo3.png" alt="TypeVsReferencedemo3"></p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="multipleArray.png" alt="multipleArray"></p><h2 id="矩形数组"><a href="#矩形数组" class="headerlink" title="矩形数组"></a>矩形数组</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="rectangle.png" alt="rectangle"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="rectangledemo1.png" alt="rectangledemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="rectangledemo2.png" alt="rectangledemo2"></p><h2 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a>交错数组</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="mixarray.png" alt="mixarray"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="mixarraydemo1.png" alt="mixarraydemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="mixarraydemo2.png" alt="mixarraydemo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="mixarraydemo3.png" alt="mixarraydemo3"></p><h2 id="简化数组初始化表达式"><a href="#简化数组初始化表达式" class="headerlink" title="简化数组初始化表达式"></a>简化数组初始化表达式</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="expression1.png" alt="expression1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="expression2.png" alt="expression2"></p><h2 id="边界检查"><a href="#边界检查" class="headerlink" title="边界检查"></a>边界检查</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="bordercheck.png" alt="bordercheck"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-5 char和string 类型</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-5/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-5/</url>
      
        <content type="html"><![CDATA[<h2 id="char"><a href="#char" class="headerlink" title="char"></a>char</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="char.png" alt="char"></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="exchangechar.png" alt="exchangechar"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="exchangechar2.png" alt="exchangechar2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="chardemo.png" alt="chardemo"></p><h2 id="char的转换"><a href="#char的转换" class="headerlink" title="char的转换"></a>char的转换</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="charexchange3.png" alt="charexchange3"></p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="string.png" alt="string"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="stringdemo1.png" alt="stringdemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="stringdemo2.png" alt="stringdemo2"></p><h2 id="逐字字符串"><a href="#逐字字符串" class="headerlink" title="逐字字符串"></a>逐字字符串</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="string.png" alt="string"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="verbatim1.png" alt="verbatim1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="verbatim2.png" alt="verbatim2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="verbatim3.png" alt="verbatim3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="verbatim4.png" alt="verbatim4"></p><h2 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="stringconnection.png" alt="stringconnection"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="stringconnectiondemo.png" alt="stringconnectiondemo"></p><h2 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="stringinterpolation.png" alt="stringinterpolation"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interpolation1.png" alt="interpolation1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interpolation2.png" alt="interpolation2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interpolation3.png" alt="interpolation3"></p><p align="center">The number is 666</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interpolation4.png" alt="interpolation4"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="interpolation5.png" alt="interpolation5"></p><h2 id="string-比较"><a href="#string-比较" class="headerlink" title="string 比较"></a>string 比较</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="stringCompare.png" alt="stringCompare"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-4 bool类型</title>
      <link href="/2019/08/10/csharp-learning-series-chapter-2-4/"/>
      <url>/2019/08/10/csharp-learning-series-chapter-2-4/</url>
      
        <content type="html"><![CDATA[<h2 id="bool的特点"><a href="#bool的特点" class="headerlink" title="bool的特点"></a>bool的特点</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="boolfeature.png" alt="boolfeature"></p><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p><strong>bool类型无法和数值类型进行相互转换</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operation1.png" alt="operation1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operation2.png" alt="operation2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo1.png" alt="demo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo2.png" alt="demo2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="demo3.png" alt="demo3"><br><strong>PS:</strong><br><strong>这里显然  前面两个不相等  不同的实例  不同的引用类型  第三个相等  同一个引用对象</strong></p><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><p><strong>&amp;&amp;和||条件操作符</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="conditionoperation.png" alt="conditionoperation"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="conditioanoperationdemo.png" alt="conditioanoperationdemo"></p><p><strong>&amp;和|条件操作符</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="conditionoperation2.png" alt="conditionoperation2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="conditioanoperationdemo2.png" alt="conditioanoperationdemo2"></p><p><strong>三元操作符</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="conditionoperation3.png" alt="conditionoperation3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="conditioanoperationdemo3.png" alt="conditioanoperationdemo3"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Chapter-2-3 数值类型</title>
      <link href="/2019/08/08/csharp-learning-series-chapter-2-3/"/>
      <url>/2019/08/08/csharp-learning-series-chapter-2-3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="predefinedTypes.png" alt="predefinedTypes"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="literal1.png" alt="literal1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="literal3.png" alt="literal3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="literal4.png" alt="literal4"></p><h2 id="数值Literal的类型推断"><a href="#数值Literal的类型推断" class="headerlink" title="数值Literal的类型推断"></a>数值Literal的类型推断</h2><ul><li>默认情况下，编译器会推断一个数值Literal是double还是整数类型：</li><li>如果包含小数点，或以指数形式展现，那么就是double类型</li><li>否则literal的类型是下面列表里第一个能容纳该数值的类型：int，uint，long，ulong</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="literal5.png" alt="literal5"></p><h2 id="数值的后缀"><a href="#数值的后缀" class="headerlink" title="数值的后缀"></a>数值的后缀</h2><ul><li>U、L很少使用，因为uint、long、ulong要么可以被推断出来，要么可以从int隐式转换过来</li><li>D  其实很多余。</li><li>F、M是比较有用的，当指定float或decimal的Literal的时候，应该加上。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="backType.png" alt="backType"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="backTypeTest.png" alt="backTypeTest"></p><h2 id="类型转换-整数转换"><a href="#类型转换-整数转换" class="headerlink" title="类型转换 整数转换"></a>类型转换 整数转换</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeExchange.png" alt="TypeExchange"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeExchange2.png" alt="TypeExchange2"></p><h2 id="类型转换-浮点型转换"><a href="#类型转换-浮点型转换" class="headerlink" title="类型转换 浮点型转换"></a>类型转换 浮点型转换</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeExchange3.png" alt="TypeExchange3"></p><h2 id="类型转换-浮点型和整数类型转换"><a href="#类型转换-浮点型和整数类型转换" class="headerlink" title="类型转换 浮点型和整数类型转换"></a>类型转换 浮点型和整数类型转换</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="TypeExchange4.png" alt="TypeExchange4"></p><p><strong>注意</strong></p><ul><li>当从浮点型转为整型时，小数部分是被截断的，没有舍入。</li><li>把一个很大的整数隐式的转换为浮点类型之后，会保证量级不变，但是偶尔会丢失精度。这是因为浮点类型有更多的量级，而精度可能不足。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="attention.png" alt="attention"></p><h2 id="decimal"><a href="#decimal" class="headerlink" title="decimal"></a>decimal</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="decimal.png" alt="decimal"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operation1.png" alt="operation1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operation2.png" alt="operation2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operation3.png" alt="operation3"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="operationdemo.png" alt="operationdemo"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overflow1.png" alt="overflow1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overflow2.png" alt="overflow2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overflowcheck.png" alt="overflowcheck"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overflowdemo.png" alt="overflowdemo"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="uncheck.png" alt="uncheck"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overflowcheck2.png" alt="overflowcheck2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="overflowdemo2.png" alt="overflowdemo2"></p><h2 id="8-16位整数类型"><a href="#8-16位整数类型" class="headerlink" title="8,16位整数类型"></a>8,16位整数类型</h2><ul><li>byte、sbyte、short、ushort</li><li>没有自己的算术操作符，C#会按需对它们进行隐式转换到大一点的整数类型</li><li>这里会将short转化为int 然后int默认隐式转化为short的时候就会编译出错</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="816Type1.png" alt="816Type1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="816Type2.png" alt="816Type2"></p><h2 id="float-double的特殊数值"><a href="#float-double的特殊数值" class="headerlink" title="float double的特殊数值"></a>float double的特殊数值</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="floatdouble.png" alt="floatdouble"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="floatdoubledemo.png" alt="floatdoubledemo"></p><h2 id="NAN-类型"><a href="#NAN-类型" class="headerlink" title="NAN 类型"></a>NAN 类型</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NAN.png" alt="NAN"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="NANDemo.png" alt="NANDemo"></p><h2 id="double-VS-decimal"><a href="#double-VS-decimal" class="headerlink" title="double VS decimal"></a>double VS decimal</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="doubleVSdecimal.png" alt="doubleVSdecimal"></p><h2 id="实数的舍入错误"><a href="#实数的舍入错误" class="headerlink" title="实数的舍入错误"></a>实数的舍入错误</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="error.png" alt="error"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="floatdemo.png" alt="floatdemo"></p><h2 id="Decimal"><a href="#Decimal" class="headerlink" title="Decimal"></a>Decimal</h2><p><strong>基于10，可以精确的表达基于10的数据（包括基于2，5的数据）</strong><br><strong>循环数据</strong><br>double 和 decimal  都不可以精确的表达循环数据</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="loopdata.png" alt="loopdata"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Basic Tutorial Series Chapter-2-2 转换  值类型和引用类型  内置类型分类</title>
      <link href="/2019/08/06/csharp-learning-series-chapter-2-2/"/>
      <url>/2019/08/06/csharp-learning-series-chapter-2-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Main-Content-Introduction"><a href="#Main-Content-Introduction" class="headerlink" title="Main Content Introduction"></a>Main Content Introduction</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="MainContent.png" alt="MainContent"></p><h1 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h1><p>如果编译器可以断定转换肯定会失败，那么两种转换都会被禁止。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Exchange1.png" alt="Exchange1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Exchange2.png" alt="Exchange2"></p><h1 id="值类型-VS-引用类型"><a href="#值类型-VS-引用类型" class="headerlink" title="值类型 VS 引用类型"></a>值类型 VS 引用类型</h1><p><strong>C# 类型分类</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="classification.png" alt="classification"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="classification2.png" alt="classification2"></p><p><strong>值类型</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Valuetype.png" alt="Valuetype"></p><p><strong>值类型的赋值</strong><br>值类型实例的赋值动作总是复制了该实例。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AssignmentOfValueType.png" alt="AssignmentOfValueType"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AssignmentOfValueTypeCode.png" alt="AssignmentOfValueTypeCode"></p><p><strong>引用类型</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="referenceType.png" alt="referenceType"></p><p><strong>引用类型赋值</strong><br>把 struct Class 改成  Point Class<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="referenceobject.png" alt="referenceobject"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="referenceType2.png" alt="referenceType2"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="referenceTypeDemo.png" alt="referenceTypeDemo"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="pointclass.png" alt="pointclass"></p><p><strong>Null</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="null1.png" alt="null1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="null2.png" alt="null2"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="nullDemo1.png" alt="nullDemo1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="nullDemo2.png" alt="nullDemo2"></p><p><strong>空指针会有异常</strong><br>编译不通过<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="nullException.png" alt="nullException"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="saveReference.png" alt="saveReference"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="StructA.png" alt="StructA"></p><h1 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="neizhileixing1.png" alt="neizhileixing1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="neizhileixing2.png" alt="neizhileixing2"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp Learning Series Chapter-2-1</title>
      <link href="/2019/08/05/csharp-learning-series-chapter-2-1/"/>
      <url>/2019/08/05/csharp-learning-series-chapter-2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="标识符-identifier"><a href="#标识符-identifier" class="headerlink" title="标识符 identifier"></a>标识符 identifier</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="identifier.png" alt="identifier"></p><h1 id="关键字-Keyword"><a href="#关键字-Keyword" class="headerlink" title="关键字 Keyword"></a>关键字 Keyword</h1><p>如果非得用关键字当标识符，前面加一个@<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="keyword.png" alt="keyword"></p><h1 id="上下文关键字"><a href="#上下文关键字" class="headerlink" title="上下文关键字"></a>上下文关键字</h1><p>上下文关键字用于在代码中提供特定含义，但不是 C# 中的保留字。 一些上下文关键字（如 partial 和 where）在两个或多个上下文中有特殊含义。</p><ul><li>Literal</li><li>标点符号</li><li>操作符</li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="notes.png" alt="notes"></p><h1 id="类型基本知识"><a href="#类型基本知识" class="headerlink" title="类型基本知识"></a>类型基本知识</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="basicknowhow.png" alt="basicknowhow"></p><h1 id="预定义的类型"><a href="#预定义的类型" class="headerlink" title="预定义的类型"></a>预定义的类型</h1><ul><li>int</li><li>string</li><li>bool</li><li>…</li></ul><pre class="line-numbers language-CS"><code class="language-CS">public class UnitConverter{  Int ratio;//Field 字段  Public UnitConverter(int unitRatio) //Contstructor 构造函数  {    Ratio=unitRatio;  }  Public int Convert(int unit) // 方法 Method  {    Return unit*ratio;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h1><ul><li>可以使用原始类型来构建复杂类型。</li><li>类型的成员。数据成员 Data，函数成员 Function。</li></ul><h1 id="构造函数和实例化"><a href="#构造函数和实例化" class="headerlink" title="构造函数和实例化"></a>构造函数和实例化</h1><ul><li>数据是通过实例化一个类型来创建的。</li><li>预定义的类型直接写Literal就可以被实例化了。</li><li>而自定义类型则通过new操作符来创建实例。</li></ul><h1 id="实例成员-vs-静态成员"><a href="#实例成员-vs-静态成员" class="headerlink" title="实例成员 vs 静态成员"></a>实例成员 vs 静态成员</h1><ul><li>操作于类型实例的数据成员和函数成员都叫做实例成员。</li><li>操作于类型而不是类型实例的数据成员和函数成员叫做静态成员。<strong>static</strong></li><li>静态类 static class的所有成员都是静态的。</li><li>静态类不可以创建实例。例如Console，它在整个程序里就一个。</li></ul><h1 id="public"><a href="#public" class="headerlink" title="public"></a>public</h1><p><strong>public关键字可以把成员暴露给其它的类。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Basic Tutorial Chapter 1-2 C#简介</title>
      <link href="/2019/08/04/csharp-learning-series-chapter-1-2/"/>
      <url>/2019/08/04/csharp-learning-series-chapter-1-2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="content.png" alt="content"></p><h1 id="C-介绍"><a href="#C-介绍" class="headerlink" title="C#介绍"></a>C#介绍</h1><p><strong>特点：</strong></p><ul><li>通用性语言</li><li>类型安全</li><li>面向对象</li></ul><p><strong>目标：生产力</strong></p><ul><li>简洁性</li><li>表达力</li><li>高性能</li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向对象的三大特性：<strong>封装 继承 多态</strong></p><h2 id="C-的面向对象特性："><a href="#C-的面向对象特性：" class="headerlink" title="C#的面向对象特性："></a>C#的面向对象特性：</h2><p><strong>统一的类型系统</strong><br>1）类型<br>2）共同的基类 object<br><strong>类和接口</strong></p><p>1) Class<br>2) Interface<br><strong>属性(Property)、方法(Method)、事件(Event)</strong></p><p>1) 唯一一种函数成员（Function Member）：方法（Method）<br>2) 方法还包括：属性（Property）和事件（Event）,还有其它的<br>3) 属性（Property）<br>4) 事件（Event）<br><strong>函数式编程</strong><br>1）C# 主要是一种面向对象的语言，但是也借用了不少函数式编程的特性<br>2）函数可以当作值来对待<br>3）委托 Delegate<br>4）支持纯（purity）模式<br>5）避免使用值可变的变量</p><h1 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h1><p>1）C#主要来说是类型安全的<br>2）静态类型 Static Typing<br>3）动态类型 dynamic<br>4）强类型 Strongly Typed language</p><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>1）依赖于运行时来执行自动内存管理<br>2）CLR：Common  Language  Runtime（公共语言运行时）<br>3）GC：Garbage  Collector（垃圾收集器）<br>4）C#没有消灭指针，通常情况下不需要使用指针，用unsafe</p><h1 id="平台支持"><a href="#平台支持" class="headerlink" title="平台支持"></a>平台支持</h1><p>1）原来C#主要是在Windows上面运行<br>2）现在可以在所有的平台上运行 Windows Mac Linux iOS Android<br>3）.NET Core</p><h1 id="CLR简介"><a href="#CLR简介" class="headerlink" title="CLR简介"></a>CLR简介</h1><p>1）.NET/.NET Core的核心就是CLR：Common  Language  Runtime<br>2）CLR和语言无关<br>3）C#是一种托管语言</p><ul><li>会被编译成托管代码（IL：Intermediate  Language）</li><li>CRL把IL转化为机器（x64，x86）的原生代码</li><li>JIT（Just-In-Time）编译</li><li>Ahead-of-Time编译</li><li>托管代码的容器：Assembly  或 Portable  Executable</li><li>.exe 或 dll</li><li>包含 IL  和 类型信息（metadata）</li></ul><p>4）IIdasm</p><h1 id="支持C-的框架"><a href="#支持C-的框架" class="headerlink" title="支持C#的框架"></a>支持C#的框架</h1><ul><li>.NET Framework</li><li>.NET Core</li><li>Unity</li><li>Xamarin</li><li>UWP</li><li>WinRT</li><li>Windows Phone</li><li>XNA</li><li>Silverlight</li><li>.NET Micro Framework</li><li>Mono</li><li>Sql Server</li></ul><h1 id="C-简史"><a href="#C-简史" class="headerlink" title="C#简史"></a>C#简史</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="CSharpIntro.png" alt="CSharpIntro"></p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><p><strong>.NET Core SDK</strong><br><strong>一个IDE</strong></p><ul><li>Visual Studio</li><li>Visual Studio Code</li><li>Jetbrains Rider</li><li>Visual Studio for Mac</li><li>LinqPad</li></ul><h1 id="NET-Core-和-NET"><a href="#NET-Core-和-NET" class="headerlink" title=".NET Core 和 .NET"></a>.NET Core 和 .NET</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="net1.png" alt="net1"></p><h1 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="net2.png" alt="net2"></p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ul><li>C#编译器把.cs结尾的源码文件编译成Assembly。</li><li>Assembly是.NET Core里的包装和部署的单元。</li><li>Assembly可以是应用程序，也可以是库。 .exe .dll</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deutsch-Learning-Series-2</title>
      <link href="/2019/07/20/deutsch-learning-series-2/"/>
      <url>/2019/07/20/deutsch-learning-series-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Information"><a href="#Information" class="headerlink" title="Information"></a><center>Information</center></h1><p>Nico is taking a look around the airport and absorbing the sights and sounds. As he leaves the airport he meets Emma again. And he suddenly realizes that his bag has vanished.</p><h2 id="Basic-words-in-German"><a href="#Basic-words-in-German" class="headerlink" title="Basic words in German"></a>Basic words in German</h2><p><strong>Here you will learn:</strong></p><ul><li>your first words in German</li><li>to understand longer texts for the first time<h1 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a><center>Vocabulary</center></h1></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Deutsch Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deutsch </tag>
            
            <tag> Nicos Weg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deutsch Learning Series A1-1 Hallo</title>
      <link href="/2019/07/18/deutsch-learning-series-1/"/>
      <url>/2019/07/18/deutsch-learning-series-1/</url>
      
        <content type="html"><![CDATA[<center><iframe src="//player.bilibili.com/player.html?aid=48473376&amp;cid=86380042&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="800px" height="600px"> </iframe></center><h1 id="Information"><a href="#Information" class="headerlink" title="Information"></a><center>Information</center></h1><p>Nico, a young Spanish man, arrives at the airport in Germany. As he is taking a look around, he listens to a language course on headphones, with greetings in German. Then Emma comes up and starts talking to him.</p><h2 id="Greetings"><a href="#Greetings" class="headerlink" title="Greetings"></a>Greetings</h2><p><strong>Here you will learn:</strong></p><ul><li>how to greet other people</li><li>to ask people how they're doing</li><li>to say how you feel</li><li>to distinguish between formal and informal greetings</li></ul><h1 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a><center>Grammar</center></h1><h2 id="Informal-forms-of-address"><a href="#Informal-forms-of-address" class="headerlink" title="Informal forms of address"></a><strong>Informal forms of address</strong></h2><p> <strong><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://learngerman.dw.com/image/37210511_507.jpg" alt="Deutschkurse | Nicos Weg | A1_E0_L1_Foto6"></strong></p><p><em>Hey, Lena!</em> – <em>Hallo, Opa!</em></p><p><em>Hallo, Sarah!</em> – <em>Hi, Tom!</em></p><ul><li>The informal form of address is used within the family, among friends and acquaintances, and often also among colleagues.</li><li>Friends, acquaintances and family members are addressed by their first name.</li><li>Children usually call their parents <em>Mama</em> and <em>Papa</em>, and their grandparents <em>Oma</em> and <em>Opa</em>.</li></ul><h2 id="Formal-forms-of-address"><a href="#Formal-forms-of-address" class="headerlink" title="Formal forms of address"></a><strong>Formal forms of address</strong></h2><p> <strong><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://learngerman.dw.com/image/37210484_507.jpg" alt="Deutschkurse | Nicos Weg | A1_E0_L1_Foto4_7435"></strong></p><p><em>Guten Tag, Frau Kamp! – Guten Tag!</em></p><p><em>Guten Morgen, Herr Müller!</em> – <em>Guten Morgen, Frau Schneider!</em></p><ul><li>The formal address is used with unfamiliar adults, in business situations, with officials, or when shopping.</li><li>Men are addressed formally as <em>Herr</em> followed by their surname, women as <em>Frau</em> followed by their surname.</li><li>If you are unsure whether to be formal or informal, use the formal address.</li></ul><table><thead><tr><th><strong>Greetings</strong></th><th><strong><strong>Explaining</strong></strong></th></tr></thead><tbody><tr><td><em>Guten Morgen!</em></td><td>Greeting in the morning until approximately 11 o'clock.</td></tr><tr><td><em>Guten Tag!</em></td><td>Greeting during the day, approximately between 11 a.m. and 6 p.m.</td></tr><tr><td><em>Guten Abend!</em></td><td>Greeting in the evening from approximately 6 p.m. onwards.</td></tr></tbody></table><hr><p>Grammatical terms in German:</p><p>informell: Informal language is used when talking to family and friends.</p><p>formell: Formal language is used in formal situations.</p><hr><h1 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a><center>Vocabulary</center></h1><table><thead><tr><th align="left"><strong>Words</strong></th><th align="center"><strong><strong>Explaining</strong></strong></th></tr></thead><tbody><tr><td align="left"><strong>auch</strong></td><td align="center">also</td></tr><tr><td align="left"><strong>das Beispiel, die Beispiele</strong></td><td align="center">example</td></tr><tr><td align="left"><strong>danke</strong>  <br>alternativ: danke schön / danke sehr</td><td align="center">thanks<br>(abbreviated form of “thank you”)</td></tr><tr><td align="left"><strong>Es geht mir gut.</strong></td><td align="center">I'm doing well.</td></tr><tr><td align="left"><strong>Es ist 09:00 Uhr.</strong></td><td align="center">It is 9 o'clock.</td></tr><tr><td align="left"><strong>Frau</strong><br>hier nur Singular, ohne Artikel</td><td align="center">Ms/Mrs</td></tr><tr><td align="left"><strong>die Frau, die Frauen</strong></td><td align="center">woman</td></tr><tr><td align="left"><strong>gut</strong><br>besser, am besten</td><td align="center">well;good</td></tr><tr><td align="left"><strong>Guten Abend.</strong></td><td align="center">Good evening.</td></tr><tr><td align="left"><strong>Guten Morgen.</strong></td><td align="center">Good morning.</td></tr><tr><td align="left"><strong>GUten Tag.</strong></td><td align="center">Hello. Good day.</td></tr><tr><td align="left"><strong>Hallo</strong></td><td align="center">Hello!</td></tr><tr><td align="left"><strong>Herr</strong><br>hier nur Singular, ohne Artikel</td><td align="center">Mr</td></tr><tr><td align="left"><strong>Hey!</strong><br>aus dem Englischen</td><td align="center">Hey!</td></tr><tr><td align="left"><strong>Hi!</strong><br>aus dem Englischen</td><td align="center">Hi!</td></tr><tr><td align="left"><strong>der Mann, die Mäanner</strong></td><td align="center">man</td></tr><tr><td align="left"><strong>nicht</strong></td><td align="center">not</td></tr><tr><td align="left"><strong>nicht so gut</strong></td><td align="center">not so gut</td></tr><tr><td align="left"><strong>oder</strong></td><td align="center">or</td></tr><tr><td align="left"><strong>schone</strong><br>schöner, am schönsten</td><td align="center">nice; beautiful; pretty</td></tr><tr><td align="left"><strong>sehr gut</strong></td><td align="center">very well; very good</td></tr><tr><td align="left"><strong>super</strong></td><td align="center">super; great</td></tr><tr><td align="left"><strong>Uhr</strong><br>in Uhrzeiten: nur Singular</td><td align="center">o'clock</td></tr><tr><td align="left"><strong>und</strong></td><td align="center">and</td></tr><tr><td align="left"><strong>Und dir?</strong></td><td align="center">How about you? (informal)</td></tr><tr><td align="left"><strong>Und Ihnen?</strong></td><td align="center">How about you? (formal)</td></tr><tr><td align="left"><strong>Wie geht es dir?</strong><br>Varianten: Wie geht’s? / Wie geht’s dir?</td><td align="center">How are you? (informal)</td></tr><tr><td align="left"><strong>Wie geht es Ihnen?</strong></td><td align="center">How are you? (formal)</td></tr></tbody></table><h1 id="Culture-and-society"><a href="#Culture-and-society" class="headerlink" title="Culture and society"></a><center>Culture and society</center></h1><h2 id="Greetings-in-German"><a href="#Greetings-in-German" class="headerlink" title="Greetings in German"></a>Greetings in German</h2><p><strong><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://learngerman.dw.com/image/38625180_507.jpg" alt="Deutschkurse | Nicos Weg | A1_E00_L1_LK"><br>Formal:</strong></p><p><em>Guten Tag</em></p><p>This is the most important formal greeting in German. You can use it throughout the day.</p><p>Depending on the time of day, you can also use:</p><p><em>Guten Morgen</em> – until about 11 a.m.</p><p><em>Guten Abend</em> – as of about 6 p.m.</p><p>When you greet another person, you offer your hand for a handshake and look them in the eye in a friendly way.</p><p><strong>Informal:</strong></p><p><em>Hallo!</em></p><p>This is how you greet friends, acquaintances and young people. You can also just smile, offer a handshake, or nod to them.</p><p>Some people, especially young women, hug or give each other a kiss on the cheek.</p><p><strong>Everyday language:</strong></p><p><em>Hi!</em></p><p><em>Tach!</em></p><p><em>Hey!</em></p><p>There are lots of different options in everyday language.</p><p><em>Na?</em></p><p>You can say this to people you know well and see on a regular basis. It more or less means: “Hello, everything ok with you?” or “Hello, what's up?” The easiest way to respond is to ask the same question back: “<em>Na?</em>“</p><p><strong>Regional variations</strong></p><p>In some regions there are particular greetings, such as:</p><p><em>Servus!</em> – especially in Bavaria and Austria, informal</p><p><em>Grüß Gott!</em> – Southern Germany and Austria</p><p><em>Grüezi!</em> – Switzerland</p><p><em>Moin!</em> – Northern Germany</p><h1 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h1><p><strong>AUDIOKURS:</strong><br><font color="red"><strong>Frau</strong></font>: <strong>Guten Morgen</strong>, <strong>Herr</strong> Müller, <strong>wie geht es Ihnen?</strong><br><font color="Blue"><strong>Mann</strong></font>: Guten Morgen, <strong>Frau</strong> Schneider. <strong>Danke</strong>, <strong>gut</strong>! <strong>Und</strong> Ihnen?</p><p><font color="red"><strong>Frau</strong></font>: Guten Morgen, Herr Müller, wie geht es Ihnen?<br><font color="Blue"><strong>Mann</strong></font>: Guten Morgen, Frau Schneider. Danke, gut! <strong>Und Ihnen?</strong></p><p><font color="Blue"><strong>Mann</strong></font>: <strong>Guten Tag</strong>, Frau Kamp.<br><font color="red"><strong>Frau</strong></font>: Guten Tag! Wie geht es Ihnen?<br><font color="Blue"><strong>Mann</strong></font>: <strong>Sehr gut</strong>, danke. Und Ihnen?</p><p><font color="Blue"><strong>Mann</strong></font>: <strong>Hey</strong>, Lena! Na, wie geht's?<br><font color="red"><strong>Frau</strong></font>: <strong>Hallo</strong>, Opa!</p><p><font color="Blue"><strong>Mann</strong></font>: Hallo, Sarah. Wie geht's dir?<br><font color="red"><strong>Frau</strong></font>: <strong>Hi</strong>, Tom! <strong>Super</strong>, danke.<strong>Und dir</strong>?</p><p><strong>EMMA:</strong><br>Oh, <strong>schön!</strong></p><p><strong>NICO:</strong><br>Hm?</p><p><strong>EMMA:</strong><br>Die Tasche ist schön!</p><p><strong>NICO:</strong><br>Entschuldigung? Schön?</p><p><strong>EMMA:</strong><br>Ja, die Tasche!</p><p><strong>LISA:</strong><br>Emma, komm jetzt! Entschuldigung!</p><p><strong>NICO:</strong><br>Adalbert-Stifter-Straße …</p><h1 id="Other-tools"><a href="#Other-tools" class="headerlink" title="Other tools"></a><center>Other tools</center></h1><h2 id="Downloads"><a href="#Downloads" class="headerlink" title="Downloads"></a>Downloads</h2><p><a href="/download/nicos-weg-a1-e0-l1-manuskript-und-wortschatz-englisch.pdf">Script and vocabulary of the lesson for printing</a></p><p><a href="/download/48390450/nicos-weg-a1-e0-l1-lehrerhandreichung-und-uebungen.pdf">Teaching materials and printable worksheets</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Deutsch Learning Series </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deutsch </tag>
            
            <tag> Nicos Weg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core 2.X  Crash Tutorial (6)</title>
      <link href="/2019/07/14/entity-framework-core-learning-series-6/"/>
      <url>/2019/07/14/entity-framework-core-learning-series-6/</url>
      
        <content type="html"><![CDATA[<p>这一小节的内容主要是关于EFCore的种子数据。</p><h1 id="EFCore中添加种子数据"><a href="#EFCore中添加种子数据" class="headerlink" title="EFCore中添加种子数据"></a>EFCore中添加种子数据</h1><p>在DbContext中添加如下测试代码：</p><pre class="line-numbers language-CS"><code class="language-CS"> protected override void OnModelCreating(ModelBuilder modelBuilder) {   #region Configuration   modelBuilder.Entity<CityCompany>()     .HasKey(x => new { x.CityId, x.CompanyId });   modelBuilder.Entity<City>()     .HasOne(x => x.Province).WithMany(x => x.Cities).HasForeignKey(x => x.ProvinceId);   modelBuilder.Entity<CityCompany>()     .HasOne(x => x.City).WithMany(x => x.CityCompanies).HasForeignKey(x => x.CityId);   modelBuilder.Entity<CityCompany>()     .HasOne(x => x.Company).WithMany(x => x.CityCompanies).HasForeignKey(x => x.CompanyId);   modelBuilder.Entity<Mayor>()     .HasOne(x => x.City).WithOne(x => x.Mayor).HasForeignKey<Mayor>(x => x.CityId);   #endregion   modelBuilder.Entity<Province>().HasData(   new Province   {     Id = 1,     Name="广东",     Population = 90000000   }); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意，EFCore添加种子数据时，主键Id是一定要添加的，不然会报错。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddSeedDataError.png" alt="AddSeedDataError"><br>EFCore在执行插入这条数据的过程中，会自动先开启主键插入功能，插入完成后再关闭主键插入功能。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="automaticIdentityInsert.png" alt="automaticIdentityInsert"></p><h1 id="EFCore修改种子数据"><a href="#EFCore修改种子数据" class="headerlink" title="EFCore修改种子数据"></a>EFCore修改种子数据</h1><p>在当前这种情况下，如果在不改变Id的前提下修改种子数据的话，生成的SQL脚本就变成Update。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ModifySeedDataKeepId.png" alt="ModifySeedDataKeepId"><br>如果修改数据的时候连Id也改了的话。查看生成的SQL脚本，会先删除之前的插入的一笔种子数据，然后再插入现在这一笔数据。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ModifySeedDataChangeId.png" alt="ModifySeedDataChangeId"></p><h1 id="EFCore添加关联种子数据"><a href="#EFCore添加关联种子数据" class="headerlink" title="EFCore添加关联种子数据"></a>EFCore添加关联种子数据</h1><p>添加种子数据的时候一同添加关联的数据，例如添加province的时候添加city数据。<strong>这个时候City单独添加，并且要指定外键。</strong></p><pre class="line-numbers language-CS"><code class="language-CS"> modelBuilder.Entity<Province>().HasData(   new Province   {     Id = 13,     Name="江苏",     Population = 90333887,     Cities = new List<City>   {     new City(){Id = 1301,Name = "苏州"},     new City(){Id = 1302,Name = "南京"},     new City(){Id = 1303,Name = "连云港"},   } });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddSeedDatawithRelatedDataError.png" alt="AddSeedDatawithRelatedDataError"><br>要避免这个错误，EFCore种子数据中添加关联数据可以这么写：</p><pre class="line-numbers language-CS"><code class="language-CS"> modelBuilder.Entity<Province>().HasData(   new Province   {     Id = 13,     Name="江苏",     Population = 90333887,   });   modelBuilder.Entity<City>().HasData(   new City {ProvinceId = 13,Id = 1301, Name = "苏州"},   new City { ProvinceId = 13, Id = 1302, Name = "南京"},   new City { ProvinceId = 13, Id = 1303, Name = "连云港"} );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果代码中没有明确的外键，例如City中没有<code>ProvinceId</code>这个外键。那么可以通过匿名类传入的方式，让EF自动构建一个外键。</p><pre class="line-numbers language-CS"><code class="language-CS"> modelBuilder.Entity<City>().HasData(   new {ProvinceId = 13,Id = 1301, Name = "苏州"},   new { ProvinceId = 13, Id = 1302, Name = "南京"},   new { ProvinceId = 13, Id = 1303, Name = "连云港"} );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于Guid外键的情况我们又该怎么处理呢？例如有Student这个类：</p><pre class="line-numbers language-CS"><code class="language-CS"> public class Student {   public Guid Id { get; set; }   public string Name { get; set; } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么添加种子数据时，如果按照下列方式去添加的话，会自动生成一个Guid。<br><code>modelBuilder.Entity&lt;Student&gt;().HasData( new Student {Id = Guid.NewGuid(), Name = "张三"});</code><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddSeedWithGuid.png" alt="AddSeedWithGuid"><br>但是，此时一旦对种子数据进行修改，都会重新去生成一个主键，原来的主键就会被自动删除了。例如这里修改<code>张三</code>为<code>张三2</code>。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddSeedWithGuidChange.png" alt="AddSeedWithGuidChange"><br>因此，这种情况，需要先定义一个Guid。这样修改种子数据就会执行update方法，而不是先删除后插入的方式。</p><pre class="line-numbers language-CS"><code class="language-CS"> var studentGuid=new Guid("48fb8670-9f70-4a46-b015-5fd341f32abd"); modelBuilder.Entity<Student>().HasData( new Student {Id = studentGuid, Name = "张三3"});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ModifySeedWithGuid.png" alt="ModifySeedWithGuid"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Entity Framework Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Entity Framework Core 2.X </tag>
            
            <tag> EFCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core 2.X  Crash Tutorial (5)</title>
      <link href="/2019/07/14/entity-framework-core-learning-series-5/"/>
      <url>/2019/07/14/entity-framework-core-learning-series-5/</url>
      
        <content type="html"><![CDATA[<p>这一小节的内容主要是EFCore对关联数据的查询和修改。</p><h1 id="EFCore-保存关联数据"><a href="#EFCore-保存关联数据" class="headerlink" title="EFCore 保存关联数据"></a>EFCore 保存关联数据</h1><p>首先看下保存关联数据，以Province和City举例，这是一个一对多的关系。<br><strong>实例一：</strong></p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var province=new Province()   {     Name = "辽宁",     Population = 4000000,     Cities = new List<City>     {       new City(){AreaCode = "024",Name = "沈阳"},       new City(){AreaCode = "0411",Name = "大连"}     }   };   context.Provinces.Add(province);   context.SaveChanges();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="RelatedSaveExample1.png" alt="RelatedSaveExample1"><br><strong>实例二：</strong><br>此时没有明确指定Cities的外键，DbContext自己会搞明白。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var province = context.Provinces.Single(x => x.Name == "辽宁");   province.Cities.Add(new City   {     AreaCode="0413",     Name = "鞍山"   });   context.SaveChanges();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="RelatedSaveExample2.png" alt="RelatedSaveExample1"><br>但是在离线情况下，需要使用外键。下面这个例子中，City没有被追踪，所以需要指定外键。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var city = new City   {     ProvinceId = 11,     AreaCode = "0421",     Name = "鞍山"   };   context.Cities.Add(city);   context.SaveChanges();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查询关联数据"><a href="#查询关联数据" class="headerlink" title="查询关联数据"></a>查询关联数据</h1><ul><li>Eager Loading 预加载  一次查询的时候都查询出来。</li><li>Query Projections 查询映射  我定义出来我们想要的结果是什么样的 ，然后我们再进行查询。</li><li>Explicit Loading 显示加载  内存里已经存在一些数据了，然后再想从内存里加载一些它的关联数据。</li><li>Lazy loading 懒加载<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><pre class="line-numbers language-CS"><code class="language-CS">public IActionResult Index(){ var province = context.Provinces   .Include(x => x.Cities)   .ToList(); return View();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>在entity framework core中，如果两个实体涉及到外键连接，查询的时候默认是只查自身而不会去查询外键表的。如果想要让查询结果包含外键实体，则需要使用<code>include</code>方法来让查询结果包含外键实体。<br>注意下Include只能跟在Province（DbSet）后面，后面还可以继续跟着过滤where等。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="EagerLoading.png" alt="EagerLoading"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="EagerLoadingLog.png" alt="EagerLoadingLog"><br>EFCore还支持继续向下钻取，比如City下一级是CityCompany，CityCompany的下一级是Company。可以这样写：<pre class="line-numbers language-CS"><code class="language-CS">public IActionResult Index(){ var province = context.Provinces   .Include(x => x.Cities)   .ThenInclude(x=>x.CityCompanies)   .ThenInclude(x=>x.Company)   .ToList(); return View();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>EFCore还支持一同加载多个关联属性，例如Cities拥有三个关联属性，可以这么写：<pre class="line-numbers language-CS"><code class="language-CS">public IActionResult Index(){ var cities= context.Cities   .Include(x => x.Province)   .Include(x=>x.CityCompanies)   .Include(x=>x.Mayor)   .ToList(); return View();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>查询出来的关联数据都是基于DBSet集合的，换句话说每个CityEntity具有三个集合。Inculde会获取所有关联数据，并不会过滤查询。</p><h2 id="Query-Projections-查询映射"><a href="#Query-Projections-查询映射" class="headerlink" title="Query Projections 查询映射"></a>Query Projections 查询映射</h2><p>查询映射相当于自定义查询结果，方法里我们使用一个匿名类型，匿名类定义我们需要的属性。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var provincesInfo = context.Provinces     .Select(x => new     {       x.Name,       x.Id     })     .ToList();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="QueryProjections.png" alt="QueryProjections"><br><strong>provincesInfo</strong> 是匿名类型，这个集合只能在这个方法里面用。如果想在外面方法使用的话，需要使用<strong>dynamic</strong>类型。</p><pre class="line-numbers language-CS"><code class="language-CS"> private List<dynamic> Query() {   var provincesInfo = context.Provinces     .Select(x => new     {       x.Name,       x.Id     })     .ToList<dynamic>();   return provincesInfo; } public IActionResult Index() {   var provincesInfo = Query();   foreach (var p in provincesInfo)   {     Console.WriteLine(p.Name);   }   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="dymanicprovincesInfo.png" alt="dymanicprovincesInfo"><br>EFCore同样可以增加过滤条件进行关联查询，像下面这么写：</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var provincesInfo = context.Provinces     .Select(x => new     {       x.Name,       x.Id,       x.Cities.Count,       Cities=x.Cities.Where(y=>y.Name=="沈阳").ToList()     })     .ToList();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="QueryProjectionswithCondition.png" alt="QueryProjectionswithCondition"><br>EFCore进行过滤查询时，还可以根据字表City去查询Province,查询出来的是Province。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var provincesInfo = context.Provinces     .Where(x => x.Cities.Any(y=>y.Name=="沈阳"))     .ToList();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="EFCore修改关联数据"><a href="#EFCore修改关联数据" class="headerlink" title="EFCore修改关联数据"></a>EFCore修改关联数据</h1><h2 id="在线修改关联数据"><a href="#在线修改关联数据" class="headerlink" title="在线修改关联数据"></a>在线修改关联数据</h2><p>EFCore修改关联数据时，可以像下面这么写：</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var provincesInfo = context.Provinces     .Include(x=>x.Cities)     .First(x=>x.Cities.Any());   var city = provincesInfo.Cities[0];   city.Name += " Updated";   context.SaveChanges();  //context.Cities.Remove(city);   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个查询是关联查询出province的city属性，然后这些province必须带有city，最后再取第一个province.<br>修改这个province的第一个city的名字。还可以进行删除，删除第一个city。</p><h2 id="离线修改关联数据"><a href="#离线修改关联数据" class="headerlink" title="离线修改关联数据"></a>离线修改关联数据</h2><p>离线状态下修改关联数据有两种方法，下面进行一下比较。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var provincesInfo = context.Provinces     .Include(x=>x.Cities)     .First(x=>x.Cities.Any());   var city = provincesInfo.Cities[0];   city.Name += " Updated";   //Method 1   context2.Cities.Update(city);   //Method 2   context2.Entry(city).State = EntityState.Modified;   context2.SaveChanges();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第一种方法</strong>的执行过程中，会有五次update的SQL语句，因为此时更新的是这个city关联的所有数据，即它关联的province和province下面的四个city（包括了它自己）。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="OffLineUpdate1.png" alt="OffLineUpdate1"><br>通过观察更新前后的DbContext下的状态，可以看到有五个状态的变化。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="OffLineUpdate1Contextbeforechange.png" alt="OffLineUpdate1Contextbeforechange"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="OffLineUpdate1ContextAfterchange.png" alt="OffLineUpdate1ContextAfterchange"><br><strong>第二种方法</strong>是利用Entry方法，这个时候修改city,它会忽略cities所有的关联属性，只更新这个city对象本身。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="OffLineUpdate2.png" alt="OffLineUpdate2"><br>这个时候只执行一次update操作，对应context对象中的changecount也是1.<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="OffLineUpdate2Context.png" alt="OffLineUpdate2Context"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Entity Framework Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Entity Framework Core 2.X </tag>
            
            <tag> EFCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core 2.X  Crash Tutorial (4)</title>
      <link href="/2019/07/14/entity-framework-core-learning-series-4/"/>
      <url>/2019/07/14/entity-framework-core-learning-series-4/</url>
      
        <content type="html"><![CDATA[<p>这一小节的主要的内容是继续了解EFCore的执行过程，包括查询过滤和删除等操作。</p><h1 id="EFCore查询过滤"><a href="#EFCore查询过滤" class="headerlink" title="EFCore查询过滤"></a>EFCore查询过滤</h1><p>一般地，查询过滤我们会这么写:</p><pre class="line-numbers language-CS"><code class="language-CS">var provinces = context.Provinces   .Where(x=>x.Name=="北京");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种Lamda表达式，相当于是：没有名称的一个方法（匿名方法）接受一个参数，即province对象。如果要替换Landa表达式，可以这么写：</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var provinces = context.Provinces     .Where(FilterBeijing);   foreach (var province in provinces)   {    //Add action   }   return View(); } private bool FilterBeijing(Province p) {   return p.Name == "北京"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询参数时，参数的设置：<br>1）当写死参数的时候，在执行SQL语句的时候，参数也是固定的。即<code>Where(x=&gt;x.Name=="北京")</code>对应了<code>Select * from xxx where x.Name='Beijing'</code></p><pre class="line-numbers language-CS"><code class="language-CS">public IActionResult Index() {   var provinces = context.Provinces     .Where(x=>x.Name=="北京");   foreach (var province in provinces)   {     Console.WriteLine(province.Name);     //...   }   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样其实是有风险的，因为EFCore会认为这个参数是安全的，会原封不动的把这个参数写在SQL语句里面。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ParamsFixed.png" alt="ParamsFixed"><br>2）参数提出来，放到变量里来，然后把变量放到Linq，查看SQL语句。即<br><code>var param ="北京"；xxx.Where(x=&gt;x.Name== param);</code><br><code>Parameters=@_param_0='Beijing'</code><br><code>…Where [x].[Name]=@_param_0</code><br>EFCore同样也会使用带参数的SQL语句，这样避免了很多风险。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var param = "北京";   var provinces = context.Provinces   .Where(x=>x.Name== param);   foreach (var province in provinces)   {     Console.WriteLine(province.Name);     //...   }   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ParamsNotFixed.png" alt="ParamsNotFixed"><br><strong>会立即执行查询的Linq方法：</strong></p><ul><li>ToList() 返回一个集合</li><li>First() 必须至少有一笔数据，返回第一笔，单笔数据。如果没有数据，则会抛异常。</li><li>FirstOrDefault() 按照查询条件，如果有就返回第一笔；没有就返回Null,不会抛异常。</li><li>Single() 期待我们过滤完查询之后，结果只有一笔数据。如果有多余一笔数据，或者没有数据，都会抛出异常。</li><li>SingleOrDefault() 如果查询的结果没有一条复查查询结果，那么久返回Null;如果有一笔就返回一笔，如果有两笔的话也会抛出异常。</li><li>Last()</li><li>LastorDefault()</li><li>Count()</li><li>LongCount()</li><li>Min()</li><li>Max()</li><li>Average()</li></ul><p><strong>会立即执行查询的非Linq方法：</strong></p><ul><li>Find（主键）</li></ul><p>FirstorDefault有两种写法，但是更推荐第二种紧凑一点的写法。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var param = "北京";   //Method 1   var province1 = context.Provinces     .Where(x => x.Name == param)     .FirstOrDefault();   //Method 2   var province2 = context.Provinces     .FirstOrDefault(x => x.Name == param);   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="FirstorDefault.png" alt="FirstorDefault"><br>根据主键来查询的两种方法如下。使用Find方法是DbSet的方法，如果这个对象已经在内存里被追踪了，那么这时候就不会去查找数据库，直接返回内存中的这个对象。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var param = "北京";   var province1 = context.Provinces     .FirstOrDefault(x => x.Id == 3);   var province2 = context.Provinces.Find(3);   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤查询时会用到模糊查询，以前也许是这么写过滤条件：</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var param = "北京";   var province1 = context.Provinces     .Where(x => x.Name.Contains("北"));   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="LikeQuery.png" alt="LikeQuery"><br>上面这个操作相当于模糊查询 <code>Name like "%b北京%"</code><br>EFCore中有个新的方法：</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var province1 = context.Provinces     .Where(x => EF.Functions.Like(x.Name, "%北%"))     .ToList();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="EFFunctionLike.png" alt="EFFunctionLike"><br>当然这里还是推荐使用参数的方法来写：</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   string param = "%北%";   var province1 = context.Provincedds     .Where(x => EF.Functions.Like(x.Name, param))     .ToList();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看一下<strong>LastOrDefault</strong>，使用LastOrDefault首先要用Order排序；如果不排序的话就会使用内存中的顺序，这样结果是未知的。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   string pa = "%北%";   var province1 = context.Provinces     .OrderBy(x=>x.Id)     .LastOrDefault(x => EF.Functions.Like(x.Name, pa));   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="LastOrDefault.png" alt="LastOrDefault"></p><h1 id="EFCore修改数据"><a href="#EFCore修改数据" class="headerlink" title="EFCore修改数据"></a>EFCore修改数据</h1><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   string pa = "%北%";   var province = context.Provinces.FirstOrDefault();   if (province!=null)   {     province.Population += 100;     context.SaveChanges();   }   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面有两笔操作，首先查出来，然后根据Id去Update。这种情况下，context一直追踪着province这个对象。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="EFCoreUpdate.png" alt="EFCoreUpdate"><br>当然，EFCore是支持批量修改的，举个例子：当context中有一个修改一个新增：</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   string pa = "%北%";   var province = context.Provinces.FirstOrDefault();   if (province!=null)   {     province.Population += 100;     context.Provinces.Add(new Province   {     Name = "江苏",     Population = 90000000   });     context.SaveChanges();   }   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="EFCoreMultipleUpdate.png" alt="EFCoreMultipleUpdate"></p><h1 id="EFCore离线修改"><a href="#EFCore离线修改" class="headerlink" title="EFCore离线修改"></a>EFCore离线修改</h1><p>首先要修改一下MyContext的生命周期。原本默认是scope，scope的生命周期是每次http请求生成一个实例。<br>现在要修改成Transient，Transient 是每次有需要的时候都可以创建一个MyContext实例<br>在<code>startup.cs</code>中修改：</p><pre class="line-numbers language-CS"><code class="language-CS">public void ConfigureServices(IServiceCollection services) {   services.Configure<CookiePolicyOptions>(options =>   {     // This lambda determines whether user consent for non-essential cookies is needed for a given request.     options.CheckConsentNeeded = context => true;     options.MinimumSameSitePolicy = SameSiteMode.None;   });   services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);   services.AddDbContext<MyContext>( options =>   {     options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"), opts =>     {       opts.MaxBatchSize(20000);     });     options.EnableSensitiveDataLogging(true);   },ServiceLifetime.Transient); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Controller中，添加另一个DbContext2,进行操作（context和context2不是同一个对象）：</p><pre class="line-numbers language-CS"><code class="language-CS"> public class HomeController : Controller {   private readonly MyContext context;   private readonly MyContext context2;   public HomeController(MyContext context,MyContext context2)   {     this.context = context;     this.context2 = context2;   }   public IActionResult Index()   {     var province = context.Provinces.FirstOrDefault();     context2.Provinces.Update(province);     context2.SaveChanges();     return View();   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>离线修改  相当于告诉context2我的province对象需要修改，除了Id其他都要改。  当然Update()也有UpdateRange()批量修改方法。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="OfflineEFCoreUpdate.png" alt="OfflineEFCoreUpdate"></p><h1 id="EFCore删除"><a href="#EFCore删除" class="headerlink" title="EFCore删除"></a>EFCore删除</h1><p>EFCore删除 ，只能删除追踪的对象，即已经查出来的对象。<br>当然删除也是支持离线的，支持批量删除的，即有RemoveRange()方法。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var province = context.Provinces.FirstOrDefault();   context2.Provinces.Remove(province);   context2.SaveChanges();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="EFCoreDelete.png" alt="EFCoreDelete"></p><h1 id="原始SQl特性的支持"><a href="#原始SQl特性的支持" class="headerlink" title="原始SQl特性的支持"></a>原始SQl特性的支持</h1><p>执行命令：DbContext.Database.ExecuteSqlCommand()<br>查询命令：DbSDet.FromSql()<br>根据Id执行存储过程</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var id=5;   context.Database.ExecuteSqlCommand("exec Del……");   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Entity Framework Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Entity Framework Core 2.X </tag>
            
            <tag> EFCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core 2.X  Crash Tutorial (3)</title>
      <link href="/2019/07/14/entity-framework-core-learning-series-3/"/>
      <url>/2019/07/14/entity-framework-core-learning-series-3/</url>
      
        <content type="html"><![CDATA[<p>这一小节主要的内容是通过观察EFCore的执行日志了解EFCore的执行过程。</p><h1 id="将EFCore的SQL执行过程输出到Log"><a href="#将EFCore的SQL执行过程输出到Log" class="headerlink" title="将EFCore的SQL执行过程输出到Log"></a>将EFCore的SQL执行过程输出到Log</h1><p>输出到Console:<br>ASPNetCore的项目已经集成好了Log工具，可以通过查看Program.cs中的CreateDefaultBuilder来查看。</p><pre class="line-numbers language-CS"><code class="language-CS"> public class Program {   public static void Main(string[] args)   {     CreateWebHostBuilder(args).Build().Run();   }   public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>   WebHost.CreateDefaultBuilder(args)   .UseStartup<Startup>(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASPNetCore配置了Log工具，可以输出到Debug窗口和控制台。所以ASP DotNet Core项目就不需要配置Log工具了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="CreateDefaultBuilder.png" alt="CreateDefaultBuilder"><br>如果不使用ASP DotNet Core项目，可以参考文档：<a href="https://docs.microsoft.com/zh-cn/ef/core/miscellaneous/logging" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/ef/core/miscellaneous/logging</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="EFCoreDoc.png" alt="EFCoreDoc"></p><h1 id="EFCore新增数据"><a href="#EFCore新增数据" class="headerlink" title="EFCore新增数据"></a>EFCore新增数据</h1><p>增加province这个Model，当New Province的时候需要注意：Id 是作为主键。<br>这里需要知道这样一个约定：如果有Id或者ProvinceId，这时它是默认作为主键的，如果使用int的话，是自增的，那么新增的时候也就不用给Id赋值了。</p><pre class="line-numbers language-CS"><code class="language-CS"> public class Province {   public Province()   {     Cities = new List<City>();   }   public int Id { get; set; }   public string Name { get; set; }   public int Population { get; set; }   public List<City> Cities { get; set; } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常情况我们可能是这么写，让context自动dispose：</p><pre class="line-numbers language-CS"><code class="language-CS"> var province = new Province() {   Name = "北京",   Population = 20000 }; using (var context=new MyContext()) {   //Add province }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在ASP DotNetCore项目中，已经把MyContext添加到容器中了。在Startup.cs中：</p><pre class="line-numbers language-CS"><code class="language-CS"> public void ConfigureServices(IServiceCollection services) {   services.Configure<CookiePolicyOptions>(options =>   {     // This lambda determines whether user consent for non-essential cookies is needed for a given request.     options.CheckConsentNeeded = context => true;     options.MinimumSameSitePolicy = SameSiteMode.None;   });   services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);   services.AddDbContext<MyContext>(options =>   {     options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"));   }); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此我们可以在Controller的构造函数中进行注入：</p><pre class="line-numbers language-CS"><code class="language-CS"> public class HomeController : Controller {   private readonly MyContext context;   public HomeController(MyContext context)   {      this.context = context;   } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接用，不需要手动dispose，因为清理的工作由容器自动完成。添加的写法有以下两种：</p><pre class="line-numbers language-CS"><code class="language-CS">public class HomeController : Controller {   private readonly MyContext context;   public HomeController(MyContext context)   {     this.context = context;   }   public IActionResult Index()   {     var province = new Province()     {     Name = "北京",     Population = 20000     };     //Method 1(recommend)     context.Provinces.Add(province);     //context is now Tracking procince object     //Method 2:     context.Add(province);     return View();   } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，province只是在内存里并且被context追踪，但是并没有插入到数据库。要执行插入动作，还需要：<code>context.SaveChanges();</code><br><code>context.Province.Add(province)</code>:<br>MyCOntext开始追踪province对象<br><code>Context.SaveChanges()</code>:<br>检查所有MyContext正在追踪的对象<br>读取每个对象的状态<br>生成SQL语句<br>执行所有生成的SQL语句<br>如果有返回数据的话，就获取这些返回数据</p><p>下面我们来打印一下SQL语句，注意修改启动方式，不使用IIS，使用控制台。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="LaunchSettings.png" alt="LaunchSettings"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Savechanges.png" alt="Savechanges"><br>注意一下，Savechange()方法很有可能执行批量操作，但凡其中有一步出现错误，都会进行回滚。可以观察一下在执行过程中province的变化：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ProvinceObject1.png" alt="ProvinceObject1"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ProvinceObject2.png" alt="ProvinceObject2"><br>传入参数Name Population在日志中是加密敏感数据的，但是在开发的时候我们也许会想看一下这些传入的参数。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ParamsInLogSecret.png" alt="ParamsInLogSecret"><br>因此，可以在依赖注入的时候配置参数options参数，允许敏感数据记录EnableSensitiveDataLogging。</p><pre class="line-numbers language-CS"><code class="language-CS"> public void ConfigureServices(IServiceCollection services) {   services.Configure<CookiePolicyOptions>(options =>   {     // This lambda determines whether user consent for non-essential cookies is needed for a given request.     options.CheckConsentNeeded = context => true;     options.MinimumSameSitePolicy = SameSiteMode.None;   });   services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);   services.AddDbContext<MyContext>(options =>   {     options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"));     options.EnableSensitiveDataLogging(true);   }); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候我们再观察一下日志记录的结果，可以看到输入的参数：北京 20000<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Beijing20000.png" alt="Beijing20000"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="SQLServerData.png" alt="SQLServerData"></p><h1 id="EFCore批量添加数据"><a href="#EFCore批量添加数据" class="headerlink" title="EFCore批量添加数据"></a>EFCore批量添加数据</h1><p>批量添加，有两种方法，如下：</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var province1 = new Province()   {     Name = "上海",     Population = 700000   };   var province2 = new Province()   {     Name = "天津",     Population = 300000   };   var province3 = new Province()   {     Name = "广东",     Population = 900000   };   //Method 1   //context.Provinces.AddRange(province1, province2, province3);   //Method 2   context.Provinces.AddRange(new List<Province>   {     province1,province2,province1   });   context.SaveChanges();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过观察日志，这两种方法的效果是一样的，都是3个Insert。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="provincesInsert.png" alt="provincesInsert"><br>下面批量添加没有关系的Company和Province的两个对象，直接用context.AddRange()这个方法。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var province = new Province()   {     Name = "山东",     Population = 700000   };   var company = new Company()   {     Name = "Taida",     EstablishDate = new DateTime(1990,1,1),     LegalPerson = "Secret Man"   };   context.AddRange(province,company);   context.SaveChanges();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过观察日志，EFCore分别执行了两次SQL操作。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="CityProvinceInsert.png" alt="CityProvinceInsert"><br><strong>批量操作的大小限制：</strong><br>默认大小限制是由数据库Provider定的，SQLServer是1000个命令。<br>如果超出该大小限制，那么超出的部分将会做了另外的批次来执行。<br>在Startup.cs中的ConfigureServices中改下注入的配置：</p><pre class="line-numbers language-CS"><code class="language-CS"> services.AddDbContext<MyContext>(options => {   options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"), opts =>   {     opts.MaxBatchSize(20000);   });   options.EnableSensitiveDataLogging(true); });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="EFCore-查询"><a href="#EFCore-查询" class="headerlink" title="EFCore 查询"></a>EFCore 查询</h1><p>前面都是组SQL语句，只有当遇到ToList（）的时候才会真正执行查询。推荐第一种。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var provinces = context.Provinces.ToList();   //Method 1 Filter by province name   var provinces1 = context.Provinces   .Where(x=>x.Name=="北京")   .ToList();   //Method 2 Linq to SQL   var provinces2 = (from p in context.Provinces   where p.Name == "北京"   select p).ToList();   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以去掉ToList()，发现是IQueryable类型。<br>遇到foreach也是查询数据库的操作。</p><pre class="line-numbers language-CS"><code class="language-CS"> public IActionResult Index() {   var provinces = context.Provinces   .Where(x=>x.Name=="北京");   foreach (var province in provinces)   {      //Add action   }   return View(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这种情况，如果foreach里面的操作耗时较长，那么不推荐这么做。因为长时间打开数据库连接，会有风险，例如其他人正在用这个表。<br>所以还是推荐用tolist.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Entity Framework Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Entity Framework Core 2.X </tag>
            
            <tag> EFCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core 2.X  Crash Tutorial (2)</title>
      <link href="/2019/07/14/entity-framework-core-learning-series-2/"/>
      <url>/2019/07/14/entity-framework-core-learning-series-2/</url>
      
        <content type="html"><![CDATA[<p>这一小节主要的内容是在一个ASP Net Core Web项目中应用EFCore，下面是主要的步骤：</p><h1 id="解决方案搭建"><a href="#解决方案搭建" class="headerlink" title="解决方案搭建"></a>解决方案搭建</h1><p>创建解决方案，添加ASP NetCore Web 项目。选择ASP Net Core 2.2的MVC模板。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddSolutionWeb.png" alt="AddSolutionWeb"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddMVCWeb.png" alt="AddMVCWeb"><br>添加Net Core类库AspEfCore.Domain和AspEfCore.Data。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddDomianAndDataProject.png" alt="AddDomianAndDataProject"><br>给Domain项目添加Model：City和Province，添加的时候可以用Resharper的Refactor功能调整命名空间。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddCityAndProvinceModel.png" alt="AddCityAndProvinceModel"><br>在Data项目中安装EntityFramework.SqlServer的NuGet包。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AddNuGetEFSQLServerInDataProject.png" alt="AddNuGetEFSQLServerInDataProject"><br>添加项目的引用关系：Data项目需要引用Domain，Web项目需要引用Domain和Data。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="DataProjectReference.png" alt="DataProjectReference">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="WebProjectReference.png" alt="WebProjectReference"><br>在Data项目中添加MyContext<br>写Demo 的话可以这么用，但是生产环境一般不这么用。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AspEfCore<span class="token punctuation">.</span>Data<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyContext</span><span class="token punctuation">:</span>DbContext   <span class="token punctuation">{</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Province<span class="token operator">></span> Provinces <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>City<span class="token operator">></span> Cities <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span>DbContextOptionsBuilder optionsBuilder<span class="token punctuation">)</span>     <span class="token punctuation">{</span>       optionsBuilder<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span><span class="token string">"Server=(localdb)\\MSSQLLocalDB; Database=EFCoreDemo; Trusted_Connection=True;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>options里面包含连接字符串，里面也包含了一些其他的配置信息。options决定哪个数据库的供应商，决定哪个provider。</p><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><p>Startup.CS 中利用依赖注入的机制注入MyContext，然后在构造函数注入。<br>ConfigureServices这个方法中，在AddMvc后面添加如下关于MyContext的配置代码：</p><pre class="line-numbers language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span> <span class="token punctuation">{</span>   services<span class="token punctuation">.</span><span class="token generic-method function">Configure<span class="token punctuation">&lt;</span>CookiePolicyOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>   <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// This lambda determines whether user consent for non-essential cookies is needed for a given request.</span>     options<span class="token punctuation">.</span>CheckConsentNeeded <span class="token operator">=</span> context <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">true</span><span class="token punctuation">;</span>     options<span class="token punctuation">.</span>MinimumSameSitePolicy <span class="token operator">=</span> SameSiteMode<span class="token punctuation">.</span>None<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetCompatibilityVersion</span><span class="token punctuation">(</span>CompatibilityVersion<span class="token punctuation">.</span>Version_2_2<span class="token punctuation">)</span><span class="token punctuation">;</span>     services<span class="token punctuation">.</span><span class="token generic-method function">AddDbContext<span class="token punctuation">&lt;</span>MyContext<span class="token punctuation">></span></span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>      options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span><span class="token string">"Server=(localdb)\\MSSQLLocalDB; Database=ASPEFCoreDemo; Trusted_Connection=True;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议将连接字符创写在appsetting中，这里可以做如下优化：</p><pre class="line-numbers language-JS"><code class="language-JS">{  "Logging": {    "LogLevel":     {     "Default": "Debug",     "System": "Information",     "Microsoft": "Information"    }  },  "ConnectionStrings":   {   "DefaultConnection": "Server=(localdb)\\MSSQLLocalDB; Database=ASPEFCoreDemo; Trusted_Connection=True;"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后相应的在Startup.cs的ConfigureServices中可以做如下的调用：</p><pre class="line-numbers language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span> <span class="token punctuation">{</span>   services<span class="token punctuation">.</span><span class="token generic-method function">Configure<span class="token punctuation">&lt;</span>CookiePolicyOptions<span class="token punctuation">></span></span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>   <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// This lambda determines whether user consent for non-essential cookies is needed for a given request.</span>     options<span class="token punctuation">.</span>CheckConsentNeeded <span class="token operator">=</span> context <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">true</span><span class="token punctuation">;</span>     options<span class="token punctuation">.</span>MinimumSameSitePolicy <span class="token operator">=</span> SameSiteMode<span class="token punctuation">.</span>None<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetCompatibilityVersion</span><span class="token punctuation">(</span>CompatibilityVersion<span class="token punctuation">.</span>Version_2_2<span class="token punctuation">)</span><span class="token punctuation">;</span>     services<span class="token punctuation">.</span><span class="token generic-method function">AddDbContext<span class="token punctuation">&lt;</span>MyContext<span class="token punctuation">></span></span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span>     <span class="token punctuation">{</span>       options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">"DefaultConnection"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们可以探究一下，<strong>GetConnectionString</strong>是如何获取数据库连接字符串的配置信息的？<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="GetConnectionString.png" alt="GetConnectionString"></p><p>至此我们可能想到，这个Web项目也需要引用EntityFrameworkCore和SQLServer。但是，我们可以查看下Web项目的csproj文件，会发现依赖库中包含Microsoft.AspNetCore.App这个包。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Webcsproj.png" alt="Webcsproj"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="WebcsprojApp.png" alt="WebcsprojApp"><br>而这个包中已经含有EFCore和EFCore.Sqlserver。除此之外，AspNetCore.App这个package中还依赖了很多其他的包。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="AspNetCoreApp.png" alt="AspNetCoreApp"></p><h1 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h1><p>把Web项目作为启动项目，把Data项目作为package Managee Console的默认项目后，就可以开始迁移了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="add-Migration-Initial.png" alt="add-Migration-Initial"><br>通过SQL Server对象  资源管理器可以查看我们的数据库表已经已经创建成功了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="SQLServerBrowser.png" alt="SQLServerBrowser"><br>再建立一个Model,叫作Company，目的是建立表的多对多的关系。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AspEfCore<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DateTime EstablishDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> LegalPerson <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想要在City和Company之间建立多对多的关系，仅使用这两个Model是不够的，必须使用中间的Model才能实现。<br>新建CityCompany这个中间Model:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AspEfCore<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CityCompany</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> CityId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> City City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> CompanyId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> Company Company <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在中间Model的导航属性有了，分别去City和Company这个两个Model中做CityCompany的导航属性：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AspEfCore<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">City</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     CityCompanies<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>CityCompany<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> AreaCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> ProvinceId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> Province Province <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> List<span class="token operator">&lt;</span>CityCompany<span class="token operator">></span> CityCompanies <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> AspEfCore<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">Company</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     CityCompanies<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>CityCompany<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DateTime EstablishDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> LegalPerson <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> List<span class="token operator">&lt;</span>CityCompany<span class="token operator">></span> CityCompanies <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最好明确写一下表的关系，在DBContext中，可以override一个方法OnModelCreating，配置这些关系。<br>在CityCompany中可以通过CityId和CompanyId作为联合主键。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AspEfCore<span class="token punctuation">.</span>Data<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyContext</span><span class="token punctuation">:</span>DbContext <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">MyContext</span><span class="token punctuation">(</span>DbContextOptions<span class="token operator">&lt;</span>MyContext<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>   <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>ModelBuilder modelBuilder<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CityCompany<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token punctuation">{</span> x<span class="token punctuation">.</span>CityId<span class="token punctuation">,</span> x<span class="token punctuation">.</span>CompanyId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>City<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Province<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Cities<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>ProvinceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CityCompany<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>City<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CityCompanies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CityId<span class="token punctuation">)</span><span class="token punctuation">;</span>    modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CityCompany<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CityCompanies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CompanyId<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Province<span class="token operator">></span> Provinces <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>City<span class="token operator">></span> Cities <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>CityCompany<span class="token operator">></span> CityCompanies <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Company<span class="token operator">></span> Companies<span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行这次多对多的迁移及同步：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="add-Migration-AddManyTomany.png" alt="add-Migration-AddManyTomany"><br>下面进行表一对一关系类型配置:<br>创建Mayor(市长）,和City(城市)一对一，即一个城市只有市长，一个市长也只能对应一个城市。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AspEfCore<span class="token punctuation">.</span>Domain<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mayor</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> CityId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DateTime BirthDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> Gender Gender <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> City City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在City类中添加Mayor导航属性:</p><pre class="line-numbers language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">City</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     CityCompanies<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>CityCompany<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">string</span> AreaCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> ProvinceId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> Province Province <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> List<span class="token operator">&lt;</span>CityCompany<span class="token operator">></span> CityCompanies <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> Mayor Mayor <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解读一下这种一对一关系：<br>城市是必须有的，市长是可选的。建立市长的时候必须有城市，建立城市的时候不一定要有市长。<br>这种情况EFCore是支持的。但是如果城市是必须的，市长也是必须的，这样的情况EFCore就无法支持了，需要业务逻辑进行实现。<br>然后，完善一下MyContext这个类，配置一对一的关系：</p><pre class="line-numbers language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyContext</span><span class="token punctuation">:</span>DbContext <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">MyContext</span><span class="token punctuation">(</span>DbContextOptions<span class="token operator">&lt;</span>MyContext<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>   <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>ModelBuilder modelBuilder<span class="token punctuation">)</span>   <span class="token punctuation">{</span>     modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CityCompany<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token punctuation">{</span> x<span class="token punctuation">.</span>CityId<span class="token punctuation">,</span> x<span class="token punctuation">.</span>CompanyId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>City<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Province<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Cities<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>ProvinceId<span class="token punctuation">)</span><span class="token punctuation">;</span>     modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CityCompany<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>City<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CityCompanies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CityId<span class="token punctuation">)</span><span class="token punctuation">;</span>     modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CityCompany<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CityCompanies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CompanyId<span class="token punctuation">)</span><span class="token punctuation">;</span>     modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>Mayor<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>City<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithOne</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Mayor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method function">HasForeignKey<span class="token punctuation">&lt;</span>Mayor<span class="token punctuation">></span></span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>CityId<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Province<span class="token operator">></span> Provinces <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>City<span class="token operator">></span> Cities <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>CityCompany<span class="token operator">></span> CityCompanies <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Company<span class="token operator">></span> Companies<span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Mayor<span class="token operator">></span> Mayor <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后执行迁移命令：<br>1）add-migration Update<br>2）update-database<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="ExcuteMigration.png" alt="ExcuteMigration"><br>更新完成后可以查看一下数据表结构是否正确：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="UpdateResultView.png" alt="UpdateResultView"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Entity Framework Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Entity Framework Core 2.X </tag>
            
            <tag> EFCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core 2.X  Crash Tutorial (1)</title>
      <link href="/2019/07/07/entity-framework-core-learning-series-1/"/>
      <url>/2019/07/07/entity-framework-core-learning-series-1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Entity Framework是.Net开发平台主流的数据访问框架，EFCore是一个<strong>真正</strong>的ORM（对象关系映射）框架。为什么这么说？因为很多开发人员经常用一些“轻量级”的ORM与EF进行比较，进而得出EF性能低下难以使用的结论。他们忽视了EF提供的大量复杂而重要的功能，比如工作单元，类层次映射，值对象映射等特性。</p><p align="right">.Net Core 平台Util应用框架作者 何镇夕</p>Entity Framework和Entity Framework Core都是微软的ORM技术，在平时工作中应该算是使用非常频繁的一个技术，因此在这里记录一下EFCore的学习过程，也为以后的工作提供一些参考。万丈高楼平地起，这是一个入门级别的教程，主要的内容是介绍如何使用EFCore的基本功能，并且通过一些实例来探究执行过程。<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>《你必须掌握的Entity Framework 6.x与Core 2.0》 —<a href="https://www.cnblogs.com/CreateMyself/" target="_blank" rel="noopener">Jeffcky</a><br>《Entity Framework系列教程汇总》  —<a href="https://www.cnblogs.com/wyy1234/p/9650759.html" target="_blank" rel="noopener">捞月亮的猴子</a><br>《Entity Framework Core 2.x 入门》  —<a href="https://www.cnblogs.com/cgzl/p/8543772.html" target="_blank" rel="noopener">solenovex</a><br>《ASP.NET Core MVC 和 Entity Framework Core 入门教程》  —<a href="[https://www.cnblogs.com/yixuanhan/p/9263873.html](https://www.cnblogs.com/yixuanhan/p/9263873.html)">yiyuan.han</a></p><h1 id="Entity-Framework-Core-简介"><a href="#Entity-Framework-Core-简介" class="headerlink" title="Entity Framework Core 简介"></a>Entity Framework Core 简介</h1><h2 id="EFCore-是什么？"><a href="#EFCore-是什么？" class="headerlink" title="EFCore 是什么？"></a>EFCore 是什么？</h2><p>Entity Framework Core (EF Core)是微软推荐的基于.NET Core framework的应用程序数据访问技术。它是轻量级，可扩展并且支持跨平台开发。EF Core是一种对象关系映射器（ORM）。通过应用程序实体对象和关系数据库中的数据的映射，使得开发人员能够以面向对象的方式处理数据。<br>官方文档  <a href="https://docs.microsoft.com/zh-cn/ef/core/" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/ef/core/</a></p><details>              <summary><mark><font color="darkred">点击了解更多关于ORM</font></mark></summary>               <p>                了解ORM,先了解以下概念：<br>               什么是“持久化” ?<br>               持久（Persistence），即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的数据存储在关系型的数据库中，当然也可以存储在磁盘文件中、XML数据文件中等等。<br>               什么是 “持久层”?<br>                持久层（Persistence Layer），即专注于实现数据持久化应用领域的某个特定系统的一个逻辑层面，将数据使用者和数据实体相关联。<br>               什么是ORM?<br>               即Object-Relationl Mapping，它的作用是在关系型数据库和对象之间作一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了 。<br>               为什么要做持久化和ORM设计(重要)?<br>               在目前的企业应用系统设计中，MVC，即 Model（模型）- View（视图）- Control（控制）为主要的系统架构模式。MVC 中的 Model 包含了复杂的业务逻辑和数据逻辑，以及数据存取机制（如 JDBC的连接、SQL生成和Statement创建、还有ResultSet结果集的读取等）等。将这些复杂的业务逻辑和数据逻辑分离，以将系统的紧耦 合关系转化为松耦合关系（即解耦合），是降低系统耦合度迫切要做的，也是持久化要做的工作。MVC 模式实现了架构上将表现层（即View）和数据处理层（即Model）分离的解耦合，而持久化的设计则实现了数据处理层内部的业务逻辑和数据逻辑分离的解耦合。 而 ORM 作为持久化设计中的最重要也最复杂的技术，也是目前业界热点技术。<br>简单来说，按通常的系统设计，使用 JDBC 操作数据库，业务处理逻辑和数据存取逻辑是混杂在一起的。<br>                一般基本都是如下几个步骤：<br>                1、建立数据库连接，获得 Connection 对象。<br>                2、根据用户的输入组装查询 SQL 语句。<br>                3、根据 SQL 语句建立 Statement 对象 或者 PreparedStatement 对象。<br>                4、用 Connection 对象执行 SQL语句，获得结果集 ResultSet 对象。<br>                5、然后一条一条读取结果集 ResultSet 对象中的数据。<br>                6、根据读取到的数据，按特定的业务逻辑进行计算。<br>                7、根据计算得到的结果再组装更新 SQL 语句。<br>                8、再使用 Connection 对象执行更新 SQL 语句，以更新数据库中的数据。<br>                9、最后依次关闭各个 Statement 对象和 Connection 对象。<br>                由上可看出代码逻辑非常复杂，这还不包括某条语句执行失败的处理逻辑。其中的业务处理逻辑和数据存取逻辑完全混杂在一块。而一个完整的系统要包含成 千上万个这样重复的而又混杂的处理过程，假如要对其中某些业务逻辑或者一些相关联的业务流程做修改，要改动的代码量将不可想象。另一方面，假如要换数据库 产品或者运行环境也可能是个不可能完成的任务。而用户的运行环境和要求却千差万别，我们不可能为每一个用户每一种运行环境设计一套一样的系统。所以就要将一样的处理代码即业务逻辑和可能不一样的处理即数据存取逻辑分离开来，另一方面，关系型数据库中的数据基本都是以一行行的数据进行存取的，而程序 运行却是一个个对象进行处理，而目前大部分数据库驱动技术（如ADO.NET、JDBC、ODBC等等）均是以行集的结果集一条条进行处理的。所以为解决 这一困难，就出现 ORM 这一个对象和数据之间映射技术。<br>                举例来说，比如要完成一个购物打折促销的程序，用 ORM 思想将如下实现（引自《深入浅出Hibernate》）：<br>                业务逻辑如下：<br>                </p>```CSpublic Double calcAmount(String customerid, double amount) {    // 根据客户ID获得客户记录    Customer customer = CustomerManager.getCustomer(custmerid);     // 根据客户等级获得打折规则    Promotion promotion = PromotionManager.getPromotion(customer.getLevel());     // 累积客户总消费额，并保存累计结果    customer.setSumAmount(customer.getSumAmount().add(amount);     CustomerManager.save(customer);     // 返回打折后的金额    return amount.multiply(protomtion.getRatio()); }```<p>这样代码就非常清晰了，而且与数据存取逻辑完全分离。设计业务逻辑代码的时候完全不需要考虑数据库JDBC的那些千篇一律的操作，而将它交给 CustomerManager 和 PromotionManager 两个类去完成。这就是一个简单的 ORM 设计，实际的 ORM 实现框架比这个要复杂的多。<br> </p></details><p></p><h2 id="EFCore原理是什么？"><a href="#EFCore原理是什么？" class="headerlink" title="EFCore原理是什么？"></a>EFCore原理是什么？</h2><p>可以简单理解为类和数据库之间的映射，要解决一个表对多个类，或者一个类对多个表等问题。<br>详细了解可以参考Jeffcky的这篇博文：<a href="https://www.cnblogs.com/CreateMyself/p/8638661.html" target="_blank" rel="noopener">EF Core迁移原理</a><br> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/DomainAndDatabase.png" alt="DomainAndDatabase"></p><h2 id="为什么使用EFCore？"><a href="#为什么使用EFCore？" class="headerlink" title="为什么使用EFCore？"></a>为什么使用EFCore？</h2><ul><li>主要是提高生产力，而不是因为性能</li><li>支持很多数据库</li><li>可以使用Linq</li><li>注重领域（Domain）而不是数据库</li></ul><h2 id="EFCore-2-x-支持哪些平台框架？"><a href="#EFCore-2-x-支持哪些平台框架？" class="headerlink" title="EFCore 2.x 支持哪些平台框架？"></a>EFCore 2.x 支持哪些平台框架？</h2><ul><li>.Net Core 2.x</li><li>.Net 4.6.1 +</li><li>UWP</li><li>Xamarin</li></ul><h1 id="EFCore使用实例"><a href="#EFCore使用实例" class="headerlink" title="EFCore使用实例"></a>EFCore使用实例</h1><h2 id="创建EF-Core-Demo"><a href="#创建EF-Core-Demo" class="headerlink" title="创建EF Core Demo"></a>创建EF Core Demo</h2><h3 id="Step1-创建解决方案EFCore，添加Netcore类库EFCore-DomainModels。"><a href="#Step1-创建解决方案EFCore，添加Netcore类库EFCore-DomainModels。" class="headerlink" title="Step1 创建解决方案EFCore，添加Netcore类库EFCore.DomainModels。"></a>Step1 创建解决方案EFCore，添加Netcore类库EFCore.DomainModels。</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/CreateSolution.png" alt="CreateSolution"></p><h3 id="Step2-继续添加Netcore类库项目EFCore-Data。"><a href="#Step2-继续添加Netcore类库项目EFCore-Data。" class="headerlink" title="Step2 继续添加Netcore类库项目EFCore.Data。"></a>Step2 继续添加Netcore类库项目EFCore.Data。</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/AddProject.png" alt="AddProject"></p><h3 id="Step3-在DomainModel中新建Model，一个是省份Province，另一个Model是城市City。"><a href="#Step3-在DomainModel中新建Model，一个是省份Province，另一个Model是城市City。" class="headerlink" title="Step3 在DomainModel中新建Model，一个是省份Province，另一个Model是城市City。"></a>Step3 在DomainModel中新建Model，一个是省份Province，另一个Model是城市City。</h3><pre class="line-numbers language-CS"><code class="language-CS">namespace EFCore.DomainModels{    public class Province    {        public Province()        {            Cities = new List<City>();        }        public int Id { get; set; }        public string Name { get; set; }        public int Population { get; set; }        public List<City> Cities { get; set; }    }}namespace EFCore.DomainModels{    public class City    {        public int Id { get; set; }        public string Name { get; set; }        public string AreaCode { get; set; }        public int ProvinceId { get; set; }        public Province Province { get; set; }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong><br>这两者之间是一对多的关系。<br>City类有一个外键ProvinceId和导航属性Province。<br>Province构造函数里面已经初始化City，这样Province.Cities就不会为Null。<br>关于EF导航属性的讲解，可以参考<a href="https://home.cnblogs.com/u/liangxiaofeng/" target="_blank" rel="noopener">默默淡然</a>这篇博文<a href="https://www.cnblogs.com/liangxiaofeng/p/5809451.html" target="_blank" rel="noopener">《EF Code First 导航属性 与外键》</a></p><details>              <summary><mark><font color="darkred">点击了解更多关于导航属性</font></mark></summary>               <p>                 EF Core导航属性分为三种：<br>                集合导航属性：主表中对子表相关数据的引用<br>                引用导航属性：子表中对主表数据的引用<br>                反转导航属性：一个导航属性对应的另一端的导航属性<br>                微软的示例：<br>                Blog是主表，Post是子表  <br>                  </p>```CSpublic class Blog{    public int BlogId { get; set; }    public string Url { get; set; }<pre><code>public List&lt;Post&gt; Posts { get; set; }</code></pre><p>}</p><p>public class Post<br>{<br>    public int PostId { get; set; }<br>    public string Title { get; set; }<br>    public string Content { get; set; }</p><pre><code>public int BlogId { get; set; }public Blog Blog { get; set; }</code></pre><p>}</p><pre><code>在以上实体类的定义中： Blog.Posts是集合导航属性，包含子表中的关联数据。Post.Blog是引用导航属性，包含主表中的关联数据。Post.Blog是Blog.Posts的反转导航属性，反过来也一样。   通过子表查询主表数据：`var post=db.Posts.Include("Blog").First();`可以访问到Blog表的其它字段：`Console.Write(post.Blog.Url)`通过主表访问子表数据：`var blog=db.Blogs.Include(b=&gt;b.Posts).First();`可以访问子表相关的所有数据：</code></pre><p>foreach(var post in blog.Posts)<br>{<br>    Console.Write(post.Title);<br>}</p><pre><code>通过引用导航属性访问主表数据，不需要额外定义。通过集合导航属性访问子表数据，需要使用Fluent API配置。重写数据上下文的OnModelCreating方法，加入以下代码：</code></pre><p>builder.Entity<post>()<br>        .HasOne(post =&gt; post.Blog)<br>        .WithMany(bolg =&gt; blog.Posts);</post></p><pre><code>如果不使用Fluent API进行配置，执行`var blog=db.Blogs.Include(b=&gt;b.Posts).First();`时会报数据库语法错误。&lt;/details&gt; ### Step4 安装EFCore在Data项目中，从Nuget安装Microsoft.EntityFrameworkCore和Microsoft.EntityFrameworkCore.SqlServer。注意DomainModel项目中只放Model，不在这个里面进行安装EFCore。![AddNuGetEntityFrameworkCore](AddNuGetEntityFrameworkCore.png)![AddNuGetEntityFrameworkCoreSqlServer](AddNuGetEntityFrameworkCoreSqlServer.png)### Step5 项目引用关系Data项目需要引用DomainModel的项目。![ProjectReference](ProjectReference.png)### Step6 在Data项目中建立MyContext类。MyContext继承于DbContext，Context中包括了所有的用于数据库交互的操作。这里使用sqllocaldb,可以在本地cmd用sqllocaldb info进行查看。```CSnamespace EFCore.Data{    public class MyContext: DbContext    {        public DbSet&lt;Province&gt; Provinces { get; set; }        public DbSet&lt;City&gt; Cities { get; set; }        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)        {            optionsBuilder.UseSqlServer("Server=(localdb)\\MSSQLLocalDB; Database=EFCoreDemo; Trusted_Connection=True;");         }    }}</code></pre><p>正常生产环境中的数据库连接字符创应该写在配置中，这里为了进行演示就写在MyContext中了。<br>程序第一次使用时就会触发Onconfiguring这个方法，迁移时也会使用这个方法。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/CreateMyContext.png" alt="CreateMyContext"></p><h2 id="EFCore-迁移"><a href="#EFCore-迁移" class="headerlink" title="EFCore 迁移"></a>EFCore 迁移</h2><h3 id="迁移过程的三个主要步骤："><a href="#迁移过程的三个主要步骤：" class="headerlink" title="迁移过程的三个主要步骤："></a>迁移过程的三个主要步骤：</h3><ol><li>创建/修改 Domain Model</li><li>创建迁移文件</li><li>应用迁移到数据库，或生产SQL脚本</li></ol><p>想要在VS中使用迁移命令的话需要安装迁移用的库： Microsoft.EntityFrameworkCore.Tool<br>按照官方文档，执行之前首先需要安装两个库：<br><strong>Microsoft.EntityFrameworkCore.Tools</strong> - PowerShell命令<br><strong>Microsoft.EntityFrameworkCore.Design</strong> - 迁移引擎<br>实际上，只需添加Tools这个库即可，因为它下面包依赖了Design这个库。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/AddNuGetEntityFrameworkCoreTool.png" alt="AddNuGetEntityFrameworkCore.Tool"></p><h3 id="应用EFCore迁移的两种方式"><a href="#应用EFCore迁移的两种方式" class="headerlink" title="应用EFCore迁移的两种方式"></a>应用EFCore迁移的两种方式</h3><ul><li><p>方式一：直接迁移<br>Update-Database -verbose (加上-verbose 可以显示更新数据库的详情)<br>本文的例子在执行过程后，会自动在User下面生成数据库文件。</p></li><li><p>方式二：生成SQL脚本<br>script-migration可以生产迁移脚本。<br>生产环境一般是通过迁移脚本进行数据库更新的。</p></li></ul><h3 id="执行EFCore迁移命令"><a href="#执行EFCore迁移命令" class="headerlink" title="执行EFCore迁移命令"></a>执行EFCore迁移命令</h3><h4 id="Step1-打开Package-Management-Tool"><a href="#Step1-打开Package-Management-Tool" class="headerlink" title="Step1 打开Package Management Tool"></a>Step1 打开Package Management Tool</h4><p>英文版VS Studio 可以直接在搜索框中搜索package Manager Tool；<br>中文版可以在视图–&gt;NuGet包管理工器–&gt;程序包管理控制台中打开。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/OpenPackageManagementConsole.png" alt="OpenPackageManagementConsole"><br>注意选择正确的项目执行迁移命令，这里我们选择EFCore.Data项目。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/SelectProjectToMigration.png" alt="SelectProjectToMigration"></p><h4 id="Step2-查看都有哪些迁移命令："><a href="#Step2-查看都有哪些迁移命令：" class="headerlink" title="Step2 查看都有哪些迁移命令："></a>Step2 查看都有哪些迁移命令：</h4><p>通过get-help entityframeworkcore命令可以查看EFCore的迁移命令。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/EFCoreCommand.png" alt="EFCoreCommand"></p><ul><li>Add-Migration命令创建了Model或者Model变了，生成一些SQL语句但并没有执行</li><li>Update-Database命令读取之前创建的Migration，执行SQL语句并进行匹配</li></ul><h4 id="Step3-生成Migration："><a href="#Step3-生成Migration：" class="headerlink" title="Step3 生成Migration："></a>Step3 生成Migration：</h4><p>执行add-migration Initial命令，这里的Initial是这次migration的名字。<br>执行后生成三个文件，分别是：<br>MyContextModelSnapshot快照文件，<br>带时间戳的迁移文件20190709125559_Initial.cs 和 20190709125559_Initial.Designer.cs<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/MigrationFile.png" alt="MigrationFile"></p><h3 id="应用迁移更新数据库"><a href="#应用迁移更新数据库" class="headerlink" title="应用迁移更新数据库"></a>应用迁移更新数据库</h3><p><strong>Method1</strong> 命令直接更新：Update-Database -verbose (加上-verbose 可以显示更新数据库的详情)<br>此时会自动在User下面生成数据库文件。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/UpdateMigration.png" alt="UpdateMigration"><br>通过视图里面的SQL Server对象资源浏览器  可以查看我们创建的数据，可以观察到迁移表中记录等。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/MigrationHistory.png" alt="MigrationHistory"><br><strong>Method 2</strong> 生成SQL脚本：script-migration<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://efcore.zhengchaoqiang.com/Entity-Framework-Core-Learning-Series-1/MigrationSqlScripts.png" alt="MigrationSqlScripts"></p></details><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Entity Framework Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Entity Framework Core 2.X </tag>
            
            <tag> EFCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Basic Tutorial Chapter 1-1 前言和简介 </title>
      <link href="/2019/07/06/c-learning-series-1/"/>
      <url>/2019/07/06/c-learning-series-1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个记录学习C#的系列，可以说是一个入门系列，内容大多数是基础内容，尤其是前面两章。这个系列专注于<strong>C#(7.0版本)</strong>和<strong>.Net Core (2.x版本)</strong>，不包括应用框架，例如ASP Net Core, WPF, WinForm等。对自己来说，主要的目的在于温故而知新。当前的软件开发提倡敏捷开发，很多时候交付时间紧张，交付压力大。这个时候很多现成的组件或是框架就变得很热门，它们易用高效，能够大幅度提升生产力。当然，不可否认敏捷开发带来的好处。但是，如果想深入地去了解这些组件和框架背后的原理，就需要我们具备扎实的基本工。重复造轮子的事情没必要干，但是保不齐哪天我们需要造新的轮子，那这个时候就需要具备造轮子的功底了。另一个方面来说，打好基础的基础，并不意味着放弃学习新知识新技术，这恰恰是为了更好地学习新知识新技术，对自己的成长而言，百利而无一害。</p><p align="center">合抱之木，生于毫末：九层之台，起于垒土；千里之行，始于足下。</p><p align="right">——（春秋）老子</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="BasicKnowhow.png" alt="BasicKnowhow"></p><h1 id="好书推荐"><a href="#好书推荐" class="headerlink" title="好书推荐"></a>好书推荐</h1><p>这是这个系列主要的两本参考用书，也推荐作为入门C#的原版书。关于语言，记得很清楚在自己身上的一个反面例子。那是我开始工作的第一个月发生的事情，有一次自己安装IDE的时候选择了中文，被部门一个技术大佬点名了，他推荐我一定要安装英文版的VS，多看英文原版的文章，不要对中文有太多的依赖。从那以后，我就尽量让自己克服中文依赖，实在不行就查字典，不过这是个长期过程，自己还在努力中。原版纸质很贵，这里我也放了这两本书的电子版，以供下载。</p><ul><li>第一本 <strong>C# 7.0 in a Nutshell</strong>   <a href="book1.pdf">点击下载</a></li><li>第二本 <strong>C# IN DEPTH</strong>  <a href="book2.pdf">点击下载</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="Books.png" alt="Books"></p><h1 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h1><h2 id="语言和框架评分"><a href="#语言和框架评分" class="headerlink" title="语言和框架评分"></a>语言和框架评分</h2><p>C#和其他语言的对比，具体可以查看 <a href="[https://www.techempower.com/benchmarks/](https://www.techempower.com/benchmarks/)">Web Framework Benchmarks</a> ，这个是相对权威的排名。</p><h2 id="Web-Developer-RoadMap-2019"><a href="#Web-Developer-RoadMap-2019" class="headerlink" title="Web Developer RoadMap 2019"></a>Web Developer RoadMap 2019</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="intro.png" alt="intro"></p><h3 id="Frontend-Roadmap"><a href="#Frontend-Roadmap" class="headerlink" title="Frontend Roadmap"></a>Frontend Roadmap</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="frontend.png" alt="frontend"></p><h3 id="Back-end-Roadmap"><a href="#Back-end-Roadmap" class="headerlink" title="Back-end Roadmap"></a>Back-end Roadmap</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="backend.png" alt="backend"></p><h3 id="DevOps-Roadmap"><a href="#DevOps-Roadmap" class="headerlink" title="DevOps Roadmap"></a>DevOps Roadmap</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="devops.png" alt="devops"></p><h2 id="ASP-NET-Core-Developer-Roadmap"><a href="#ASP-NET-Core-Developer-Roadmap" class="headerlink" title="ASP.NET Core Developer Roadmap"></a>ASP.NET Core Developer Roadmap</h2><h2 id="英文版"><a href="#英文版" class="headerlink" title="英文版"></a>英文版</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="aspnetcore-developer-roadmap.png" alt="aspnetcore-developer-roadmap"></p><h2 id="中文版"><a href="#中文版" class="headerlink" title="中文版"></a>中文版</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="aspnetcore-developer-roadmap.zh-Hans.png" alt="aspnetcore-developer-roadmap.zh-Hans"></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>《<a href="https://www.bilibili.com/video/av49952624" target="_blank" rel="noopener"><strong>真会C#？</strong></a>》 ——  <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fcgzl%2F" target="_blank" rel="noopener">solenovex</a></li><li><strong>《C# 7.0 in a Nutshell_ The Defin》</strong> —— Joseph Albahari</li><li><strong>《Manning.C#.in.Depth.4th.Edition.2019.3》</strong> —— Jon Skeet</li></ul><p><strong>PS:</strong> 本系列主要参考solenovex的教学视频进行整理，针对其中自己没有理解的部分会进行补充说明。同时，还会结合自己的实践，进行相应的扩展，或者补充一些个人体会。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# Basic Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog--Hello World</title>
      <link href="/2019/07/03/my-first-blog/"/>
      <url>/2019/07/03/my-first-blog/</url>
      
        <content type="html"><![CDATA[<hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://cdn.zhengchaoqiang.com/My-First-Blog/Blog1.jpg" alt=""></p><h1 id="HelloWord"><a href="#HelloWord" class="headerlink" title="HelloWord"></a>HelloWord</h1><p>就像学习所有的语言一样，第一章总是HelloWorld，写博客也不例外。当然也不排除自己三分钟热度的可能性，毕竟这样的事情也没少干。买域名，搭建环境，改样式，看起来终于有点样子了，但总是有种不超过三篇博客的预感。<br>为了尽可能保持自己的热情，开始之前先梳理一下自己的动机，为什么要写？要写些什么？怎么写？</p><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><p>很大部分原因是记录自己平时遇到的问题或者是梳理知识点。作为一只非科班出身的程序汪，本身对于计算机体系没有一个相对系统的学习和了解。有些工作中遇到的坑，可能当时解决了，然后又遇到了，这时候很可能已经忘记怎么解决的，这时候翻翻博客，可能就很快找到当时解决方案了。<br>其次，写博客很大程度是需要将自己知道的东西很好的表达出来，这是一个锻炼自己表达能力的好机会。我一直觉得，知道怎么用是一回事，但是知道为什么这么用又是另一回事。知其然，也要知其所以然。<br>我的初衷是记录自己，当然，如果别人在遇到某个问题的时候，正好自己也遇到过类似的问题，恰巧可以提供一些参考。那么，这种分享不只是对自己，对他人可能也是有点价值的。</p><h2 id="What？"><a href="#What？" class="headerlink" title="What？"></a>What？</h2><p>技术人生，感悟生活。博客内容计划大部分是以技术分享，技术实践为主，也会夹杂着自己的一些生活感悟。想了一下，可能会有读书笔记，学习笔记，会有新鲜技术的试用，会有经典知识的复习回顾，会有踩坑的记录，会有生活琐碎的杂文等。总之，不太想受限于形式和内容，真实的表达自己即可。</p><h2 id="How？"><a href="#How？" class="headerlink" title="How？"></a>How？</h2><p>自我感觉是一个星期可能会强迫自己更新个一到两次。不管是什么内容，第一步形成习惯。也许工作很忙，生活也很琐碎，但是还是希望自己保持这种持续学习的态度和热情。<br>写博客的心态很重要，没人看不打紧，毕竟自己的初衷是记录自己的成长。如果有人吐槽，那就说明有人关注，更不必放在心上。当然，最重要的一点是，希望自己借此机会挑战一下自己，去坚持做一件事情。</p><h2 id="Who？"><a href="#Who？" class="headerlink" title="Who？"></a>Who？</h2><p>其实最大的读者是自己。当然，也会分享给自己的家人，身边的朋友。若干年后，如果我也能不因自己的碌碌无为而悔恨的话，那么，我希望这里记录了美好的一切。</p><h1 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h1><p>说了HelloWorld，那下一步得首先制定个初步的计划，构建一下短时间内的计划，目标。作为一个初出茅庐的非科班程序员，我觉得有很多的知识需要去补，因此我可能会选择从基础开始，从最简单的开始。例如C#的基础知识，Net Core的基础知识，MVC的基础知识，设计模式，甚至Http,TCP的基础知识等。只有夯实基础知识，才能应对更多的前言技术和挑战。同时，也要与时俱进，积极提升自己。从软件架构，代码重构等角度去思考，去进阶，去探索。一步一步来，低头做事，也抬头看路。</p><h1 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h1><p>我喜欢用PDCA的准则。正好现在处于2019年的年中，我也想给自己立一些Targets：</p><ul><li>控制体重。连自己都控制不住，那还能控制得了什么。工作一年，体重已经涨了10斤。管住嘴，迈开腿，这个夏天目标是扔掉这不属于自己的10斤脂肪。</li><li>达成德语A1。过完走遍德国的A1教材，熟读课文，掌握日常交际词汇。不要辜负了良好的开头。</li><li>初级程序员。我对自己的定义是初级程序员，或者是小白程序员。因此，没有包袱，没有身段。我能做的就是踏踏实实学好技术，奠定基石。Dot Net技术栈，加油干。<h1 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h1>检查的方法就是自查，标准就是和自己比。博客这里也是自己进行反思总结的好地方。没有太多的准则，有的话那可能也是全靠自律吧。<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1>简单的总结一下：Aller Anfang ist schwer. 万事开头难，守得初心，方得始终。我也不知道自己会坚持做多久的程序员，但只要自己一天还是这个身份，就希望用最programmer的方式要求自己，少一点抱怨，而是去做好眼前的工作。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/01/hello-world/"/>
      <url>/2019/07/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><p>This is the First Post.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
